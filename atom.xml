<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荆文征</title>
  
  <subtitle>已識乾坤大，猶憐草木新。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.msiter.com/"/>
  <updated>2018-08-29T10:33:16.498Z</updated>
  <id>http://blog.msiter.com/</id>
  
  <author>
    <name>小酒馆老板</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hashimoto I/O bound proof of work</title>
    <link href="http://blog.msiter.com/Hashimoto%20IO%20bound%20proof%20of%20work-20180824.html"/>
    <id>http://blog.msiter.com/Hashimoto IO bound proof of work-20180824.html</id>
    <published>2018-08-24T15:25:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<p>Abstract: Using a cryptographic hash function not as a proof of work by itself, but rather as a generator of pointers to a shared data set, allows for an I/O bound proof of work. This method of proof of work is dif icult to optimize via ASIC design, and dif icult to outsource to nodes without the full data set. The name is based on the three operations which comprise the algorithm: hash, shift, and modulo.</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="The-need-for-proofs-which-are-difficult-to-outsource-and-optimize" style="display: inline;"><a href="#The-need-for-proofs-which-are-difficult-to-outsource-and-optimize" class="headerlink" title="The need for proofs which are difficult to outsource and optimize"></a>The need for proofs which are difficult to outsource and optimize</h2><p>A common challenge in cryptocurrency development is maintaining decentralization of the network. The use of proof of work to achieve decentralized consensus has been most notably demonstrated by Bitcoin, which uses partial collisions with zero of sha256, similar to hashcash. As Bitcoin’s popularity has grown, dedicated hardware (currently application specific integrated circuits, or ASICs) has been produced to rapidly iterate the hash­based proof of work function. Newer projects similar to Bitcoin often use different algorithms for proof of work, and often with the goal of ASIC resistance. For algorithms such as Bitcoin’s, the improvement factor of ASICs means that commodity computer hardware can no longer be effectively used, potentially limiting adoption</p><p>Proof of work can also be “outsourced”, or performed by a dedicated machine (a “miner”) without knowledge of what is being verified. This is often the case in Bitcoin’s “mining pools”. It is also beneficial for a proof of work algorithm to be difficult to outsource, in order to promote decentralization and encourage all nodes participating in the proof of work process to also verify transactions. With these goals in mind, we present Hashimoto, an I/O bound proof of work algorithm we believe to be resistant to both ASIC design and outsourcing.</p><p>Initial attempts at “ASIC resistance” involved changing Bitcoin’s sha256 algorithm for a different, more memory intensive algorithm, Percival’s “scrypt” password based key derivation function . Many implementations set the scrypt arguments to low memory requirements, defeating much of the purpose of the key derivation algorithm. While changing to a new algorithm, coupled with the relative obscurity of the various scrypt­based cryptocurrencies allowed for a delay, scrypt optimized ASICs are now available. Similar attempts at variations or multiple heterogeneous hash functions can at best only delay ASIC implementations.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Leveraging-shared-data-sets-to-create-I-O-bound-proofs" style="display: inline;"><a href="#Leveraging-shared-data-sets-to-create-I-O-bound-proofs" class="headerlink" title="Leveraging shared data sets to create I/O bound proofs"></a>Leveraging shared data sets to create I/O bound proofs</h2>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>“A supercomputer is a device for turning compute-bound problems into I/O-bound problems.”-Ken Batcher</p></em>                                </div>        <p>Instead, an algorithm will have little room to be sped up by new hardware if it acts in a way that commodity computer systems are already optimized for.</p><p>Since I/O bounds are what decades of computing research has gone towards solving, it’s unlikely that the relatively small motivation of mining a few coins would be able to advance the state of the art in cache hierarchies. In the case that advances are made, they will be likely to impact the entire industry of computer hardware.</p><p>Fortuitously, all nodes participating in current implementations of cryptocurrency have a large set of mutually agreed upon data; indeed this “blockchain” is the foundation of the currency. Using this large data set can both limit the advantage of specialized hardware, and require working nodes to have the entire data set.</p><p>Hashimoto is based off Bitcoin’s proof of work . In Bitcoin’s case, as in Hashimoto, a successful proof satisfies the following inequality:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">hash_output &lt; target</code></pre><p>For bitcoin, the hash_output is determined by</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">hash_output = sha256(prev_hash, merkle_root, nonce)</code></pre><p>where prev_hash is the previous block’s hash and cannot be changed. The merkle_root is based on the transactions included in the block, and will be different for each individual node. The nonce is rapidly incremented as hash_outputs are calculated and do not satisfy the inequality. Thus the bottleneck of the proof is the sha256 function, and increasing the speed of sha256 or parallelizing it is something ASICs can do very effectively.</p><p>Hashimoto uses this hash output as a starting point, which is used to generated inputs for a second hash function. We call the original hash hash_output_A, and the final result of the proof final_output.</p><p>Hash_output_A can be used to select many transactions from the shared blockchain, which are then used as inputs to the second hash. Instead of organizing transactions into blocks, for this purpose it is simpler to organize all transactions sequentially. For example, the 47th transaction of the 815th block might be termed transaction 141,918. We will use 64 transactions, though higher and lower numbers could work, with different access properties. We define the following functions:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">nonce 64­bits. A new nonce is created for each attempt.get_txid(T) return the txid (a hash of a transaction) of transaction number T from block B.block_height the current height of the block chain, which increases at each new block</code></pre><p>Hashimoto chooses transactions by doing the following:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">hash_output_A = sha256(prev_hash, merkle_root, nonce)for i = 0 to 63 do        shifted_A = hash_output_A &gt;&gt; i        transaction = shifted_A mod total_transactions        txid[i] = get_txid(transaction) &lt;&lt; iend fortxid_mix = txid[0] ⊕ txid[1] … ⊕ txid[63]final_output = txid_mix ⊕ (nonce &lt;&lt; 192)</code></pre><p>The target is then compared with final_output, and smaller values are accepted as proofs.</p><p>The initial hash output is used to independently and uniformly select 64 transactions from the blockchain. At each of the 64 steps, the hash_output­A is shifted right by one bit, to obtain a new number, shifted_A. A block is chosen by computing shifted_A modulo the total number of blocks, and a transaction chosen by computing shifted_A modulo the number of transactions within that block. These txids are also shifted by the same amount as the shifted_A which selected them. Once the 64 txids have been retrieved, they all XORed together and used as the input for the final hash function, along with the original nonce. The original nonce, shifted up into the most significant bits, is needed in the final XOR function because very small sets of transactions may not contain enough permutations of txids to satisfy the proof of work inequality. In fact, this algorithm only becomes I/O bound as the blockchain expands in size. In the extreme case of a blockchain with only 1 block and 1 transaction, the entire 64 iteration process can be omitted, and the nonce for final_output can be rapidly iterated as the txids will always be the same. With larger blockchains, inclusion of the nonce in the final hash may no longer be necessary but neither is it detrimental.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Analysis-of-bottlenecks" style="display: inline;"><a href="#Analysis-of-bottlenecks" class="headerlink" title="Analysis of bottlenecks"></a>Analysis of bottlenecks</h2><p>This method has an exponential tradeoff between hash operations and memory access. Given a blockchain of 100 blocks, if a mining node were to lack even one block, each initial hash would have a probability of 0.99^64 ≈ 0.5 of being able to retrieve the inputs for the second hash function. Thus a 1% reduction in I/O requires a 2X increase in hash power. A 2% reduction in I/O needs roughly a 4X  increase in hash power, and so on. Holding half the blockchain will allow a miner to get to the second hash operation once for every 10^20 first hash operations. Clearly, miners need to have the entire blockchain to mine at all.<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/hashimoto/WX20180824-152143.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/hashimoto/WX20180824-152143.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 1. Hashes needed vs proportion of blockchain held. Note the log scale</figcaption></figure></p><p>This is also easy to verify for all nodes. Receiving nodes need only perform 1 sha256 operations, 128 shift operations, 64 XORs, and several hundred I/O operations. Verifying this proof of work is much less costly than the signature verification that is also needed during block verification.</p><p>This method cannot be effectively outsourced. If a server were to host the blockchain for remote mining nodes, the network latency would completely overwhelm the time per hash operation. In this scenario, miners would hold a lookup table of the number of transactions in each block, so that they could compute the hash, shifts, modulo and find each transaction they need the txid of. Sending this to the blockchain host server would be at most a few kilobytes. The blockchain hosting servers response would also be 64 txids * 32 bytes each = 2Kbytes or slightly more. If these requests were serialized, the latency of each transfer is on the order of milliseconds, which would create a limit of under one thousand hashes per second. If instead, miners created large batches of txid requests, each possible hash would require 2Kbyte of data over the network. Running one billion sha256 operations per second, something easily achievable with current hardware, would require network throughput of several terabytes per second. For a blockchain smaller than a terabyte, the entire blockchain would need to be transferred multiple times per second. Clearly, it would be much faster for each mining node to maintain a local copy of all the data it needs to every possible the proof of work.</p><p>Developing an ASIC for such an algorithm would be unlikely to lead to significant improvements over commodity computer hardware. As evidenced by the increase in the Bitcoin network’s difficulty, sha256 can be optimized through the use of dedicated hardware. However, Hashimoto uses only 1 sha256 operation per attempt, each of which takes on the order of microseconds for a current CPU. Though in customised hardware a shift can be had for zero time and transistor cost, the shift operation is also very rapid on general purpose CPUs and not a bottleneck. Similarly while modulo operations can also be optimized, the are very rapid on CPUs as well. The bottleneck for Hashimoto is the get_txid(T) function, which requires a read operation to disk or RAM. These I/O operations cannot be effectively cached, as each hash_output_A points to a completely different set of transactions.</p><p>The most effective computers for this proof of work will have large amounts of high speed memory. As the hash, shift and modulo operations are fast, many (block, tx) pairs can be computed and queued, and retrieved either sequentially or in parallel. While the blockchain is small, CPUs will be able to cache the entire blockchain on­chip, but as it grows in size moving it DRAM will become necessary. Moving the txids onto a disk will be much slower, and would likely cause a miner to become uncompetitive with miners able to store the entire blockchain in DRAM. If the blockchain grows larger more quickly than DRAM storage, multiple servers using infiniband or another low­latency, high throughput networking system. This type of access pattern is commonly seen in many high performance computing applications, and decades of research has optimized computer hardware for this purpose.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Conclusion" style="display: inline;"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>An ASIC resistant, non­outsourceable proof of work can be created by leveraging the large shared data store inherent to cryptocurrencies ­­ the blockchain. Using a cryptographic hash algorithm to pseudo­randomly select elements from the large shared data set allows the proof of hashing capacity to become a proof of I/O capacity, something current computer hardware is already optimized for. This I/O bound algorithm also ensures that each node contains the entire data set, limiting centralized, outsourcing pools. Hashimoto can a new cryptocurrency to launch in a fair and decentralized way on commodity computer hardware.</p>    <p hidden id="CurrentFileName">Hashimoto IO bound proof of work.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Abstract: Using a cryptographic hash function not as a proof of work by itself, but rather as a generator of pointers to a shared data set, allows for an I/O bound proof of work. This method of proof of work is dif icult to optimize via ASIC design, and dif icult to outsource to nodes without the full data set. The name is based on the three operations which comprise the algorithm: hash, shift, and modulo.&lt;/p&gt;
    
    </summary>
    
      <category term="共识算法" scheme="http://blog.msiter.com/categories/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="hashimoto" scheme="http://blog.msiter.com/tags/hashimoto/"/>
    
      <category term="论文" scheme="http://blog.msiter.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="共识算法" scheme="http://blog.msiter.com/tags/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Practical Byzantine Fault Tolerance</title>
    <link href="http://blog.msiter.com/Practical%20Byzantine%20Fault%20Tolerance-20180803.html"/>
    <id>http://blog.msiter.com/Practical Byzantine Fault Tolerance-20180803.html</id>
    <published>2018-08-03T14:22:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Abstract</strong></p><p>This paper describes a new replication algorithm that is able to tolerate Byzantine faults. We believe that Byzantinefault-tolerant algorithms will be increasingly important in the future because malicious attacks and software errors are increasingly common and can cause faulty nodes to exhibit arbitrary behavior. Whereas previous algorithms assumed a synchronous system or were too slow to be used in practice, the algorithm described in this paper is practical: it works in asynchronous environments like the Internet and incorporates several important optimizations that improve the response time of previous algorithms by more than an order of magnitude. We implemented a Byzantine-fault-tolerant NFS service using our algorithm and measured its performance. The results show that ourservice is only 3% slower than a standard unreplicated NFS.</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="1-Introduction" style="display: inline;"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>Malicious attacks and software errors are increasingly common. The growing reliance of industry and government on online information services makes malicious attacks more attractive and makes the consequences of successful attacks more serious. In addition, the number of software errors is increasing due to the growth in size and complexity of software. Since malicious attacks and software errors can cause faulty nodes to exhibit Byzantine (i.e., arbitrary) behavior, Byzantine-fault-tolerant algorithms are increasingly important.</p><p>This paper presents a new, practical algorithm for state machine replication [17, 34] thattoleratesByzantine faults. The algorithm offers both liveness and safety provided at most [$\dfrac {n-1}{3}$]out of a total of <code>n</code> replicas are simultaneously faulty. This means that clients eventually receive replies to their requests and those replies are correct according to linearizability [14, 4]. The algorithm works in asynchronous systems like the Internet and it incorporates important optimizations that enable it to perform efficiently.</p><p>There is a significant body of work on agreement and replication techniques that tolerate Byzantine faults (starting with [19]). However, most earlier work (e.g., [3, 24, 10]) either concerns techniques designed to demonstrate theoretical feasibility that are too inefficient to be used in practice, or assumes synchrony, i.e., relies on known bounds on message delays and process speeds. The systems closest to ours, Rampart [30] and SecureRing [16], were designed to be practical, but they rely on the synchrony assumption for correctness, which is dangerous in the presence of malicious attacks. An attacker may compromise the safety of a service by delaying non-faulty nodes or the communication between them untilthey are tagged asfaulty and excluded from the replica group. Such a denial-of-service attack is generally easier than gaining control over a non-faulty node.</p><p>Our algorithm is not vulnerable to this type of attack because it does not rely on synchrony for safety. In addition, it improves the performance of Rampart and SecureRing by more than an order of magnitude as explained in Section 7. It uses only one message round trip to execute read-only operations and two to execute read-write operations. Also, it uses an efficient authentication scheme based on message authentication codes during normal operation; public-key cryptography, which was cited as the major latency [29] and throughput [22] bottleneck in Rampart, is used only when there are faults.</p><p>To evaluate our approach, we implemented a replication library and used it to implement a real service: a Byzantine-fault-tolerant distributed file system that supports the NFS protocol. We used the Andrew benchmark [15] to evaluate the performance of oursystem. The results show that our system is only 3% slower than the standard NFS daemon in the Digital Unix kernel during normal-case operation.</p><p>Thus, the paper makes the following contributions:</p><ul class="g-list-style-circle"><li>It describes the first state-machine replication protocol that correctly survives Byzantine faults in asynchronous networks.</li><li>It describes a number of important optimizations that allow the algorithm to perform well so that it can be used in real systems.</li><li>It describes the implementation of a Byzantine-faulttolerant distributed file system.</li><li>It provides experimental results that quantify the cost of the replication technique.</li></ul><p>The remainder of the paper is organized as follows. We begin by describing our system model, including our failure assumptions. Section 3 describes the problem solved by the algorithm and states correctness conditions. The algorithm is described in Section 4 and some important optimizations are described in Section 5. Section 6 describes our replication library and how we used it to implement a Byzantine-fault-tolerant NFS. Section 7 presents the results of our experiments. Section 8 discusses related work. We conclude with a summary of what we have accomplished and a discussion of future research directions.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="2-System-Model" style="display: inline;"><a href="#2-System-Model" class="headerlink" title="2 System Model"></a>2 System Model</h1><p>We assume an asynchronous distributed system where nodes are connected by a network. The network may fail to deliver messages, delay them, duplicate them, or deliver them out of order.</p><p>We use a Byzantine failure model, i.e., faulty nodes may behave arbitrarily, subject only to the restriction mentioned below. We assume independent node failures. Forthis assumption to be true in the presence of malicious attacks, some steps need to be taken, e.g., each node should run different implementations of the service code and operating system and should have a different root password and a different administrator. It is possible to obtain different implementations from the same code base [28] and for low degrees of replication one can buy operating systems from different vendors. N-version programming, i.e., different teams of programmers produce different implementations, is another option for some services.</p><p>We use cryptographic techniques to prevent spoofing and replays and to detect corrupted messages. Our messages contain public-key signatures [33], message authentication codes [36], and message digests produced by collision-resistant hash functions [32]. We denote a message $m$  signed by node $i$  as $ \langle m\rangle_{\sigma _{i}}$  and the digest of message $m$  by $D\left( m\right)$. We follow the common practice of signing a digest of a message and appending it to the plaintext of the message rather than signing the full message ($ \langle m\rangle_{\sigma _{i}}$   should be interpreted in this way). All replicas know the others’ public keysto verify signatures.</p><p>We allow for a very strong adversary that can coordinate faulty nodes, delay communication, or delay correct nodes in order to cause the most damage to the replicated service. We do assume that the adversary cannot delay correct nodes indefinitely. We also assume that the adversary (and the faulty nodes it controls) are computationally bound so that (with very high probability) it is unable to subvert the cryptographic techniques mentioned above. For example,the adversary cannot produce a valid signature of a non-faulty node, compute the information summarized by a digest from the digest, or find two messages with the same digest. The cryptographic techniques we use are thoughtto have these properties [33, 36, 32] </p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="3-Service-Properties" style="display: inline;"><a href="#3-Service-Properties" class="headerlink" title="3 Service Properties"></a>3 Service Properties</h1><p>Our algorithm can be used to implement any deterministic replicated service with a state and some operations. The operations are not restricted to simple reads or writes of portions of the service state; they can perform arbitrary deterministic computations using the state and operation arguments. Clientsissue requeststo the replicated service to invoke operations and block waiting for a reply. The replicated service is implemented by <code>n</code> replicas. Clients and replicas are non-faulty if they follow the algorithm in Section 4 and if no attacker can forge their signature.</p><p>The algorithm provides both safety and liveness assuming no more than $\dfrac {n-1}{3}$ replicas are faulty. Safety means that the replicated service satisfies linearizability [14]  (modified to account for Byzantine-faulty clients [4]): it behaves like a centralized implementation that executes operations atomically one at a time. Safety requires the bound on the number of faulty replicas because a faulty replica can behave arbitrarily, e.g.,it can destroy its state.</p><p>Safety is provided regardless of how many faulty clients are using the service (even if they collude with faulty replicas): all operations performed by faulty clients are observed in a consistent way by non-faulty clients. In particular, if the service operations are designed to preserve some invariants on the service state, faulty clients cannot break those invariants.</p><p>The safety property is insufficient to guard against faulty clients, e.g., in a file system a faulty client can write garbage data to some shared file. However, we limit the amount of damage a faulty client can do by providing access control: we authenticate clients and deny access if the client issuing a request does not have the right to invoke the operation. Also, services may provide operations to change the access permissions for a client. Since the algorithm ensures that the effects of accessrevocation operations are observed consistently by all clients,this provides a powerful mechanism to recover from attacks by faulty clients.</p><p>The algorithm does not rely on synchrony to provide safety. Therefore, it must rely on synchrony to provide liveness; otherwise it could be used to implement consensus in an asynchronous system, which is not possible [9]. We guarantee liveness, i.e., clients eventually receive replies to their requests, provided at most [$\dfrac {n-1}{3}$ ] replicas are faulty and delay <code>(t)</code> does not grow faster than <code>t</code> indefinitely. Here, delay <code>(t)</code> is the time between the moment <code>t</code> when a message is sent for the first time and the moment when it is received by its destination (assuming the sender keepsretransmitting the message until it is received). (A more precise definition can be found in [4].) This is a rather weak synchrony assumption that is likely to be true in any real system provided network faults are eventually repaired, yet it enables us to circumvent the impossibility result in [9].</p><p>The resiliency of our algorithmis optimal: $3f+1$  is the minimum number of replicas that allow an asynchronous system to provide the safety and liveness properties when up to $f$  replicas are faulty (see [2] for a proof). This many replicas are needed because it must be possible to proceed after communicating with $n-f$  replicas, since $f$ replicas might be faulty and not responding. However, it is possible that the $f$  replicas that did not respond are not faulty and, therefore,$f$  of those that responded might be faulty. Even so, there must still be enough responses thatthose from non-faulty replicas outnumber those from faulty ones, i.e., $n-2f>f$  . Therefore $n>3f$  .</p><p>The algorithm does not address the problem of faulttolerant privacy: a faulty replica may leak information to an attacker. Itis not feasible to offerfault-tolerant privacy in the general case because service operations may perform arbitrary computations using their arguments and the service state; replicas need this information in the clear to execute such operations efficiently. It is possible to use secret sharing schemes [35] to obtain privacy even in the presence of a threshold of malicious replicas [13] for the arguments and portions of the state that are opaque to the service operations. We plan to investigate these techniques in the future.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="4-The-Algorithm" style="display: inline;"><a href="#4-The-Algorithm" class="headerlink" title="4 The Algorithm"></a>4 The Algorithm</h1><p>Our algorithm is a form of state machine replication [17, 34]: the service is modeled as a state machine that is replicated across different nodes in a distributed system. Each state machine replica maintains the service state and implements the service operations. We denote the set of replicas by $R$ and identify each replica using an integer in $ \left\{ 0,\ldots ,\left| R\right| -1\right\}  $ . For simplicity, we assume $ \left| R\right| = 3f+1 $ where $f$ is the maximum number of replicas that may be faulty; although there could be more than $3f+1$ replicas,the additional replicas degrade performance (since more and bigger messages are being exchanged) without providing improved resiliency.</p><p>The replicas move through a succession of configurations called views. In a view one replica is the primary and the others are backups. Views are numbered consecutively. The primary of a view is replica $p$ such that $ p=v \ mod\left| R\right| $ , where $v$ is the view number. View changes are carried out when it appears that the primary hasfailed. Viewstamped Replication [26] andPaxos [18] used a similar approach to tolerate benign faults (as discussed in Section 8.)</p><p>The algorithm works roughly as follows:</p><ol><li>A client sends a request to invoke a service operation to the primary</li><li>The primary multicasts the request to the backups</li><li>Replicas execute the request and send a reply to the client</li><li>The client waits for $f+1$ replies from different replicas with the same result; this is the result of the operation.</li></ol><p>Like all state machine replication techniques [34], we impose two requirements on replicas: they must be deterministic (i.e., the execution of an operation in a given state and with a given set of arguments must always produce the same result) and they muststartin the same state. Given these two requirements, the algorithm ensures the safety property by guaranteeing that all nonfaulty replicas agree on a total order for the execution of requests despite failures.</p><p>The remainder of this section describes a simplified version of the algorithm. We omit discussion of how nodes recover from faults due to lack of space. We also omit details related to message retransmissions. Furthermore, we assume that message authentication is achieved using digital signatures rather than the more efficient scheme based on message authentication codes; Section 5 discusses this issue further. A detailed formalization of the algorithm using the I/O automaton model [21] is presented in [4].</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-1-The-Client" style="display: inline;"><a href="#4-1-The-Client" class="headerlink" title="4.1 The Client"></a>4.1 The Client</h2><p>A client $c$ requests the execution of state machine operation $o$ by sending a $ \langle REQUEST,o,t,c\rangle_{\sigma _{c}}$  message to the primary. Timestamp $t$ is used to ensure exactlyonce semantics for the execution of client requests. Timestamps for $c$’s requests are totally ordered such that later requests have higher timestamps than earlier ones; for example, the timestamp could be the value of the client’s local clock when the request is issued.</p><p>Each message sent by the replicasto the clientincludes the current view number, allowing the client to track the view and hence the current primary. A client sends a request to what it believes is the current primary using a point-to-point message. The primary atomically multicaststhe requestto allthe backups using the protocol described in the next section</p><p>A replica sends the reply to the request directly to the client. The reply has the form $ \langle REPLY,v,t,c,i,r\rangle_{\sigma _{i}}$  where $v$ is the current view number, is the timestamp of the corresponding request, $i$ is the replica number, and is the result of executing the requested operation.</p><p>The client waits for $f+1$ replies with valid signatures from different replicas, and with the same $t$ and $r$, before accepting the result $r$. This ensuresthatthe resultis valid, since at most $f$ replicas can be faulty</p><p>If the client does not receive replies soon enough, it broadcasts the request to all replicas. If the request has already been processed, the replicas simply re-send the reply; replicas remember the last reply message they sent to each client. Otherwise,if the replica is notthe primary, it relays the request to the primary. If the primary does not multicast the request to the group, it will eventually be suspected to be faulty by enough replicas to cause a view change.</p><p>In this paper we assume that the client waits for one request to complete before sending the next one. But we can allow a client to make asynchronous requests, yet preserve ordering constraints on them.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-2-Normal-Case-Operation" style="display: inline;"><a href="#4-2-Normal-Case-Operation" class="headerlink" title="4.2 Normal-Case Operation"></a>4.2 Normal-Case Operation</h2><p>The state of each replica includes the state of the service, a message log containing messages the replica has accepted, and an integer denoting the replica’s current view. We describe how to truncate the log in Section 4.3.</p><p>When the primary, $p$ , receives a client request, $m$, it starts a three-phase protocol to atomically multicast the request to the replicas. The primary starts the protocol immediately unless the number of messages for which the protocol is in progress exceeds a given maximum. In this case, it buffers the request. Buffered requests are multicast later as a group to cut down on message traffic and CPUoverheads under heavy load;this optimization is similar to a group commitin transactional systems [11]. For simplicity, we ignore this optimization in the description below.</p><p>The three phases are pre-prepare, prepare, and commit. The pre-prepare and prepare phases are used to totally order requests sent in the same view even when the primary, which proposes the ordering of requests, is faulty. The prepare and commit phases are used to ensure that requeststhat commit are totally ordered across views.</p><p>In the pre-prepare phase, the primary assigns a sequence number, $n$ , to the request, multicasts a preprepare message with $m$ piggybacked to all the backups, and appends the message to its log. The message has the form $ \langle\langle PRE-PREPARE,v,n,d\rangle_{\sigma _{p}},m \rangle $  , where $v$ indicates the view in which the message is being sent,$m$ is the client’s request message, and $d$ is $m$’s digest.</p><p>Requests are not included in pre-prepare messages to keep them small. This is important because preprepare messages are used as a proof that the request was assigned sequence number $n$ in view $v$ in view changes. Additionally, it decouples the protocol to totally order requests from the protocol to transmit the request to the replicas; allowing us to use a transport optimized for small messages for protocol messages and a transport optimized for large messages for large requests.</p><p>A backup accepts a pre-prepare message provided:</p><ul class="g-list-style-circle"><li>the signatures in the request and the pre-prepare message are correct and $d$ is the digest for $m$ ;</li><li>it is in view $v$ ;</li><li>it has not accepted a pre-prepare message for view $v$  and sequence number $n$  containing a different digest;</li><li>the sequence number in the pre-prepare message is between a low water mark, $h$  , and a high water mark, $H$ .</li></ul><p>The last condition prevents a faulty primary from exhausting the space of sequence numbers by selecting a very large one. We discuss how $H$ and $h$ advance in Section 4.3.</p><p>If backup $i$  accepts the $ \langle\langle PRE-PREPARE,v,n,d\rangle_{\sigma _{p}},m \rangle $  message, it enters the prepare phase by multicasting a $ \langle PREPARE,v,n,d,i\rangle_{\sigma _{i}}$  message to all other replicas and adds both messagesto itslog. Otherwise,it does nothing.</p><p>A replica (including the primary) accepts prepare messages and adds them to its log provided their signatures are correct, their view number equals the replica’s current view, and their sequence number is between $h$ and $H$.</p><p>We define the predicate $prepared \left(m,v,n,i \right)$ to be true if and only if replica $i$ has inserted in its log: the request $m$, a pre-prepare for $m$ in view $v$ with sequence number $n$, and $2f$ prepares from different backups that match the pre-prepare. The replicas verify whether the prepares match the pre-prepare by checking that they have the same view, sequence number, and digest.</p><p>The pre-prepare and prepare phases of the algorithm guarantee that non-faulty replicas agree on a total order for the requests within a view. More precisely, they ensure the following invariant: if $prepared \left(m,v,n,i \right)$ is true then $prepared \left(m',v,n,i \right)$ is false for any non-faulty replica j$ j \left( including \ i = j \right)$ and any $m'$ such that $D\left( m'\right) \neq D\left( m\right)$. This is true because $prepared \left(m,v,n,i \right)$ and $ \left| R\right| =3f+1 $ imply that at least $ f+1 $ non-faulty replicas have sent a pre-prepare or prepare for $ m $ in $ v $ view with sequence number $ n $. Thus, for $prepared \left(m',v,n,i \right)$ to be true at least one of these replicas needs to have sent two conflicting prepares (or pre-prepares if it is the primary for $v$), i.e., two prepares with the same view and sequence number and a different digest. But this is not possible because the replica is not faulty. Finally, our assumption aboutthe strength of message digests ensures that the probability that $ m \neq m' $ and $D\left( m'\right) \neq D\left( m\right)$ is negligible.</p><p>Replica multicasts a $ \langle COMMIT,v,n,D\left( m \right),i \rangle_{\sigma _{i}}$  to the other replicas when $prepared \left(m,v,n,i \right)$ becomes true. This starts the commit phase. Replicas accept commit messages and insert them in their log provided they are properly signed, the view number in the message is equal to the replica’s current view, and the sequence number is between $h$ and $H$</p><p>We define the committed and committed-local predicates as follows: $committed\left(m,v,n\right)$ is true if and only if $prepared\left(m,v,n,i\right)$ is true for all in some set of 1 non-faulty replicas; and<br>$committed-local\left(m,v,n,i\right)$ is true if and only if $prepared\left(m,v,n,i\right)$ is true and has accepted $2f+1$ commits (possibly including its own) from different replicas that match the pre-prepare for $m$; a commit matches a pre-prepare if they have the same view, sequence number, and digest.</p><p>The commit phase ensures the following invariant: if $committed-local\left(m,v,n,i\right)$ is true for some non-faulty $i$then $committed\left(m,v,n\right)$ is true. This invariant and the view-change protocol described inSection 4.4 ensure that non-faulty replicas agree on the sequence numbers of requests that commit locally even if they commit in different views at each replica. Furthermore, it ensures that any request that commits locally at a non-faulty replica will commit at $f+1$ or more non-faulty replicas eventually</p><p>Each replica $i$ executes the operation requested by $m$ after $committed-local\left(m,v,n,i\right)$ is true and $i$’s state reflects the sequential execution of all requests with lower sequence numbers. This ensures that all nonfaulty replicas execute requests in the same order as required to provide the safety property. After executing the requested operation, replicassend a reply to the client. Replicas discard requests whose timestamp is lower than the timestamp in the last reply they sent to the client to guarantee exactly-once semantics.</p><p>We do not rely on ordered message delivery, and therefore it is possible for a replica to commit requests out of order. This does not matter since it keeps the preprepare, prepare, and commit messages logged until the corresponding request can be executed. Figure 1 shows the operation of the algorithm in the normal case of no primary faults. Replica 0 isthe primary, replica 3 is faulty, and $C$ is the client.</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-120202.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-120202.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 1: Normal Case Operation</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-3-Garbage-Collection" style="display: inline;"><a href="#4-3-Garbage-Collection" class="headerlink" title="4.3 Garbage Collection"></a>4.3 Garbage Collection</h2><p>This section discusses the mechanism used to discard messages from the log. For the safety condition to hold, messagesmust be keptin a replica’slog untilit knowsthat the requests they concern have been executed by at least $f+1$ non-faulty replicas and it can prove this to others in view changes. In addition, if some replica misses messages that were discarded by all non-faulty replicas, it will need to be brought up to date by transferring all or a portion of the service state. Therefore, replicas also need some proof that the state is correct.</p><p>Generating these proofs after executing every operation would be expensive. Instead, they are generated periodically, when a request with a sequence number divisible by some constant (e.g., 100) is executed. We will refer to the states produced by the execution of these requests as checkpoints and we will say that a checkpoint with a proof is a stable checkpoint.</p><p>A replica maintainsseverallogical copies ofthe service state: the laststable checkpoint, zero or more checkpoints that are not stable, and a current state. Copy-on-write techniques can be used to reduce the space overhead to store the extra copies of the state, as discussed in Section 6.3.</p><p>The proof of correctness for a checkpoint is generated as follows. When a replica $i$ produces a checkpoint, it multicasts a message $ \langle CHECKPOINT,n,d,i\rangle_{\sigma _{i}}$  to the other replicas, where $n$ is the sequence number of the last request whose execution is reflected in the state and $d$ is the digest of the state. Each replica collects checkpoint messages in its log until it has $2f+1$ of them for sequence number $n$ with the same digest $d$ signed by different replicas (including possibly its own such message). These $2f+1$ messages are the proof of correctness for the checkpoint.</p><p>A checkpoint with a proof becomes stable and the replica discards all pre-prepare, prepare, and commit messages with sequence number less than or equal to $n$ from its log; it also discards all earlier checkpoints and checkpoint messages.</p><p>Computing the proofs is efficient because the digest can be computed using incremental cryptography [1] as discussed in Section 6.3, and proofs are generated rarely.</p><p>The checkpoint protocol is used to advance the low and high water marks (which limit what messages will be accepted). The low-water mark $h$  is equal to the sequence number of the last stable checkpoint. The high water mark $ H = h+k $ , where $k$  is big enough so that replicas do not stall waiting for a checkpoint to become stable. For example, if checkpoints are taken every 100 requests,$k$  might be 200.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-4-View-Changes" style="display: inline;"><a href="#4-4-View-Changes" class="headerlink" title="4.4 View Changes"></a>4.4 View Changes</h2><p>The view-change protocol provides liveness by allowing the system to make progress when the primary fails. View changes are triggered by timeouts that prevent backups from waiting indefinitely for requests to execute. A backup iswaitingfor a requestifitreceived a valid request and has not executed it. A backup starts a timer when it receives a request and the timer is not already running. It stops the timer when it is no longer waiting to execute the request, but restarts it if at that point it is waiting to execute some other request.</p><p>If the timer of backup $i$ expires in view $v$, the backup starts a view change to move the system to view $v+1$. It stops accepting messages (other than checkpoint, view-change, and new-view messages) and multicasts a $ \langle VIEW-CHANGE,v+1,n,C,P,i\rangle_{\sigma _{i}}$   message to all replicas. Here $n$ is the sequence number of the last stable checkpoint $s$ known to $i$,$C$ is a set of $2f+1$ valid checkpoint messages proving the correctness of $s$, and $P$ is a set containing a set $P_{m}$ for each request $m$  that prepared at $i$  with a sequence number higher than $n$ . Each set $P_{m}$  contains a valid pre-prepare message (withoutthe corresponding client message) and $2f$  matching, valid prepare messages signed by different backups with the same view, sequence number, and the digest of $m$ .</p><p>When the primary $p$ of view $v+1$ receives $2f$ valid view-change messagesfor view $v+1$ from other replicas, it multicasts a $ \langle NEW-VIEW,v+1,V,O\rangle_{\sigma _{p}}$  message to all other replicas, where is a set containing the valid viewchange messages received by the primary plus the viewchange message for $v+1$ the primary sent (or would have sent), and $O$ is a set of pre-prepare messages (withoutthe piggybacked request).$O$ is computed as follows:</p><ol><li>The primary determines the sequence number $min-s$ of the latest stable checkpoint in $V$ and the highest sequence number $max-s$ in a prepare message in $V$.</li><li>The primary creates a new pre-prepare message for view $v+1$ for each sequence number $n$ between $min-s$ and $max-s$. There are two cases: (1) there is at least one set in the $P$ component of some view-change message in $V$ with sequence number $n$, or (2) there is no such set. In the first case, the primary creates a new message $ \langle PRE-PREPARE,v+1,n,d\rangle_{\sigma _{p}}$  , where $d$ is the request digest in the pre-prepare message for sequence number $n$ with the highest view number in $V$. In the second case, it creates a new preprepare message $ \langle PRE-PREPARE,v+1,n,d^{null}\rangle_{\sigma _{p}}$  , where $d^{null}$ is the digest of a special null request; a null request goes through the protocol like other requests, but its execution is a no-op. (Paxos [18] used a similar technique to fill in gaps.)</li></ol><p>Next the primary appends the messages in to $O$ its log. If $min-s$ is greater than the sequence number of its lateststable checkpoint,the primary also insertsthe proof of stability for the checkpoint with sequence number $min-s$ in its log, and discards information from the log as discussed in Section 4.3. Then it $enter$ view $v+1$: at this point it is able to accept messages for view $v+1$.</p><p>A backup accepts a new-view message for view $v+1$ if it is signed properly, if the view-change messages it contains are valid for view $v+1$, and if the set $O$ is correct; it verifies the correctness of $O$ by performing a computation similar to the one used by the primary to create $O$. Then it adds the new information to its log as described for the primary, multicasts a prepare for each message in $O$ to allthe other replicas, addsthese prepares to its log, and enters view $v+1$.</p><p>Thereafter, the protocol proceeds as described in Section 4.2. Replicas redo the protocol for messages between $min-s$ and $max-s$ but they avoid re-executing client requests (by using their stored information about the last reply sent to each client).</p><p>A replica may be missing some request message $m$  or a stable checkpoint (since these are not sent in newview messages.) It can obtain missing information from another replica. For example, replica $i$  can obtain a missing checkpoint state $s$  from one of the replicas whose checkpoint messages certified its correctness in $V$ . Since $f+1$  of those replicas are correct, replica will always obtain $s$  or a later certified stable checkpoint. We can avoid sending the entire checkpoint by partitioning the state and stamping each partition with the sequence number of the last request that modified it. To bring a replica up to date, it is only necessary to send it the partitions where it is out of date, rather than the whole checkpoint.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-5-Correctness" style="display: inline;"><a href="#4-5-Correctness" class="headerlink" title="4.5 Correctness"></a>4.5 Correctness</h2><p>This section sketches the proof that the algorithm provides safety and liveness; details can be found in [4].</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="4-5-1-Safety" style="display: inline;"><a href="#4-5-1-Safety" class="headerlink" title="4.5.1 Safety"></a>4.5.1 Safety</h3><p>As discussed earlier, the algorithm provides safety if all non-faulty replicas agree on the sequence numbers of requests that commit locally.</p><p>In Section 4.2, we showed that if $prepared \left(m,v,n,i \right)$ is true, $prepared \left(m',v,n,i \right)$ is false for any non-faulty replica  j$ j \left( including \ i = j \right)$ and $m'$ any such that $D\left(m'\right) \neq D \left(m\right) $. This implies that two non-faulty replicas agree on the sequence number of requests that commit locally in the same view at the two replicas.</p><p>The view-change protocol ensures that non-faulty replicas also agree on the sequence number of requests that commitlocally in different views at differentreplicas. A request $m$ commits locally at a non-faulty replica with sequence number $n$ in view $v$ only if $committed\left(m,v,n\right)$ istrue. This meansthatthere is a set $R_{1}$ containing atleast $f+1$ non-faulty replicas such that $prepared \left(m,v,n,i \right)$ is true for every replica $i$ in the set.</p><p>Non-faulty replicas will not accept a pre-prepare for view $v' > v$ without having received a new-viewmessage for $v'$  (since only atthat point do they enter the view). But any correct new-view message for view $v' > v$  contains correct view-change messages from every replica $i$  in a set $R_{2}$  of $2f+1$  replicas. Since there are $3f+1$ replicas, $R_{1}$ and $R_{2}$ must intersect in at least one replica $k$ that is not faulty. $k$’s view-change message will ensure that the fact that $m$ prepared in a previous view is propagated to subsequent views, unless the new-view message contains a view-change message with a stable checkpoint with a sequence number higher than $n$ . In the first case, the algorithm redoes the three phases of the atomic multicast protocol for $m$  with the same sequence number $n$  and the new view number. This is important because it prevents any different request that was assigned the sequence number $n$  in a previous view from ever committing. In the second case no replica in the new view will accept any message with sequence number lower than $n$. In either case, the replicas will agree on the request that commits locally with sequence number $n$ .</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="4-5-2-Liveness" style="display: inline;"><a href="#4-5-2-Liveness" class="headerlink" title="4.5.2 Liveness"></a>4.5.2 Liveness</h3><p>To provide liveness, replicas must move to a new view if they are unable to execute a request. But it is important to maximize the period of time when at least $2f+1$ non-faulty replicas are in the same view, and to ensure thatthis period of time increases exponentially untilsome requested operation executes. We achieve these goals by three means.</p><p>First,to avoid starting a view change too soon, a replica that multicasts a view-change message for view $v+1$ waits for $2f+1$ view-change messages for view $v+1$ and then starts its timer to expire after some time $T$. If the timer expires before it receives a valid new-view message for $v+1$ or before it executes a request in the new view that it had not executed previously,it starts the view change for view $v+2$ but this time it will wait $2T$ before starting a view change for view $v+3$.</p><p>Second, if a replica receives a set of $f+1$ valid viewchange messages from other replicas for views greater than its current view, it sends a view-change message for the smallest view in the set, even if its timer has not expired; this prevents it from starting the next view change too late</p><p>Third, faulty replicas are unable to impede progress by forcing frequent view changes. A faulty replica cannot cause a view change by sending a view-change message, because a view change will happen only if at least $f+1$ replicas send view-change messages, but it can cause a view change when it is the primary (by not sending messages or sending bad messages). However, because the primary of view $v$ is the replica $p$ such that $ p=v \ mod\left| R\right| $  , the primary cannot be faulty for more than $f$ consecutive views.</p><p>These three techniques guarantee liveness unless message delays grow faster than the timeout period indefinitely, which is unlikely in a real system.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-6-Non-Determinism" style="display: inline;"><a href="#4-6-Non-Determinism" class="headerlink" title="4.6 Non-Determinism"></a>4.6 Non-Determinism</h2><p>State machine replicas must be deterministic but many services involve some form of non-determinism. For example, the time-last-modified in NFS is set by reading the server’s local clock; if this were done independently at each replica, the states of non-faulty replicas would diverge. Therefore, some mechanism to ensure that all replicas select the same value is needed. In general, the client cannot select the value because it does not have enough information; for example, it does not know how its request will be ordered relative to concurrent requests by other clients. Instead, the primary needs to select the value either independently or based on values provided by the backups.</p><p>If the primary selectsthe non-deterministic value independently, it concatenates the value with the associated request and executes the three phase protocol to ensure that non-faulty replicas agree on a sequence number for the request and value. This prevents a faulty primary from causing replica state to diverge by sending different valuesto differentreplicas. However, a faulty primary might send the same, incorrect, value to all replicas. Therefore, replicas must be able to decide deterministically whether the value is correct (and whatto do if it is not) based only on the service state.</p><p>This protocol is adequate for most services (including NFS) but occasionally replicas must participate in selecting the value to satisfy a service’s specification. This can be accomplished by adding an extra phase to the protocol: the primary obtains authenticated values proposed by the backups, concatenates $2f+1$ of them with the associated request, and starts the three phase protocol for the concatenated message. Replicas choose the value by a deterministic computation on the $2f+1$ values and their state, e.g., taking the median. The extra phase can be optimized away in the common case. For example, if replicas need a value that is “close enough” to that of their local clock, the extra phase can be avoided when their clocks are synchronized within some delta.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="5-Optimizations" style="display: inline;"><a href="#5-Optimizations" class="headerlink" title="5 Optimizations"></a>5 Optimizations</h1><p>This section describes some optimizations that improve the performance of the algorithm during normal-case operation. All the optimizations preserve the liveness and safety properties.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-1-Reducing-Communication" style="display: inline;"><a href="#5-1-Reducing-Communication" class="headerlink" title="5.1 Reducing Communication"></a>5.1 Reducing Communication</h2><p>We use three optimizations to reduce the cost of communication. The first avoids sending most large replies. A client request designates a replica to send the result; all other replicas send replies containing just the digest of the result. The digests allow the client to check the correctness ofthe result while reducing network bandwidth consumption and CPU overhead significantly for large replies. If the client does not receive a correct result from the designated replica, it retransmits the request as usual, requesting all replicas to send full replies.</p><p>The second optimization reduces the number of message delays for an operation invocation from 5 to 4. Replicas execute a request tentatively as soon as the prepared predicate holds for the request, their state reflects the execution of all requests with lower sequence number, and these requests are all known to have committed. After executing the request,the replicas send tentative replies to the client. The client waits for $2f+1$ matching tentative replies. If it receives this many, the request is guaranteed to commit eventually. Otherwise, the client retransmits the request and waits for $f+1$ non-tentative replies.</p><p>A request that has executed tentatively may abort if there is a view change and it is replaced by a null request. In this case the replica reverts its state to the last stable checkpoint in the new-view message or to its last checkpointed state (depending on which one has the higher sequence number).</p><p>The third optimization improves the performance of read-only operations that do not modify the service state. A client multicasts a read-only request to all replicas. Replicas execute the request immediately in their tentative state after checking that the request is properly authenticated, that the client has access, and that the request is in fact read-only. They send the reply only after all requests reflected in the tentative state have committed; this is necessary to prevent the client from observing uncommitted state. The client waits for $2f+1$ replies from different replicas with the same result. The client may be unable to collect $2f+1$ such repliesif there are concurrent writes to data that affect the result; in this case, it retransmits the request as a regular read-write request after its retransmission timer expires.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-2-Cryptography" style="display: inline;"><a href="#5-2-Cryptography" class="headerlink" title="5.2 Cryptography"></a>5.2 Cryptography</h2><p>In Section 4, we described an algorithm that uses digital signatures to authenticate all messages. However, we actually use digital signatures only for viewchange and new-view messages, which are sent rarely, and authenticate all other messages using message authentication codes (MACs). This eliminates the main performance bottleneck in previous systems [29, 22].</p><p>However, MACs have a fundamental limitation relative to digital signatures — the inability to prove that a message is authentic to a third party. The algorithm in Section 4 and previous Byzantine-fault-tolerant algorithms [31, 16] for state machine replication rely on the extra power of digital signatures. We modified our algorithm to circumvent the problem by taking advantage of specific invariants, e.g, the invariantthat no two different requests prepare with the same view and sequence number at two non-faulty replicas. The modified algorithm is described in [5]. Here we sketch the main implications of using MACs.</p><p>MACs can be computed three orders of magnitude faster than digital signatures. For example, a 200MHz Pentium Pro takes 43ms to generate a 1024-bit modulus RSA signature of an MD5 digest and 0.6ms to verify the signature [37], whereas it takes only 10.3 s to compute the MAC of a 64-byte message on the same hardware in our implementation. There are other publickey cryptosystems that generate signatures faster, e.g., elliptic curve public-key cryptosystems, but signature verification is slower [37] and in our algorithm each signature is verified many times.</p><p>Each node (including active clients) shares a 16-byte secret session key with each replica. We compute message authentication codes by applying MD5 to the concatenation of the message with the secret key. Rather than using the 16 bytes of the final MD5 digest, we use only the 10 least significant bytes. This truncation has the obvious advantage of reducing the size of MACs and it also improves their resilience to certain attacks [27]. This is a variant of the secret suffix method [36], which is secure as long as MD5 is collision resistant [27, 8].</p><p>The digitalsignature in a reply message isreplaced by a single MAC, which is sufficient because these messages have a single intended recipient. The signatures in all other messages (including client requests but excluding view changes) are replaced by vectors of MACs that we call authenticators. An authenticator has an entry for every replica other than the sender; each entry is the MAC computed with the key shared by the sender and the replica corresponding to the entry.</p><p>The time to verify an authenticator is constant but the time to generate one grows linearly with the number of replicas. This is not a problem because we do not expect to have a large number of replicas and there is a huge performance gap between MAC and digital signature computation. Furthermore, we compute authenticators efficiently; MD5 is applied to the message once and the resulting context is used to compute each vector entry by applying MD5 to the corresponding session key. For example, in a system with 37 replicas (i.e., a system that can tolerate 12 simultaneous faults) an authenticator can still be computed much more than two orders of magnitude faster than a 1024-bit modulus RSA signature.</p><p>The size of authenticators grows linearly with the number of replicas but it grows slowly: it is equal to $ 30\times \lfloor \dfrac {n-1}{3}\rfloor $bytes. An authenticator is smaller than an RSA signature with a 1024-bit modulus for $n\leq 13$ (i.e., systems that can tolerate up to 4 simultaneous faults), which we expect to be true in most configurations.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="6-Implementation" style="display: inline;"><a href="#6-Implementation" class="headerlink" title="6 Implementation"></a>6 Implementation</h1><p>This section describes our implementation. First we discuss the replication library, which can be used as a basis for any replicated service. In Section 6.2 we describe how we implemented a replicated NFS on top of the replication library. Then we describe how we maintain checkpoints and compute checkpoint digests efficiently. </p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-1-The-Replication-Library" style="display: inline;"><a href="#6-1-The-Replication-Library" class="headerlink" title="6.1 The Replication Library"></a>6.1 The Replication Library</h2><p>The client interface to the replication library consists of a single procedure, <em>invoke</em>, with one argument, an input buffer containing a request to invoke a state machine operation. The <em>invoke</em> procedure uses our protocol to execute the requested operation at the replicas and select the correct reply from among the replies of the individual replicas. It returns a pointer to a buffer containing the operation result.</p><p>On the server side, the replication code makes a number of upcalls to procedures that the server part of the application must implement. There are procedures to execute requests (execute), to maintain checkpoints of the service state (<em>make checkpoint</em>, <em>delete checkpoint</em>),to obtain the digest of a specified checkpoint (<em>get digest</em>), and to obtain missing information (<em>get checkpoint</em>, <em>set checkpoint</em>). The execute procedure receives as input a buffer containing the requested operation, executes the operation, and places the result in an output buffer. The other procedures are discussed further in Sections 6.3 and 6.4.</p><p>Point-to-point communication between nodesisimplemented using UDP, and multicastto the group of replicas is implemented using UDP over IP multicast [7]. There is a single IP multicast group for each service, which contains allthe replicas. These communication protocols are unreliable;they may duplicate or lose messages or deliver them out of order.</p><p>The algorithm tolerates out-of-order delivery and rejects duplicates. View changes can be used to recover from lost messages, but this is expensive and therefore it is important to perform retransmissions. During normal operation recovery from lost messages is driven by the receiver: backups send negative acknowledgments to the primary when they are out of date and the primary retransmits pre-prepare messages after a long timeout. A reply to a negative acknowledgment may include both a portion of a stable checkpoint and missing messages. During view changes, replicas retransmit view-changemessages untilthey receive a matching newview message or they move on to a later view.</p><p>The replication library does not implement view changes or retransmissions at present. This does not compromise the accuracy of the results given in Section 7 because the rest of the algorithm is completely implemented (including the manipulation of the timers that trigger view changes) and because we have formalized the complete algorithm and proved its correctness [4].</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-2-BFS-A-Byzantine-Fault-tolerant-File-System" style="display: inline;"><a href="#6-2-BFS-A-Byzantine-Fault-tolerant-File-System" class="headerlink" title="6.2 BFS: A Byzantine-Fault-tolerant File System"></a>6.2 BFS: A Byzantine-Fault-tolerant File System</h2><p>We implemented BFS, a Byzantine-fault-tolerant NFS service, using the replication library. Figure 2 shows the architecture of BFS. We opted not to modify the kernel NFSclient and server because we did not have the sources for the Digital Unix kernel. A file systemexported by the fault-tolerant NFSservice is mounted on the client machine like any regular NFS file system. Application processes run unmodified and interact with the mounted file system through the NFS client in the kernel. We rely on user level relay processes to mediate communication between the standard NFS client and the replicas. A relay receives NFS protocol requests, calls the invoke procedure of our replication library, and sends the result back to the NFS client.</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-135613.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-135613.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 2: Replicated File System Architecture.</figcaption></figure></p><p>Each replica runs a user-level process with the replication library and our NFS V2 daemon, which we will refer to as snfsd (for simple nfsd). The replication library receives requests from the relay, interacts with snfsd by making upcalls, and packages NFS replies into replication protocol replies that it sends to the relay.</p><p>We implemented snfsd using a fixed-size memorymapped file. All the file system data structures, e.g., inodes, blocks and their free lists, are in the mapped file. We rely on the operating system to manage the cache of memory-mapped file pages and to write modified pages to disk asynchronously. The current implementation uses 8KB blocks and inodes contain the NFS status information plus 256 bytes of data, which is used to store directory entries in directories, pointers to blocks in files, and text in symbolic links. Directories and files may also use indirect blocks in a way similar to Unix.</p><p>Our implementation ensures that all state machine replicasstartin the same initialstate and are deterministic, which are necessary conditions for the correctness of a service implemented using our protocol. The primary proposes the values for time-last-modified and timelast-accessed, and replicas select the larger of the proposed value and one greater than the maximum of all values selected for earlier requests. We do not require synchronous writes to implement NFS V2 protocol semantics because BFS achieves stability of modified data and meta-data through replication [20].</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-3-Maintaining-Checkpoints" style="display: inline;"><a href="#6-3-Maintaining-Checkpoints" class="headerlink" title="6.3 Maintaining Checkpoints"></a>6.3 Maintaining Checkpoints</h2><p>This section describes how <em>snfsd</em> maintains checkpoints of thefile system state. Recallthat each replica maintains severallogical copies of the state: the current state, some number of checkpointsthat are not yetstable, and the last stable checkpoint.</p><p><em>snfsd</em> executes file system operations directly in the memory mappedfile to preserve locality,and it uses copyon-write to reduce the space and time overhead associated with maintaining checkpoints. snfsd maintains a copyon-write bit for every 512-byte block in the memory mapped file. When the replication code invokes the <em>make checkpoint</em> upcall, <em>snfsd</em> sets all the copy-on-write bits and creates a (volatile) checkpoint record, containing the current sequence number, which it receives as an argument to the upcall, and a list of blocks. This list contains the copies of the blocks that were modified since the checkpoint was taken, and therefore, it is initially empty. The record also contains the digest of the current state; we discuss how the digest is computed in Section 6.4.</p><p>When a block of the memory mapped file is modified while executing a client request, snfsd checks the copyon-write bit for the block and,if itisset,storesthe block’s current contents and itsidentifier in the checkpoint record for the last checkpoint. Then, it overwrites the block with its new value and resets its copy-on-write bit. snfsd retains a checkpoint record until told to discard it via a delete checkpoint upcall, which is made by the replication code when a later checkpoint becomes stable. If the replication code requires a checkpoint to send to another replica, it calls the get checkpoint upcall. To obtain the value for a block, snfsd first searches for the block in the checkpoint record of the stable checkpoint, and then searches the checkpoint records of any later checkpoints. If the block is not in any checkpoint record, it returns the value from the current state.</p><p>The use of the copy-on-write technique and the fact that we keep at most 2 checkpoints ensure that the space and time overheads of keeping several logical copies of the state are low. For example, in the Andrew benchmark experiments described in Section 7, the average checkpoint record size is only 182 blocks with a maximum of 500.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-4-Computing-Checkpoint-Digests" style="display: inline;"><a href="#6-4-Computing-Checkpoint-Digests" class="headerlink" title="6.4 Computing Checkpoint Digests"></a>6.4 Computing Checkpoint Digests</h2><p><em>snfsd</em> computes a digest of a checkpoint state as part of a make checkpoint upcall. Although checkpoints are only taken occasionally, it is important to compute the state digest incrementally because the state may be large. snfsd uses an incremental collision-resistant oneway hash function called AdHash [1]. This function divides the state into fixed-size blocks and uses some other hash function (e.g., MD5) to compute the digest of the string obtained by concatenating the block index with the block value for each block. The digest of the state is the sum of the digests of the blocks modulo some large integer. In our current implementation, we use the 512-byte blocks from the copy-on-write technique and compute their digest using MD5.</p><p>To compute the digest for the state incrementally,snfsd maintains a table with a hash value for each 512-byte block. This hash value is obtained by applying MD5 to the block index concatenated with the block value at the time of the last checkpoint. When make checkpoint is called, snfsd obtains the digest $d$ for the previous checkpointstate (from the associated checkpoint record). It computes new hash values for each block whose copyon-write bit is reset by applying MD5 to the block index concatenated with the current block value. Then, it adds the new hash value to $d$, subtracts the old hash value from $d$, and updates the table to contain the new hash value. This process is efficient provided the number of modified blocksissmall; as mentioned above, on average 182 blocks are modified per checkpoint for the Andrew benchmark.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="7-Performance-Evaluation" style="display: inline;"><a href="#7-Performance-Evaluation" class="headerlink" title="7 Performance Evaluation"></a>7 Performance Evaluation</h1><p>This section evaluates the performance of our system using two benchmarks: a micro-benchmark and the Andrew benchmark [15]. The micro-benchmark provides a service-independent evaluation of the performance of the replication library; it measures the latency to invoke a null operation, i.e., an operation that does nothing.</p><p>The Andrew benchmark is used to compare BFS with two otherfile systems: one isthe NFS V2 implementation in Digital Unix, and the other is identical to BFS except without replication. The first comparison demonstrates that our system is practical by showing that its latency is similar to the latency of a commercial system that is used daily by many users. The second comparison allows usto evaluate the overhead of our algorithm accurately within an implementation of a real service.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="7-1-Experimental-Setup" style="display: inline;"><a href="#7-1-Experimental-Setup" class="headerlink" title="7.1 Experimental Setup"></a>7.1 Experimental Setup</h2><p>The experiments measure normal-case behavior (i.e., there are no view changes), because this is the behavior that determines the performance of the system. All experiments ran with one client running two relay processes, and four replicas. Four replicas can tolerate one Byzantine fault; we expect this reliability level to suffice for most applications. The replicas and the clientran on identical DEC3000/400 Alpha workstations. These workstations have a 133 MHz Alpha 21064 processor, 128 MB of memory, and run Digital Unix version 4.0. The file system was stored by each replica on a DEC RZ26 disk. All the workstations were connected by a 10Mbit/sswitched Ethernet and had DEC LANCE Ethernet interfaces. The switch was a DEC EtherWORKS 8T/TX. The experiments were run on an isolated network.</p><p>The interval between checkpoints was 128 requests, which causes garbage collection to occur severaltimes in any of the experiments. The maximum sequence number accepted by replicas in pre-prepare messages was 256 plus the sequence number of the last stable checkpoint.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="7-2-Micro-Benchmark" style="display: inline;"><a href="#7-2-Micro-Benchmark" class="headerlink" title="7.2 Micro-Benchmark"></a>7.2 Micro-Benchmark</h2><p>The micro-benchmark measures the latency to invoke a null operation. It evaluates the performance of two implementations of a simple service with no state that implements null operations with arguments and results of different sizes. The first implementation is replicated using our library and the second is unreplicated and uses UDP directly. Table 1 reports the response times measured at the client for both read-only and readwrite operations. They were obtained by timing 10,000 operation invocationsin three separate runs and we report the median value of the three runs. The maximum deviation from the median was always below 0.3% of the reported value. We denote each operation by a/b, where a and b are the sizes of the operation argument and result in KBytes.<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140217.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140217.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Table 1: Micro-benchmark results (in milliseconds); the percentage overhead is relative to the unreplicated case.</figcaption></figure><br>The overhead introduced by the replication library is due to extra computation and communication. For example, the computation overhead for the read-write 0/0 operation is approximately 1.06ms, which includes 0.55ms spent executing cryptographic operations. The remaining 1.47ms of overhead are due to extra communication; the replication library introduces an extra message roundtrip, it sends larger messages, and itincreases the number of messages received by each node relative to the service without replication.</p><p>The overhead for read-only operations is significantly lower because the optimization discussed in Section 5.1 reduces both computation and communication overheads. For example,the computation overhead for the read-only 0/0 operation is approximately 0.43ms, which includes 0.23ms spent executing cryptographic operations, and the communication overhead is only 0.37ms because the protocol to execute read-only operations uses a single round-trip.</p><p>Table 1 shows that the relative overhead is lower for the 4/0 and 0/4 operations. This is because a significant fraction of the overhead introduced by the replication library is independent of the size of operation arguments and results. For example, in the read-write 0/4 operation, the large message (the reply) goes over the network only once (as discussed in Section 5.1) and only the cryptographic overhead to process the reply message is increased. The overhead is higher for the read-write 4/0 operation because the large message (the request) goes over the network twice and increases the cryptographic overhead for processing both request and pre-prepare messages.</p><p>It is important to note that this micro-benchmark represents the worst case overhead for our algorithm because the operations perform no work and the unreplicated server provides very weak guarantees. Most services will require stronger guarantees, e.g., authenticated connections, and the overhead introduced by our algorithmrelative to a serverthatimplementsthese guarantees will be lower. For example, the overhead of the replication library relative to a version of the unreplicated service that uses MACs for authentication is only 243% for the read-write 0/0 operation and 4% for the read-only 4/0 operation.</p><p>We can estimate a rough lower bound on the performance gain afforded by our algorithm relative to Rampart [30]. Reiter reports that Rampart has a latency of 45ms for a multi-RPC of a null message in a 10 Mbit/s Ethernet network of 4 SparcStation 10s [30]. The multiRPCissufficientforthe primary to invoke a state machine operation but for an arbitrary clientto invoke an operation it would be necessary to add an extra message delay and an extra RSA signature and verification to authenticate the client; this would lead to a latency of at least 65ms (using the RSA timings reported in [29].) Even if we divide this latency by 1.7, the ratio of the SPECint92 ratings of the DEC 3000/400 and theSparcStation 10, our algorithm stillreducesthe latency to invoke the read-write and read-only 0/0 operations by factors of more than 10 and 20, respectively. Note thatthisscaling is conservative because the network accounts for a significant fraction of Rampart’s latency [29] and Rampart’s results were obtained using 300-bit modulus RSA signatures, which are not considered secure today unless the keys used to generate them are refreshed very frequently.</p><p>There are no published performance numbers for SecureRing [16] but it would be slower than Rampart because its algorithm has more message delays and signature operations in the critical path.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="7-3-Andrew-Benchmark" style="display: inline;"><a href="#7-3-Andrew-Benchmark" class="headerlink" title="7.3 Andrew Benchmark"></a>7.3 Andrew Benchmark</h2><p>The Andrew benchmark [15] emulates a software development workload. It has five phases: (1) creates subdirectories recursively; (2) copies a source tree; (3) examines the status of all the files in the tree without examining their data; (4) examines every byte of data in all the files; and (5) compiles and links the files.</p><p>We use the Andrew benchmark to compare BFS with two other file system configurations: NFS-std, which is the NFS V2 implementation in Digital Unix, and BFS-nr, which is identicalto BFSbut with no replication. BFS-nr ran two simple UDPrelays on the client, and on the server it ran a thin veneer linked with a version of snfsd from which allthe checkpoint management code wasremoved. This configuration does not write modified file system state to disk before replying to the client. Therefore, it does notimplement NFS V2 protocolsemantics, whereas both BFS and NFS-std do.</p><p>Out of the 18 operations in the NFS V2 protocol only getattr is read-only because the time-last-accessed attribute of files and directories is set by operations that would otherwise be read-only, e.g., read and lookup. The result is that our optimization for readonly operations can rarely be used. To show the impact of this optimization, we also ran the Andrew benchmark on a second version of BFS that modifies the lookup operation to be read-only. This modification violates strict Unix file system semantics but is unlikely to have adverse effects in practice.</p><p>For all configurations, the actual benchmark code ran at the client workstation using the standard NFS client implementation in the Digital Unix kernel with the same mount options. The most relevant of these options for the benchmark are: UDP transport, 4096-byte read and write buffers, allowing asynchronous client writes, and allowing attribute caching.</p><p>We report the mean of 10 runs of the benchmark for each configuration. The sample standard deviation for the total time to run the benchmark was always below 2.6% of the reported value but it was as high as 14% for the individual times of the first four phases. This high variance was also present in the NFS-std configuration. The estimated error for the reported mean was below 4.5% for the individual phases and 0.8% for the total.</p><p>Table 2 shows the results for BFS and BFS-nr. The comparison between BFS-strict and BFS-nr shows that the overhead of Byzantine fault tolerance for this service is low — BFS-strict takes only 26% more time to run<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140604.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140604.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Table 2: Andrew benchmark: BFS vs BFS-nr. The times are in seconds.</figcaption></figure></p><p>the complete benchmark. The overhead is lower than what was observed for the micro-benchmarks because the clientspends a significant fraction of the elapsed time computing between operations, i.e., between receiving the reply to an operation and issuing the next request, and operations at the server perform some computation. But the overhead is not uniform across the benchmark phases. The main reason for this is a variation in the amount of time the client spends computing between operations; the first two phases have a higher relative overhead because the client spends approximately 40% of the total time computing between operations, whereas itspends approximately 70% during the lastthree phases.</p><p>The table shows that applying the read-only optimization to lookup improves the performance of BFS significantly and reduces the overhead relative to BFS-nr to 20%. This optimization has a significant impact in the first four phases because the time spent waiting for lookup operations to complete in BFS-strict is at least 20% of the elapsed time for these phases, whereas it is less than 5% of the elapsed time for the last phase<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140716.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Practical Byzantine Fault Tolerance/WX20180803-140716.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Table 3: Andrew benchmark: BFS vs NFS-std. Thetimes are in seconds.</figcaption></figure></p><p>Table 3 shows the results for BFS vs NFS-std. These results show that BFS can be used in practice — BFSstrict takes only 3% more time to run the complete benchmark. Thus, one could replace the NFS V2 implementation in Digital Unix, which is used daily by many users, by BFS without affecting the latency perceived by those users. Furthermore, BFS with the read-only optimization for the lookup operation is actually 2% faster than NFS-std.</p><p>The overhead of BFS relative to NFS-std is not the same for all phases. Both versions of BFS are faster than NFS-std for phases 1, 2, and 5 but slower for the other phases. This is because during phases 1, 2, and 5 a large fraction (between 21% and 40%) of the operations issued by the client are synchronous, i.e., operations that require the NFS implementation to ensure stability of modified file system state before replying to the client. NFS-std achieves stability by writing modified state to disk whereas BFS achieves stability with lower latency using replication (as in Harp [20]). NFS-std is faster than BFS (and BFS-nr) in phases 3 and 4 because the client issues no synchronous operations during these phases.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="8-Related-Work" style="display: inline;"><a href="#8-Related-Work" class="headerlink" title="8 Related Work"></a>8 Related Work</h1><p>Most previous work on replication techniques ignored Byzantine faults or assumed a synchronous system model (e.g., [17, 26, 18, 34, 6, 10]). Viewstamped replication [26] and Paxos [18] use views with a primary and backups to tolerate benign faults in an asynchronous system. ToleratingByzantine faultsrequires a muchmore complex protocol with cryptographic authentication, an extra pre-prepare phase, and a different technique to trigger view changes and select primaries. Furthermore, oursystemuses view changes only to select a newprimary but never to select a different set of replicas to form the new view as in [26, 18].</p><p>Some agreement and consensus algorithms tolerate Byzantine faultsin asynchronoussystems(e.g,[2, 3, 24]). However, they do not provide a complete solution for state machine replication, and furthermore, most of them were designed to demonstrate theoretical feasibility and are too slow to be used in practice. Our algorithm during normal-case operation is similar to the Byzantine agreement algorithm in [2] but that algorithm is unable to survive primary failures.</p><p>The two systems that are most closely related to our work are Rampart [29, 30, 31, 22] and SecureRing [16]. They implement state machine replication but are more than an order of magnitude slower than our system and, most importantly, they rely on synchrony assumptions. Both Rampart and SecureRing must exclude faulty replicasfrom the group to make progress(e.g., to remove a faulty primary and elect a new one), and to perform garbage collection. They rely on failure detectors to determine which replicas are faulty. However, failure detectors cannot be accurate in an asynchronous system [21], i.e.,they may misclassify a replica as faulty. Since correctness requires that fewer than 1 3 of group members be faulty, a misclassification can compromise correctness by removing a non-faulty replica from the group. This opens an avenue of attack: an attacker gains control over a single replica but does not change its behavior in any detectable way; then it slows correct replicas orthe communication between themuntil enough are excluded from the group.</p><p>To reduce the probability of misclassification, failure detectors can be calibrated to delay classifying a replica as faulty. However, for the probability to be negligible the delay must be very large, which is undesirable. For example,if the primary has actually failed,the group will be unable to process client requests until the delay has expired. Our algorithm is not vulnerable to this problem because it never needsto exclude replicasfrom the group.</p><p>Phalanx [23, 25] applies quorum replication techniques [12] to achieve Byzantine fault-tolerance in asynchronous systems. This work does not provide generic state machine replication; instead, it offers a data repository with operationsto read and write individual variables and to acquire locks. The semantics it provides for read and write operations are weaker than those offered by our algorithm; we can implement arbitrary operationsthat access any number of variables,whereasinPhalanx it would be necessary to acquire and release locks to execute such operations. There are no published performance numbers for Phalanx but we believe our algorithm is faster because it has fewer message delays in the critical path and because of our use of MACs rather than public key cryptography. The approach in Phalanx offers the potential for improved scalability; each operation is processed by only a subset of replicas. But this approach to scalability is expensive: it requires n >4f+1 to tolerate $f$ faults; each replica needs a copy of the state; and the load on each replica decreases slowly with $n$ (it is $O\left( 1/\sqrt {n}\right)$ ).</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="9-Conclusions" style="display: inline;"><a href="#9-Conclusions" class="headerlink" title="9 Conclusions"></a>9 Conclusions</h1><p>This paper has described a new state-machine replication algorithm that is able to tolerate Byzantine faults and can be used in practice: it is the first to work correctly in an asynchronous system like the Internet and it improves the performance of previous algorithms by more than an order of magnitude.</p><p>The paper also described BFS, a Byzantine-faulttolerant implementation of NFS. BFS demonstrates that it is possible to use our algorithm to implement real services with performance close to that of an unreplicated service — the performance of BFSis only 3% worse than that of the standard NFSimplementation in Digital Unix. This good performance is due to a number of important optimizations, including replacing public-key signatures by vectors of message authentication codes, reducing the size and number of messages, and the incremental checkpoint-management techniques.</p><p>One reason why Byzantine-fault-tolerant algorithms will be important in the future is that they can allow systems to continue to work correctly even when there are software errors. Not all errors are survivable; our approach cannot mask a software error that occurs at all replicas. However, it can mask errors that occur independently at different replicas, including nondeterministic software errors, which are the most problematic and persistent errors since they are the hardestto detect. In fact, we encountered such a software bug while running oursystem, and our algorithmwas able to continue running correctly in spite of it.</p><p>There isstillmuch work to do on improving oursystem. One problem of special interest is reducing the amount of resources required to implement our algorithm. The number of replicas can be reduced by using $f$ replicas as witnesses that are involved in the protocol only when some full replica fails. We also believe that it is possible to reduce the number of copies of the state to $f+1$ but the details remain to be worked out.</p><p><strong>Acknowledgments</strong><br>We would like to thank Atul Adya, Chandrasekhar Boyapati, Nancy Lynch,Sape Mullender, AndrewMyers, LiubaShrira, and the anonymousrefereesfortheir helpful comments on drafts of this paper.</p><p><strong>References</strong></p><p>[1] M. Bellare and D. Micciancio. A New Paradigm for Collisionfree Hashing: Incrementality at Reduced Cost. In Advances in Cryptology – Eurocrypt 97, 1997.<br>[2] G. Bracha and S. Toueg. Asynchronous Consensus and Broadcast Protocols. Journal of the ACM, 32(4), 1995.<br>[3] R. Canneti and T. Rabin. Optimal Asynchronous Byzantine Agreement. Technical Report #92-15, Computer Science Department, Hebrew University, 1992.<br>[4] M. Castro and B. Liskov. A Correctness Proof for a Practical Byzantine-Fault-Tolerant Replication Algorithm. Technical Memo MIT/LCS/TM-590, MIT Laboratory for Computer Science, 1999.<br>[5] M. Castro and B. Liskov. Authenticated Byzantine Fault Tolerance Without Public-Key Cryptography. Technical Memo MIT/LCS/TM-589, MIT Laboratory for Computer Science, 1999.<br>[6] F. Cristian, H. Aghili, H. Strong, and D. Dolev. AtomicBroadcast: From Simple Message Diffusion to Byzantine Agreement. In International Conference on Fault Tolerant Computing, 1985.<br>[7] S. Deering and D. Cheriton. Multicast Routing in Datagram Internetworks and Extended LANs. ACM Transactions on Computer Systems, 8(2), 1990.<br>[8] H. Dobbertin. The Status of MD5 After a Recent Attack. RSA Laboratories’ CryptoBytes, 2(2), 1996.<br>[9] M. Fischer, N. Lynch, and M. Paterson. Impossibility of Distributed Consensus With One Faulty Process. Journal of the ACM, 32(2), 1985.<br>[10] J. Garay and Y. Moses. Fully Polynomial Byzantine Agreement for n 3t Processorsin t+1 Rounds. SIAM Journal of Computing, 27(1), 1998.<br>[11] D. Gawlick and D. Kinkade. Varieties of Concurrency Control in IMS/VS Fast Path. Database Engineering, 8(2), 1985.<br>[12] D. Gifford. Weighted Voting for Replicated Data. In Symposium on Operating Systems Principles, 1979.<br>[13] M. Herlihy and J. Tygar. How to make replicated data secure. Advances in Cryptology (LNCS 293), 1988.<br>[14] M. Herlihy and J. Wing. Axiomsfor Concurrent Objects. In ACM Symposium on Principles of Programming Languages, 1987.<br>[15] J. Howard et al. Scale and performance in a distributed file system. ACM Transactions on Computer Systems, 6(1), 1988.<br>[16] K. Kihlstrom, L. Moser, and P. Melliar-Smith. The SecureRing Protocols for Securing Group Communication. In Hawaii International Conference on System Sciences, 1998.<br>[17] L. Lamport. Time, Clocks, and the Ordering of Events in a Distributed System. Commun. ACM, 21(7), 1978.<br>[18] L. Lamport. The Part-Time Parliament. Technical Report 49, DEC Systems Research Center, 1989.<br>[19] L. Lamport, R. Shostak, and M. Pease. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems, 4(3), 1982.<br>[20] B. Liskov et al. Replication in the Harp File System. In ACM Symposium on Operating System Principles, 1991.<br>[21] N. Lynch. Distributed Algorithms. Morgan Kaufmann Publishers, 1996.<br>[22] D. Malkhi and M. Reiter. A High-Throughput Secure Reliable Multicast Protocol. In Computer Security Foundations Workshop, 1996.<br>[23] D. Malkhi and M. Reiter. Byzantine Quorum Systems. In ACM Symposium on Theory of Computing, 1997.<br>[24] D. Malkhi and M. Reiter. Unreliable Intrusion Detection in Distributed Computations. In Computer Security Foundations Workshop, 1997.<br>[25] D. Malkhi and M. Reiter. Secure and Scalable Replication in Phalanx. In IEEE Symposium on Reliable Distributed Systems, 1998.<br>[26] B. Oki and B. Liskov. Viewstamped Replication: A New Primary Copy Method to Support Highly-Available Distributed Systems. In ACM Symposium on Principles of Distributed Computing, 1988.<br>[27] B. Preneel and P. Oorschot. MDx-MAC and Building Fast MACs from Hash Functions. In Crypto 95, 1995.<br>[28] C. Pu, A. Black, C. Cowan, and J. Walpole. A Specialization Toolkit to Increase the Diversity of Operating Systems. In ICMAS Workshop on Immunity-Based Systems, 1996.<br>[29] M. Reiter. Secure Agreement Protocols. In ACM Conference on Computer and Communication Security, 1994.<br>[30] M. Reiter. The Rampart Toolkit for Building High-Integrity Services. Theory and Practice in Distributed Systems (LNCS 938), 1995.<br>[31] M. Reiter. A Secure Group Membership Protocol. IEEE Transactions on Software Engineering, 22(1), 1996.<br>[32] R. Rivest. The MD5 Message-Digest Algorithm. Internet RFC1321, 1992.<br>[33] R. Rivest, A. Shamir, and L. Adleman. A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. Communications of the ACM, 21(2), 1978.<br>[34] F. Schneider. Implementing Fault-Tolerant Services Using The State Machine Approach: A Tutorial. ACM Computing Surveys, 22(4), 1990.<br>[35] A. Shamir. How to share a secret. Communications of the ACM, 22(11), 1979.<br>[36] G. Tsudik. Message Authentication with One-Way Hash Functions. ACM ComputerCommunicationsReview, 22(5), 1992.<br>[37] M. Wiener. Performance Comparison of Public-Key Cryptosystems. RSA Laboratories’ CryptoBytes, 4(1), 1998.</p>    <p hidden id="CurrentFileName">Practical Byzantine Fault Tolerance.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This paper describes a new replication algorithm that is able to tolerate Byzantine faults. We believe that Byzantinefault-tolerant algorithms will be increasingly important in the future because malicious attacks and software errors are increasingly common and can cause faulty nodes to exhibit arbitrary behavior. Whereas previous algorithms assumed a synchronous system or were too slow to be used in practice, the algorithm described in this paper is practical: it works in asynchronous environments like the Internet and incorporates several important optimizations that improve the response time of previous algorithms by more than an order of magnitude. We implemented a Byzantine-fault-tolerant NFS service using our algorithm and measured its performance. The results show that ourservice is only 3% slower than a standard unreplicated NFS.&lt;/p&gt;
    
    </summary>
    
      <category term="共识算法" scheme="http://blog.msiter.com/categories/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="论文" scheme="http://blog.msiter.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="共识算法" scheme="http://blog.msiter.com/tags/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="paoxs" scheme="http://blog.msiter.com/tags/paoxs/"/>
    
      <category term="PBFT" scheme="http://blog.msiter.com/tags/PBFT/"/>
    
  </entry>
  
  <entry>
    <title>Paxos Made Live - An Engineering Perspective</title>
    <link href="http://blog.msiter.com/Paxos%20Made%20Live%20-%20An%20Engineering%20Perspective-20180731.html"/>
    <id>http://blog.msiter.com/Paxos Made Live - An Engineering Perspective-20180731.html</id>
    <published>2018-07-31T15:05:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 paxos。英文能力略残，所以把<a href="https://pdfs.semanticscholar.org/b69c/9ea11b19ed17e253782e58b04ee2d6213579.pdf" target="_blank" rel="noopener">论文</a>按照规则排版之后，在网页上进行 谷歌翻译。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="Introduction" style="display: inline;"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>It is well known that fault-tolerance on commodity hardware can be achieved through replication [17, 18]. A common approach is to use a consensus algorithm [7] to ensure that all replicas are mutually consistent [8, 14, 17]. By repeatedly applying such an algorithm on a sequence of input values, it is possible to build an identical log of values on each replica. If the values are operations on some data structure, application of the same log on all replicas may be used to arrive at mutually consistent data structures on all replicas. For instance, if the log contains a sequence of database operations, and if the same sequence of operations is applied to the (local) database on each replica, eventually all replicas will end up with the same database content (provided that they all started with the same initial database state). </p><a id="more"></a><p>This general approach can be used to implement a wide variety of fault-tolerant primitives, of which a fault-tolerant database is just an example. As a result, the consensus problem has been studied extensively over the past two decades. There are several well-known consensus algorithms that operate within a multitude of settings and which tolerate a variety of failures. The Paxos consensus algorithm [8] has been discussed in the theoretical [16] and applied community [10, 11, 12] for over a decade. We used the Paxos algorithm (“Paxos”) as the base for a framework that implements a fault-tolerant log. We then relied on that framework to build a fault-tolerant database. Despite the existing literature on the subject, building a production system turned out to be a non-trivial task for a variety of reasons:</p><p>• While Paxos can be described with a page of pseudo-code, our complete implementation contains several thousand lines of C++ code. The blow-up is not due simply to the fact that we used C++ instead of pseudo notation, nor because our code style may have been verbose. Converting the algorithm into a practical, production-ready system involved implementing many features and optimizations – some published in the literature and some not.<br>• The fault-tolerant algorithms community is accustomed to proving short algorithms (one page of pseudo code) correct. This approach does not scale to a system with thousands of lines of code. To gain confidence in the “correctness” of a real system, different methods had to be used.<br>• Fault-tolerant algorithms tolerate a limited set of carefully selected faults. However, the real world exposes software to a wide variety of failure modes, including errors in the algorithm, bugs in its implementation, and operator error. We had to engineer the software and design operational procedures to robustly handle this wider set of failure modes.<br>• A real system is rarely specified precisely. Even worse, the specification may change during the implementation phase. Consequently, an implementation should be malleable. Finally, a system might “fail” due to a misunderstanding that occurred during its specification phase.</p><p>This paper discusses a selection of the algorithmic and engineering challenges we encountered in moving Paxos from theory to practice. This exercise took more R&amp;D efforts than a straightforward translation of pseudo-code to C++ might suggest.</p><p>The rest of this paper is organized as follows. The next two sections expand on the motivation for this project and describe the general environment into which our system was built. We then provide a quick refresher on Paxos. We divide our experiences into three categories and discuss each in turn: algorithmic gaps in the literature, software engineering challenges, and unexpected failures. We conclude with measurements of our system, and some broader observations on the state of the art in our field.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="Background" style="display: inline;"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Chubby [1] is a fault-tolerant system at Google that provides a distributed locking mechanism and stores small files. Typically there is one Chubby instance, or “cell”, per data center. Several Google systems – such as the Google Filesystem (GFS) [4] and Bigtable [2] – use Chubby for distributed coordination and to store a small amount of metadata.</p><p>Chubby achieves fault-tolerance through replication. A typical Chubby cell consists of five replicas, running the same code, each running on a dedicated machine. Every Chubby object (e.g., a Chubby lock, or file) is stored as an entry in a database. It is this database that is replicated. At any one time, one of these replicas is considered to be the “master”.</p><p>Chubby clients (such as GFS and Bigtable) contact a Chubby cell for service. The master replica serves all Chubby requests. If a Chubby client contacts a replica that is not the master, the replica replies with the master’s network address. The Chubby client may then contact the master. If the master fails, a new master is automatically elected, which will then continue to serve traffic based on the contents of its local copy of the replicated database. Thus, the replicated database ensures continuity of Chubby state across master failover.</p><p>The first version of Chubby was based on a commercial, third-party, fault-tolerant database; we will refer to this database as “3DB” for the rest of this paper. This database had a history of bugs related to replication. In fact, as far as we know, the replication mechanism was not based on a proven replication algorithm and we do not know if it is correct. Given the history of problems associated with that product and the importance of Chubby, we eventually decided to replace 3DB with our own solution based on the Paxos algorithm.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="Architecture-outline" style="display: inline;"><a href="#Architecture-outline" class="headerlink" title="Architecture outline"></a>Architecture outline</h1><p>Figure 1 illustrates the architecture of a single Chubby replica. A fault-tolerant replicated log based on the Paxos algorithm sits at the bottom of the protocol stack. Each replica maintains a local copy of the log. The Paxos algorithm is run repeatedly as required to ensure that all replicas have identical sequences of entries in their local logs. Replicas communicate with each other through a Paxos-specific protocol.</p><p>The next layer is a fault-tolerant replicated database which includes a local copy of the database at each replica. The database consists of a local snapshot and a replay-log of database operations. New database operations are submitted to the replicated log. When a database operation appears at a replica, it is applied on that replica’s local database copy.</p><p>Finally, Chubby uses the fault-tolerant database to store its state. Chubby clients communicate with a single Chubby replica through a Chubby-specific protocol.</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Paxos Made Live/WX20180731-101403.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Paxos Made Live/WX20180731-101403.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 1: A single Chubby replica.</figcaption></figure></p><p>We devoted effort to designing clean interfaces separating the Paxos framework, the database, and Chubby. We did this partly for clarity while developing this system, but also with the intention of reusing the replicated log layer in other applications. We anticipate future systems at Google that seek fault-tolerance through replication. We believe that a fault-tolerant log is a powerful primitive on which to build such systems.<br>Our fault-tolerant log’s API is depicted in Figure 2. It contains a call to submit a new value to the log. Once a submitted value enters the fault-tolerant log, our system invokes a callback to the client application at each replica and passes the submitted value.<br>Our system is multi-threaded and multiple values can be submitted concurrently on different threads. The replicated log does not create its own threads but can be invoked concurrently by any number of threads. This approach to threading helps in testing the system, as we will show in more detail later in the paper.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="On-Paxos" style="display: inline;"><a href="#On-Paxos" class="headerlink" title="On Paxos"></a>On Paxos</h1><p>In this section we give an informal overview of the basic Paxos algorithm and outline how to chain together multiple executions of it (Multi-Paxos). We refer the reader to the literature for more formal descriptions and correctness proofs [8, 9, 16]. Readers who are familiar with Paxos may skip directly to the next section.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Paxos-Basics" style="display: inline;"><a href="#Paxos-Basics" class="headerlink" title="Paxos Basics"></a>Paxos Basics</h2><p>Paxos is a consensus algorithm executed by a set of processes, termed replicas, to agree on a single value in the presence of failures. Replicas may crash and subseqently recover. The network may drop messages</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Paxos Made Live/WX20180731-101626.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Paxos Made Live/WX20180731-101626.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 2: API for fault-tolerant log.</figcaption></figure></p><p>between replicas. Replicas have access to persistent storage that survives crashes. Some replicas may submit values for consensus. If eventually a majority of the replicas run for long enough without crashing and there are no failures, all running replicas are guaranteed to agree on one of the values that was submitted. In our system, the value to be agreed upon is the next entry in a (replicated) log as described in the introduction.<br>The algorithm consists of three phases, which may be repeated (because of failures):</p><ol><li>Elect a replica to be the coordinator.</li><li>The coordinator selects a value and broadcasts it to all replicas in a message called the accept message. Other replicas either acknowledge this message or reject it.</li><li>Once a majority of the replicas acknowledge the coordinator, consensus has been reached, and the coordinator broadcasts a commit message to notify replicas.</li></ol><p>To provide some intuition about how the algorithm works, consider first the case in which there is only a single coordinator and no failures. Consensus is reached once a majority of replicas receive the accept message from the coordinator and acknowledge it. Subsequently, if any minority of the replicas fail, we are still guaranteed that at least one replica will be alive that received the consensus value.</p><p>In reality the coordinator may fail. Paxos does not require that only one replica act as coordinator at a time. Multiple replicas may decide to become coordinators and execute the algorithm at any time. Typically the system is engineered to limit coordinator turnover, as it can delay reaching consensus.</p><p>This flexible election policy means there may be multiple replicas who simultaneously believe they are the coordinator. Further, these coordinators may select different values. Paxos ensures consensus can be reached on a single value (it can be from any coordinator) by introducing two extra mechanisms: 1) assigning an ordering to the successive coordinators; and 2) restricting each coordinator’s choice in selecting a value.</p><p>Ordering the coordinators allows each replica to distinguish between the current coordinator and previous coordinators. In this way, replicas can reject messages from old coordinators and prevent them from disrupting consensus once it is reached. Paxos orders the coordinators by assigning them an increasing sequence number as follows. Each replica keeps track of the most recent sequence number it has seen so far. When a replica wants to become coordinator, it generates a unique1 sequence number higher than any it has seen,and broadcasts it to all replicas in a propose message. If a majority of replicas reply and indicate they have not seen a higher sequence number, then the replica acts as a coordinator. These replies are called promise messages since replicas promise henceforth to reject messages from old coordinators. This propose/promise message exchange constitutes step 1 listed above.</p><p>Once consensus is reached on a value, Paxos must force future coordinators to select that same value in order to ensure continued agreement. To guarantee this, the promise messages from replicas include the most recent value they have heard, if any, along with the sequence number of the coordinator from whom they heard it. The new coordinator chooses the value from the most recent coordinator. If none of the promise messages contain a value, the coordinator is free to choose a submitted value.</p><p>The reasoning why this works is subtle, but proceeds roughly as follows. The new coordinator requires a response to the propose message from a majority of replicas. Therefore, if consensus was achieved by a previous coordinator, the new coordinator is guaranteed to hear about the value decided upon from at least one replica. By induction, that value will have the highest sequence number of all responses received, and so will be selected by the new coordinator.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="4-2-Multi-Paxos" style="display: inline;"><a href="#4-2-Multi-Paxos" class="headerlink" title="4.2 Multi-Paxos"></a>4.2 Multi-Paxos</h2><p>Practical systems use Paxos as a building block to achieve consensus on a sequence of values, such as in a replicated log. The simple way to implement this is to repeatedly execute the Paxos algorithm. We term each execution an instance of Paxos. We refer to submitting a value to Paxos (or equivalently, to the log) to mean executing an instance of Paxos while submitting that value.</p><p>In Multi-Paxos some slow (lagging) replicas might not have participated in recent Paxos instances. We use a catch-up mechanism to enable lagging replicas to catch up with leading replicas.</p><p>Each replica maintains a locally persistent log to record all Paxos actions. When a replica crashes and subsequently recovers, it replays the persistent log to reconstruct its state prior to crashing. Replicas also use this log when helping lagging replicas to catch up. The Paxos algorithm as described thus far requires all message senders to log their state before sending messages – thus the algorithm requires a sequence of five writes (for each of the propose, promise, accept, acknowledgment, and commit messages) to disk on its critical path. Note that all writes have to be flushed to disk immediately before the system can proceed any further. In a system where replicas are in close network proximity, disk flush time can dominate the overall latency of the implementation.</p><p>There is a well-known optimization to reduce the number of messages involved by chaining together multiple Paxos instances [9]. Propose messages may be omitted if the coordinator identity does not change between instances. This does not interfere with the properties of Paxos because any replica at any time can still try to become coordinator by broadcasting a propose message with a higher sequence number. In order to avail itself of this optimization, a Multi-Paxos algorithm may be designed to pick a coordinator for long periods of time, trying not to let the coordinator change. We refer to this coordinator as the master. With this optimization, the Paxos algorithm only requires a single write to disk per Paxos instance on each replica, executed in parallel with each other. The master writes to disk immediately after sending its accept message and other replicas write to disk prior to sending their acknowledge message.</p><p>In order to get additional throughput in a concurrent system, it is possible to batch a collection of values submitted by different application threads into a single Paxos instance</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="5-Algorithmic-challenges" style="display: inline;"><a href="#5-Algorithmic-challenges" class="headerlink" title="5 Algorithmic challenges"></a>5 Algorithmic challenges</h1><p>While the core Paxos algorithm is well-described, implementing a fault-tolerant log based on it is a non-trivial endeavor. Some of the complications are due to imperfections found in the real world (such as hard disk failures, or finite resources), and some are due to additional requirements (for instance, “master leases”). Many of these challenges have algorithmic solutions that are intimately connected with the core Paxos algorithm. In the following we describe a number of mechanisms that we introduced.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-1-Handling-disk-corruption" style="display: inline;"><a href="#5-1-Handling-disk-corruption" class="headerlink" title="5.1 Handling disk corruption"></a>5.1 Handling disk corruption</h2><p>Replicas witness disk corruption from time to time. A disk may be corrupted due to a media failure or due to an operator error (an operator may accidentally erase critical data). When a replica’s disk is corrupted and it loses its persistent state, it may renege on promises it has made to other replicas in the past. This violates a key assumption in the Paxos algorithm. We use the following mechanism to address this problem [14].</p><p>Disk corruptions manifest themselves in two ways. Either file(s) contents may change or file(s) may become inaccessible. To detect the former, we store the checksum of the contents of each file in the file2. The latter may be indistinguishable from a new replica with an empty disk – we detect this case by having a new replica leave a marker in GFS after start-up. If this replica ever starts again with an empty disk, it will discover the GFS marker and indicate that it has a corrupted disk.</p><p>A replica with a corrupted disk rebuilds its state as follows. It participates in Paxos as a non-voting member; meaning that it uses the catch-up mechanism to catch up but does not respond with promise or acknowledgment messages. It remains in this state until it observes one complete instance of Paxos that was started after the replica started rebuilding its state. By waiting for the extra instance of Paxos, we ensure that this replica could not have reneged on an earlier promise.</p><p>This mechanism enables the following optimization to improve the latency of the system. Since the system can now deal with occasional disk corruption, under some circumstances it may be acceptable not to flush writes to disk immediately3 . While we have considered schemes to exploit this observation, we have not implemented them yet.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-2-Master-leases" style="display: inline;"><a href="#5-2-Master-leases" class="headerlink" title="5.2 Master leases"></a>5.2 Master leases</h2><p>When the basic Paxos algorithm is used to implement a replicated data structure, reads of the data structure require executing an instance of Paxos. This serializes the read with respect to updates and ensures that the current state is read. In particular, read operations cannot be served out of the master’s copy of the data structure because it is possible that other replicas have elected another master and modified the data structure without notifying the old master. In this case, the read operation at the master runs the risk of returning stale data. Since read operations usually comprise a large fraction of all operations, serializing reads through Paxos is expensive.</p><p>The workaround is to implement master leases [5] with the following semantics: as long as the master has the lease, it is guaranteed that other replicas cannot successfully submit values to Paxos. Thus a master with the lease has up-to-date information in its local data structure which can be used to serve a read operation purely locally. By making the master attempt to renew its lease before it expires we can ensure that a master has a lease most of the time. With our system, masters successfully maintain leases for several days at a time.</p><p>In our implementation, all replicas implicitly grant a lease to the master of the previous Paxos instance and refuse to process Paxos messages from any other replica while the lease is held. The master maintains a shorter timeout for the lease than the replicas – this protects the system against clock drift. The master periodically submits a dummy “heartbeat” value to Paxos to refresh its lease.</p><p>The Multi-Paxos optimization exhibits the following stability problem when there are intermittent network outages. When a master temporarily disconnects, Paxos will elect a new master. The new master will maintain a fixed sequence number across instances of Paxos. In the mean time, when the disconnected old master tries to run the Paxos algorithm, if it manages to connect with another replica, it may increase its sequence number. When it reconnects, it may have a higher sequence number than the new master and be able to replace the new master. Later it may disconnect again, and the cycle can repeat itself.</p><p>This behavior is undesirable as Chubby master changes have a negative impact on some of its users. Furthermore, this behavior can degenerate into rapid master changes in a network with poor connectivity.In our implementation the master periodically boosts its sequence number by running a full round of the Paxos algorithm, including sending propose messages4 . Boosting with the right frequency avoids this type of master churn in most cases. Note that it is possible to extend the concept of leases to all replicas. This will allow any replica with<br>a lease to serve read requests from its local data structure. This extended lease mechanism is useful when<br>read traffic significantly exceeds write traffic. We have examined algorithms for replica leases, but have not implemented them yet.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-3-Epoch-numbers" style="display: inline;"><a href="#5-3-Epoch-numbers" class="headerlink" title="5.3 Epoch numbers"></a>5.3 Epoch numbers</h2><p>Requests (by a Chubby client) submitted to a Chubby cell are directed to the current Chubby master replica. From the time when the master replica receives the request to the moment the request causes an update of the underlying database, the replica may have lost its master status. It may even have lost master status and regained it again. Chubby requires an incoming request to be aborted if mastership is lost and/or re-acquired during the handling of the request. We needed a mechanism to reliably detect master turnover and abort operations if necessary.</p><p>We solved this problem by introducing a global epoch number with the following semantics. Two requests for the epoch number at the master replica receive the same value iff that replica was master continuously for the time interval between the two requests. The epoch number is stored as an entry in the database, and all database operations are made conditional on the value of the epoch number.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-4-Group-membership" style="display: inline;"><a href="#5-4-Group-membership" class="headerlink" title="5.4 Group membership"></a>5.4 Group membership</h2><p>Practical systems must be able to handle changes in the set of replicas. This is referred to as the group membership problem in the literature [3]. Some Paxos papers point out that the Paxos algorithm itself can be used to implement group membership [8]. While group membership with the core Paxos algorithm is straightforward, the exact details are non-trivial when we introduce Multi-Paxos, disk corruptions, etc. Unfortunately the literature does not spell this out, nor does it contain a proof of correctness for algorithms related to group membership changes using Paxos. We had to fill in these gaps to make group membership work in our system. The details – though relatively minor – are subtle and beyond the scope of this paper.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-5-Snapshots" style="display: inline;"><a href="#5-5-Snapshots" class="headerlink" title="5.5 Snapshots"></a>5.5 Snapshots</h2><p>As described thus far, the repeated application of a consensus algorithm to create a replicated log will lead to an ever growing log. This has two problems: it requires unbounded amounts of disk space; and perhaps worse, it may result in unbounded recovery time since a recovering replica has to replay a potentially long log before it has fully caught up with other replicas. Since the log is typically a sequence of operations to be applied to some data structure, and thus implicitly (through replay) represents a persistent form of that data structure, the problem is to find an alternative persistent representation for the data structure at hand. An obvious mechanism is to persist – or snapshot – the data structure directly, at which point the log of operations leading to the current state of the data structure is no longer needed. For example, if the data structure is held in memory, we take a snapshot by serializing it on disk. If the data structure is kept on disk, a snapshot may just be an on-disk copy of it.<br>By itself, the Paxos framework does not know anything about the data structure we are trying to replicate; its only concern is the consistency of the replicated log. It is the particular application using the Paxos framework that has all the knowledge about the replicated data structure. Thus the application must be responsible for taking snapshots. Our framework provides a mechanism that allows client applications, e.g. our fault-tolerant database, to inform the framework that a snapshot was taken; the client application is free to take a snapshot at any point. When the Paxos framework is informed about a snapshot, it will truncate its log by deleting log entries that precede the snapshot. Should the replica fail, during subsequent recoveryit will simply install the latest snapshot and then replay the truncated log to rebuild its state. Snapshots<br>are not synchronized across replicas; each replica independently decides when to create a snapshot.<br>This mechanism appears straightforward at first and is mentioned briefly in the literature [8]. However, it introduces a fair amount of complexity into the system: the persistent state of a replica now comprises a log and a snapshot that have to be maintained consistently. The log is fully under the framework’s control, while the  snapshot format is application-specific. Some aspects of the snapshot machinery are of particular interest:</p><ul class="g-list-style-circle"><li>The snapshot and log need to be mutually consistent. Each snapshot needs to have information about its contents relative to the fault-tolerant log. In our framework we introduced the concept of a snapshot handle for this purpose. The snapshot handle contains all the Paxos-specific information related to a particular snapshot. When creating a snapshot (which is under control of the application) the corresponding snapshot handle (provided by the framework) needs to be stored by the application as well. When recovering a snapshot, the application must return the snapshot handle to the framework, which in turn will use the information in the handle to coordinate the snapshot with the log. Note that the handle is really a snapshot of the Paxos state itself. In our system, it contains the Paxos instance number corresponding to the (log) snapshot and the group membership at that point.</li><li>Taking a snapshot takes time and in some situations we cannot afford to freeze a replica’s log while it is taking a snapshot. In our framework, taking a snapshot is split into three phases. First, when the client application decides to take a snapshot, it requests a snapshot handle. Next, the client application takes its snapshot. It may block the system while taking the snapshot, or – more likely – spawn a thread that takes a snapshot while the replica continues to participate in Paxos. The snapshot must correspond to the client state at the log position when the handle was obtained. Thus if the replica continues to participate in Paxos while taking a snapshot, special precautions may have to be taken to snapshot the client’s data structure while it is actively updated.5 Finally, when the snapshot has been taken, the client application informs the framework about the snapshot and passes the corresponding snapshot handle. The framework then truncates the log appropriately.</li><li>Taking a snapshot may fail. Our framework only truncates the log when it is informed that a snapshot has been taken and has received the corresponding snapshot handle. Thus, as long as the client application does not inform the framework, from the framework’s viewpoint, no snapshot has been taken. This allows the client application to verify a snapshot’s integrity and discard it if necessary. If there is a problem with the snapshot, the client doesn’t ask the framework to truncate its log. A client application may even attempt to take several snapshots at the same time using this mechanism.</li><li><p>While in catch-up, a replica will attempt to obtain missing log records. If it cannot obtain them (because no replica has old-enough log entries readily available), the replica will be told to obtain a snapshot from another replica. This snapshot’s handle contains information about the Paxos instance up to which the snapshot captured the state. Once the snapshot has been received and installed, under most circumstances the lagging replica will be close to the leading replica. In order to completely catchup, the lagging replica asks for and receives the remaining log records from the leading replica to bring it fully up-to-date</p><p> Note that a leading replica may even create a new snapshot while a lagging replica is installing an older snapshot – in a fault-tolerant system this cannot be avoided. In this scenario, the lagging replica may not be able to obtain any outstanding log records because the snapshot provider (and any other replicas) may have moved ahead in the meantime. The lagging replica will need to obtain a more recent snapshot.</p><p> Furthermore, the leading replica may fail after sending its snapshot. The catch-up mechanism must be able to recover from such problems by having the lagging replica contact another leading replica.</p></li><li>We needed a mechanism to locate recent snapshots. Some applications may choose to transfer snapshots directly between leading and lagging replicas while others may ask a lagging replica to look up a snapshot on GFS. We implemented a general mechanism that allows an application to pass snapshot location information between leading and lagging replicas.</li></ul><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="5-6-Database-transactions" style="display: inline;"><a href="#5-6-Database-transactions" class="headerlink" title="5.6 Database transactions"></a>5.6 Database transactions</h2><p>The database requirements imposed by Chubby are simple: the database needs to store key-value pairs (with keys and values being arbitrary strings), and support common operations such as insert, delete, lookup, an atomic compare and swap (cas), and iteration over all entries. We implemented a log-structured design using a snapshot of the full database, and a log of database operations to be applied to that snapshot. The log of operations is the Paxos log. The implementation periodically takes a snapshot of the database state and truncates the log accordingly.</p><p>The cas operation needed to be atomic with respect to other database operations (potentially issued by a different replica). This was easily achieved by submitting all cas-related data as a single “value” to Paxos. We realized that we could extend this mechanism to provide transaction-style support without having to implement true database transactions. We describe our solution in more detail because we believe it to be useful in other contexts.</p><p>Our implementation hinges around a powerful primitive which we call MultiOp. All other database operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically and consists of three components:</p><ol><li>A list of tests called guard. Each test in guard checks a single entry in the database. It may check for the absence or presence of a value, or compare with a given value. Two different tests in the guard may apply to the same or different entries in the database. All tests in the guard are applied and MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise it executes f op (see item 3 below).</li><li>A list of database operations called t op. Each operation in the list is either an insert, delete, or lookup operation, and applies to a single database entry. Two different operations in the list may apply to the same or different entries in the database. These operations are executed6 if guard evaluates to true.</li><li>A list of database operations called f op. Like t op, but executed if guard evaluates to false.</li></ol><p>Late in our development (and after we had implemented the database and MultiOp), we realized that we also needed epoch numbers to implement database operations for Chubby. With this additional requirement, all Chubby operations became associated with an epoch number and were required to fail if the Paxos epoch number changed. MultiOp proved useful in accomodating this new requirement. After we incorporated the Paxos epoch as a database entry, we were able to modify all previous calls to our database to include an additional guard to check for the epoch number.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="6-Software-Engineering" style="display: inline;"><a href="#6-Software-Engineering" class="headerlink" title="6 Software Engineering"></a>6 Software Engineering</h1><p>Fault-tolerant systems are expected to run continuously for long periods of time. Users are much less likely to tolerate bugs than in other systems. For instance, a layout bug exhibited by a document editor may be annoying to a user, but often it is possible to “work around” the issue, even though the bug is really at the core of what the software is supposed to do. A bug of similar gravity in a fault-tolerant system may make<br>the system unusable.<br>We adopted several software engineering methods to give us confidence in the robustness of our implementation. We describe some of the methods we used in this section.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-1-Expressing-the-algorithm-effectively" style="display: inline;"><a href="#6-1-Expressing-the-algorithm-effectively" class="headerlink" title="6.1 Expressing the algorithm effectively"></a>6.1 Expressing the algorithm effectively</h2><p>Fault-tolerant algorithms are notoriously hard to express correctly, even as pseudo-code. This problem is worse when the code for such an algorithm is intermingled with all the other code that goes into building a complete system. It becomes harder to see the core algorithm, to reason about it, or to debug it when a bug is present. It also makes it difficult to change the core algorithm in response to a requirement change.</p><p>We addressed this problem by coding the core algorithm as two explicit state machines. For that purpose, we designed a simple state machine specification language and built a compiler to translate such specifications into C++. The language was designed to be terse so that a full algorithm can be rendered on a single screen. As an additional benefit, the state machine compiler also automatically generates code to log state transitions and measure code coverage to assist in debugging and testing.</p><p>We believe that choosing a specification language makes it easier to reason about and modify our state machines than an explicitly coded implementation that is intermingled with the rest of the system. This is illustrated by the following experience. Towards the end of our development of the fault-tolerant log, we had to make a fundamental change in our group membership algorithm. Prior to this change, a replica roughly went through three states. Initially it waited to join the group, then it joined the group, and finally it left the group. Once a replica left the group, it was not allowed to rejoin the group. We felt this approach was best because an intermittently failing replica would not be able to join the group and disrupt it for long. Intermittent failure turned out to be more common than originally anticipated because normal replicas exhibit intermittent failures from time to time. Thus, we needed to change the algorithm to have two states. Either a replica was in the group or it was out. A replica could switch between these two states often during the lifetime of the system. It took us about one hour to make this change and three days to modify our tests accordingly. Had we intermingled our state machines with the rest of the system, this change would have been more difficult to make.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-2-Runtime-consistency-checking" style="display: inline;"><a href="#6-2-Runtime-consistency-checking" class="headerlink" title="6.2 Runtime consistency checking"></a>6.2 Runtime consistency checking</h2><p>The chance for inconsistencies increases with the size of the code base, the duration of a project, and the number of people working simultaneously on the same code. We used various active self-checking mechanisms such as the liberal use of assert statements, and explicit verification code that tests data structures for consistency.<br>For example, we used the following database consistency check. The master periodically submits a checksum request to the database log. On receipt of this request, each replica computes a checksum of its local database7 Since the Paxos log serializes all operations identically on all replicas, we expect all replicas to compute the same checksum. After the master completes a checksum computation, it sends its checksum to all replicas which compare the master’s checksum with their computed checksum. We have had three database inconsistency incidents thus far:</p><ul class="g-list-style-circle"><li>The first incident was due to an operator error.</li><li>We have not found an explanation for the second incident. On replaying the faulty replica’s log we found that it was consistent with the other replicas. Thus it is possible that this problem was caused by a random hardware memory corruption.</li><li>We suspect the third was due to an illegal memory access from errant code in the included codebase (which is of considerable size). To protect against this possibility in the future, we maintain a second database of checksums and double-check every database access against the database of checksums.</li></ul><p>In all three cases manual intervention appeared to resolve the problem before it became visible to Chubby</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="6-3-Testing" style="display: inline;"><a href="#6-3-Testing" class="headerlink" title="6.3 Testing"></a>6.3 Testing</h2><p>Given the current state of the art, it is unrealistic to prove a real system such as ours correct. To achieve robustness, the best practical solution in addition to meticulous software engineering is to test a system thoroughly. Our system was designed to be testable from the onset and now contains an extensive suite of tests. In this section we describe two tests that take the system through a long sequence of random failures and verify that it behaves as expected. Both tests can run in one of two modes:</p><ol><li>Safety mode. In this mode, the test verifies that the system is consistent. However, the system is not required to make any progress. For example, it is acceptable for an operation to fail to complete or to report that the system is unavailable.</li><li>Liveness mode. In this mode, the test verifies that the system is consistent and is making progress. All operations are expected to complete and the system is required to be consistent.</li></ol><p>Our tests start in safety mode and inject random failures into the system. After running for a predetermined period of time, we stop injecting failures and give the system time to fully recover. Then we switch the test to liveness mode. The purpose for the liveness test is to verify that the system does not deadlock after a sequence of failures.</p><p>One of our tests verifies the fault-tolerant log. It simulates a distributed system consisting of a random number of replicas and takes our fault-tolerant log through a random sequence of network outages, message delays, timeouts, process crashes and recoveries, file corruptions, schedule interleavings, etc. We wanted this test to be repeatable to aid in debugging. To this end, we use a random number generator to determine the schedule of failures. The seed for the random number generator is given at the beginning of the test run. We ensure that two test runs with the same random number seed are identical by running the test in a single thread to remove unwanted non-determinism from multi-threading. This is possible because the fault-tolerant log does not create its own threads and can run in a single-threaded environment (even though it normally runs in a multi-threaded environment).</p><p>Each test execution reports success or failure. If a test fails, we rerun that test with the failing random number seed and with detailed logging turned on in a debugger to determine what went wrong. This is possible because these tests are repeatable.</p><p>This test proved useful in finding various subtle protocol errors, including errors in our group membership implementation, and our modifications to deal with corrupted disks. In order to measure the strength of this test, we left some protocol bugs found during code and design reviews in the system, and verified that our test system detected these bugs. After a number of bug fixes, the test became very stable. In order to improve its bug yield, we started running this test on a farm of several hundred Google machines at a time. We found additional bugs, some of which took weeks of simulated execution time (at extremely high failure rates) to find.</p><p>Another test verifies robustness of the new Chubby system against lower-level system and hardware failures. We implemented several hooks in our fault-tolerant log to inject failures. The test randomly invokes these hooks and verifies that higher levels of the system can cope. Our hooks can be used to crash a replica, disconnect it from other replicas for a period of time or force a replica to pretend that it is no longer the master. This test found five subtle bugs in Chubby related to master failover in its first two weeks. In the same vein, we built a filesystem with hooks to programmatically inject failures and are using it to test our ability to deal with filesystem failures.</p><p>In closing we point out a challenge that we faced in testing our system for which we have no systematic solution. By their very nature, fault-tolerant systems try to mask problems. Thus they can mask bugs or configuration problems while insidiously lowering their own fault-tolerance. For example, we have observed the following scenario. We once started a system with five replicas, but misspelled the name of one of the replicas in the initial group. The system appeared to run correctly as the four correctly configured replicas</p><p>were able to make progress. Further, the fifth replica continunously ran in catch-up mode8 and therefore appeared to run correctly as well. However in this configuration the system only tolerates one faulty replica instead of the expected two. We now have processes in place to detect this particular type of problem. We have no way of knowing if there are other bugs/misconfigurations that are masked by fault-tolerance.</p><p>6.4 Concurrency<br>At the onset of the project we were concerned about the problem of testing concurrent fault-tolerant code. In particular, we wanted our tests to be repeatable. As described earlier, our fault-tolerant log doesn’t contain any of its own threads (even though it can handle concurrent requests on different threads). Threading is introduced at the edges of the code – where we receive calls from the networking layer. By making our tests repeatable, we were able to hunt down several obscure protocol errors during testing.</p><p>As the project progressed, we had to make several subsystems more concurrent than we had intended and sacrifice repeatability. Chubby is multi-threaded at its core, thus we cannot run repeatable tests against the complete system. Next we had to make our database multi-threaded so it could take snapshots, compute checksums and process iterators while concurrently serving database requests. Finally, we were forced to make the code that handles the local copy of the log multi-threaded as well (the exact reason why is beyond the scope of this paper).</p><p>In summary, we believe that we set ourselves the right goals for repeatability of executions by constraining concurrency. Unfortunately, as the product needs grew we were unable to adhere to these goals.</p><p>7 Unexpected failures<br>So far, our system has logged well over 100 machine years of execution in production. In this period we have witnessed the following unexpected failure scenarios:</p><ul class="g-list-style-circle"><li>Our first release shipped with ten times the number of worker threads as the original Chubby system. We hoped this change would enable us to handle more requests. Unfortunately, under load, the worker threads ended up starving some other key threads and caused our system to time out frequently. This resulted in rapid master failover, followed by en-masse migrations of large numbers of clients to the new master which caused the new master to be overwhelmed, followed by additional master failovers, and so on.<br>When this problem first appeared, the precise cause was unknown and we had to protect ourselves from a potentially dangerous bug in our system. We decided to err on the side of caution and to rollback our system to the old version of Chubby (based on 3DB) in one of our data centers. At that point, the rollback mechanism was not properly documented (because we never expected to use it), its use was non-intuitive, the operator performing the roll-back had no experience with it, and when the rollback was performed, no member of the development team was present. As a result, an old snapshot was accidentally used for the rollback. By the time we discovered the error, we had lost 15 hours of data and several key datasets had to be rebuilt.</li><li>When we tried to upgrade this Chubby cell again a few months later, our upgrade script failed because we had omitted to delete files generated by the failed upgrade from the past. The cell ended up running with a months-old snapshot for a few minutes before we discovered the problem. This caused us to lose about 30 minutes of data. Fortunately all of Chubby’s clients recovered from this outage.</li><li>A few months after our initial release, we realized that the semantics provided by our database were different from what Chubby expected. If Chubby submitted an operation to the database, and the database lost its master status, Chubby expected the operation to fail. With our system, a replica  could be re-installed as master during the database operation and the operation could succeed. The fix required a substantial rework of the integration layer between Chubby and our framework (we needed to implement epoch numbers). MultiOp proved to be helpful in solving this unexpected problem – an indication that MultiOp is a powerful primitive.</li><li>As mentioned before, on three occasions we discovered that one of the database replicas was different from the others in that Chubby cell. We found this problem because our system periodically takes checksums of all replicas and then compares them.</li><li>Our upgrade script which is responsible for migrating cells from the 3DB version of Chubby to the Paxos version has failed several times for a variety of reasons. For example, it once failed because a basic Google program was not installed on one of our cells.</li><li>We have encountered failures due to bugs in the underlying operating system. For example in our version of the Linux 2.4 kernel, when we try to flush a small file to disk, the call can hang for a long time if there are a lot of buffered writes to other files. This happens immediately after we write a database snapshot to disk. In this case, we observed that it could take several seconds for the kernel to flush an unrelated small write to the Paxos log. Our workaround is to write all large files in small chunks, with a flush to disk after each small chunk. While this hurts the performance of the write slightly, it protects the more critical log writes from unexpected delays</li></ul><p>A small number of failures in 100 machine years would be considered excellent behavior for most production systems. However, we consider the current failure rate too high for Chubby and we have determined that we need to reduce it further.</p><p>Three of the failures occurred during upgrade (or rollback). Every time we encountered a problem during upgrade, we updated our upgrade script accordingly. Once a cell is upgraded, this type of failure will disappear.</p><p>Two of the failures were from bugs that have since been fixed. To reduce the probability of other bugs, we continue to improve and run the Chubby verification test outlined earlier.</p><p>Two of our unexpected problems relate to operator error during rollout of a new release and caused us to lose data. At Google, the day-to-day monitoring and management of our systems is done by system operators. While they are very competent, they are usually not part of the development team that built the system, and therefore not familiar with its intricate details. This may lead to the occasional operator error in unforseen situations. We now rely on carefully written and well-tested scripts to automate rollout and minimize operator involvement. As a result our most recent major release of Chubby was rolled out across hundreds of machines without incident, while serving life traffic.</p><p>One of the failures was due to memory corruption. Because our system is log-structured and maintains several days of log data and snapshots, it was possible to replay the database upto the exact point at which the problem appears. We were able to verify that our logs were correct and conclude that the memory corruption occurred from errant software or due to hardware problems. We added additional checksum data to detect this type of problem in the future and will crash a replica when it detects this problem.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="8-Measurements" style="display: inline;"><a href="#8-Measurements" class="headerlink" title="8 Measurements"></a>8 Measurements</h1><p>The initial goal of our system was to replace 3DB with our own database. Thus our system had to demonstrate equal or superior performance relative to 3DB. We measured the performance of a complete Chubby system (clients, server, including network latency) using our fault-tolerant replicated database. We also benchmarked this system against an identical system based on 3DB (see Table 1). For our tests, we ran two copies of Chubby on the same set of 5 servers (typical PentiumR-class machines). One copy of Chubby used our database while the other copy used 3DB. We ran Chubby clients on workstations to generate load on the servers. For our tests, we measured total system throughput. Each call includes the Chubby client, the network, the Chubby server and our fault-tolerant database. While this test underestimates the performance of our database, it gives a sense of the full system throughput of a system based on Paxos.</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/Paxos Made Live/WX20180731-104551.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/Paxos Made Live/WX20180731-104551.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Figure 1:Table 1: Comparing our system with 3DB (higher numbers are better).</figcaption></figure></p><p>Even though read requests to Chubby dominate in practice, we designed our tests to be write intensive. This is because read requests are completely handled on the master, which typically has a lease, and do not exercise the Paxos algorithm.</p><p>In our test, each worker repeatedly creates a file in Chubby and waits for Chubby to return before creating the file again. Thus each operation makes one write call to the underlying database. If the contents of the file are small and there is a single worker, the test measures the latency of the system. If the contents of the file are large, the test measures the throughput of the system in MB/s. By using multiple concurrent workers, we were also able to measure the throughput of the system in submissions/s.</p><p>All tests with more than one worker show the effect of batching a collection of submitted values. It should be possible to achieve some speedup with 3DB by bundling a collection of updates in a database transaction. The last two throughput tests show the effect of taking snapshots. This system was configured to take a snapshot whenever the replicated log size exceeded 100 MB. In these two tests, the system takes snapshots roughly every 100 seconds. When taking a snapshot, the system makes another copy of the database and writes it to disk. As a result, its performance temporarily drops off.</p><p>Our system is by no means optimized for performance, and we believe that there is a lot of room to make it faster. However, given the performance improvement over 3DB, further optimizations are not a priority at this time.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="9-Summary-and-open-problems" style="display: inline;"><a href="#9-Summary-and-open-problems" class="headerlink" title="9 Summary and open problems"></a>9 Summary and open problems</h1><p>We have described our implementation of a fault-tolerant database, based on the Paxos consensus algorithm. Despite the large body of literature in the field, algorithms dating back more then 15 years, and experience of our team (one of us has designed a similar system before and the others have built other types of complex systems in the past), it was significantly harder to build this system then originally anticipated. We attribute this to several shortcomings in the field:</p><ul class="g-list-style-circle"><li>There are significant gaps between the description of the Paxos algorithm and the needs of a real-world system. In order to build a real-world system, an expert needs to use numerous ideas scattered in the literature and make several relatively small protocol extensions. The cumulative effort will be substantial and the final system will be based on an unproven protocol.</li><li>The fault-tolerance computing community has not developed the tools to make it easy to implement their algorithms.</li><li>The fault-tolerance computing community has not paid enough attention to testing, a key ingredient for building fault-tolerant systems.</li></ul><p>As a result, the core algorithms work remains relatively theoretical and is not as accessible to a larger computing community as it could be. We believe that in order to make a greater impact, researchers in the field should focus on addressing these shortcomings.</p><p>In contrast, consider the field of compiler construction. Though concepts in that field are complex, they have been made accessible to a wide audience. Industrial-strength parsing tools such yacc [6] appeared not too long after the theory of parsing was well-understood. Not only are there now many front-end tools such as ANTLR [15] or CoCo/R [13]; but there are also tree-rewriting tools helping with optimizations and instruction selection, assemblers helping with binary code generation, and so forth. Thus, in this area of software engineering, an entire family of tools has emerged, making the construction of a compiler significantly easier or at least less error-prone. Disciplines within the field of compiler construction, such as parsing, which were once at the cutting edge of research, are now considered “solved” and are routinely taught at the undergraduate level in many schools.</p><p>It appears that the fault-tolerant distributed computing community has not developed the tools and know-how to close the gaps between theory and practice with the same vigor as for instance the compiler community. Our experience suggests that these gaps are non-trivial and that they merit attention by the research community.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="10-Acknowledgments" style="display: inline;"><a href="#10-Acknowledgments" class="headerlink" title="10 Acknowledgments"></a>10 Acknowledgments</h1><p>Many people at Google helped us with this project. Mike Burrows who implemented Chubby suggested that we replace 3DB with a Paxos-based system. He and Sharon Perl reviewed our designs and provided excellent feedback. They introduced us to the mechanism for handling disk corruptions and suggested that we implement master leases. Michal Cierniak ported the original state machine compiler from Perl to C++ and made substantial modifications (it is now being used elsewhere at Google as well). Vadim Furman helped us write the Chubby verification test. Salim Virji and his team were responsible for the roll-out of our system across Google data centers.</p><p>Mike Burrows, Bill Coughran, Gregory Eitzman, Peter Mckenzie, Sharon Perl, Rob Pike, David Presotto,Sean Quinlan, and Salim Virji reviewed earlier versions of this paper and provided valuable feedback.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H1   </span><h1 id="References" style="display: inline;"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Burrows, M. The Chubby lock service for loosely-coupled distributed systems. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation, pp. 335-350<br>[2] Chang, F., Dean, J., Ghemawat, S., Hsieh, W. C., Wallach, D. A., Burrows, M., Chandra, T., Fikes, A., and Gruber, R. E. Bigtable: A distributed storage system for structured data. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation, pp. 205-218<br>[3] Cristian, F. Reaching agreement on processor-group membership in synchronous distributed systems. Distributed Computing 4, 4 (1991), 175–188.<br>[4] Ghemawat, S., Gobioff, H., and Leung, S.-T. The Google file system. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (Dec. 2003), pp. 29–43.<br>[5] Gray, C., Cheriton, D. Leases: An efficient fault-tolerant mechanism for distributed file cache consistency. In Proceedings of the 12th ACM Symposium on Operating Systems Principles (1989), pp. 202–210.<br>[6] Johnson, S. C. Yacc: Yet another compiler-compiler.<br>[7] Lamport, Shostak, and Pease. The byzantine generals problem. In Advances in Ultra-Dependable Distributed Systems, N. Suri, C. J. Walter, and M. M. Hugue (Eds.), IEEE Computer Society Press. 1995.<br>[8] Lamport, L. The part-time parliament. ACM Transactions on Computer Systems 16, 2 (1998), 133–169.<br>[9] Lamport, L. Paxos made simple. ACM SIGACT News 32, 4 (Dec. 2001), 18–25.<br>[10] Lampson, B. W. How to build a highly available system using consensus. In 10th International Workshop on Distributed Algorithms (WDAG 96) (1996), Babaoglu and Marzullo, Eds., vol. 1151, Springer-Verlag, Berlin Germany, pp. 1–17.<br>[11] Lee, E. K., and Thekkath, C. A. Petal: Distributed virtual disks. In Proceedings of the Seventh International Conference on Architectural Support for Programming Languages and Operating Systems (Cambridge, MA, 1996), pp. 84–92.<br>[12] MacCormick, J., Murphy, N., Najork, M., Thekkath, C. A., and Zhou, L. Boxwood: Abstractions as the foundation for storage infrastructure. In Proceedings of the 6th Symposium on Operating Systems Design and Implementation (2004), pp. 105–120.<br>[13] Moessenboeck, H. A generator for production quality compilers. In Proceedings of the 3rd International Workshop on Compiler Compilers - Lecture Notes in Computer Science 477 (Berlin, Heidelberg, New York,<br>Tokyo, 1990), Springer-Verlag, pp. 42–55.<br>[14] Oki, Brian M., and Liskov, Barbara H. Viewstamped Replication: A New Primary Copy Method to Support Highly-Available Distributed Systems. In Proceedings of the 7th annual ACM Symposium on Principles of Distributed Computing (1988), pp. 8–17.<br>[15] Parr, T. J., and QUONG, R. W. Antlr: A predicated-ll(k) parser generator. Software–Practice and Experience<br>25, 7 (JULY 1995), 789–810.<br>[16] Prisco, R. D., Lampson, B. W., and Lynch, N. A. Revisiting the paxos algorithm. In 11th International Workshop on Distributed Algorithms (WDAG 96) (1997), pp. 111–125.<br>[17] Schneider, F. B. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys 22, 4 (1990), 299–319.<br>[18] von Neumann, J. Probabilistic logics and synthesis of reliable organisms from unreliable components. Automata Studies (1956), 43–98.</p>    <p hidden id="CurrentFileName">Paxos Made Live - An Engineering Perspective.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习 paxos。英文能力略残，所以把&lt;a href=&quot;https://pdfs.semanticscholar.org/b69c/9ea11b19ed17e253782e58b04ee2d6213579.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文&lt;/a&gt;按照规则排版之后，在网页上进行 谷歌翻译。&lt;/p&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;It is well known that fault-tolerance on commodity hardware can be achieved through replication [17, 18]. A common approach is to use a consensus algorithm [7] to ensure that all replicas are mutually consistent [8, 14, 17]. By repeatedly applying such an algorithm on a sequence of input values, it is possible to build an identical log of values on each replica. If the values are operations on some data structure, application of the same log on all replicas may be used to arrive at mutually consistent data structures on all replicas. For instance, if the log contains a sequence of database operations, and if the same sequence of operations is applied to the (local) database on each replica, eventually all replicas will end up with the same database content (provided that they all started with the same initial database state). &lt;/p&gt;
    
    </summary>
    
      <category term="共识算法" scheme="http://blog.msiter.com/categories/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="论文" scheme="http://blog.msiter.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="共识算法" scheme="http://blog.msiter.com/tags/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="paoxs" scheme="http://blog.msiter.com/tags/paoxs/"/>
    
      <category term="multi-paoxs" scheme="http://blog.msiter.com/tags/multi-paoxs/"/>
    
  </entry>
  
  <entry>
    <title>Paxos Made Simple - Leslie Lamport</title>
    <link href="http://blog.msiter.com/paxos-simple-20180726.html"/>
    <id>http://blog.msiter.com/paxos-simple-20180726.html</id>
    <published>2018-07-26T18:22:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 paxos。英文能力略残，所以把<a href="https://lamport.azurewebsites.net/pubs/paxos-simple.pdf" target="_blank" rel="noopener">论文</a>按照规则排版之后，在网页上进行 谷歌翻译。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Introduction" style="display: inline;"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The Paxos algorithm for implementing a fault-tolerant distributed system has been regarded as difficult to understand, perhaps because the original presentation was Greek to many readers [5]. In fact, it is among the simplest and most obvious of distributed algorithms. At its heart is a consensus algorithm—the “synod” algorithm of [5]. The next section shows that this consensus algorithm follows almost unavoidably from the properties we want it to satisfy. The last section explains the complete Paxos algorithm, which is obtained by the straightforward application of consensus to the state machine approach for building a distributed system—an approach that should be well-known, since it is the subject of what is probably the most often-cited article on the theory of distributed systems [4].</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="The-Consensus-Algorithm" style="display: inline;"><a href="#The-Consensus-Algorithm" class="headerlink" title="The Consensus Algorithm"></a>The Consensus Algorithm</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="The-Problem" style="display: inline;"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h3><p>Assume a collection of processes that can propose values. A consensus algorithm ensures that a single one among the proposed values is chosen. If no value is proposed, then no value should be chosen. If a value has been chosen, then processes should be able to learn the chosen value. The safety requirements for consensus are:</p><ul class="g-list-style-circle"><li>Only a value that has been proposed may be chosen,</li><li>Only a single value is chosen, and</li><li>A process never learns that a value has been chosen unless it actually has been.<br>We won’t try to specify precise liveness requirements. However, the goal is to ensure that some proposed value is eventually chosen and, if a value has been chosen, then a process can eventually learn the value.</li></ul><p>We let the three roles in the consensus algorithm be performed by three classes of agents: proposers, acceptors, and learners. In an implementation, a single process may act as more than one agent, but the mapping from agents to processes does not concern us here.</p><p>Assume that agents can communicate with one another by sending messages.We use the customary asynchronous, non-Byzantine model, in which:</p><ul class="g-list-style-circle"><li>Agents operate at arbitrary speed, may fail by stopping, and may restart. Since all agents may fail after a value is chosen and then restart, a solution is impossible unless some information can be remembered by an agent that has failed and restarted.</li><li>Messages can take arbitrarily long to be delivered, can be duplicated, and can be lost, but they are not corrupted.</li></ul><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Choosing-a-Value" style="display: inline;"><a href="#Choosing-a-Value" class="headerlink" title="Choosing a Value"></a>Choosing a Value</h3><p>The easiest way to choose a value is to have a single acceptor agent. A proposer sends a proposal to the acceptor, who chooses the first proposed value that it receives. Although simple, this solution is unsatisfactory because the failure of the acceptor makes any further progress impossible.</p><p>So, let’s try another way of choosing a value. Instead of a single acceptor, let’s use multiple acceptor agents. A proposer sends a proposed value to a set of acceptors. An acceptor may accept the proposed value. The value is chosen when a large enough set of acceptors have accepted it. How large is large enough? To ensure that only a single value is chosen, we can let a large enough set consist of any majority of the agents. Because any two majorities have at least one acceptor in common, this works if an acceptor can accept at most one value. (There is an obvious generalization of a majority that has been observed in numerous papers, apparently starting with [3].)</p><p>In the absence of failure or message loss, we want a value to be chosen even if only one value is proposed by a single proposer. This suggests the requirement:</p><p>P1. An acceptor must accept the first proposal that it receives.</p><p>But this requirement raises a problem. Several values could be proposed by different proposers at about the same time, leading to a situation in which every acceptor has accepted a value, but no single value is accepted by a majority of them. Even with just two proposed values, if each is accepted by about half the acceptors, failure of a single acceptor could make it impossible to learn which of the values was chosen.</p><p>P1 and the requirement that a value is chosen only when it is accepted by a majority of acceptors imply that an acceptor must be allowed to accept more than one proposal. We keep track of the different proposals that an acceptor may accept by assigning a (natural) number to each proposal, so a proposal consists of a proposal number and a value. To prevent confusion, we require that different proposals have different numbers. How this is achieved depends on the implementation, so for now we just assume it. A value is chosen when a single proposal with that value has been accepted by a majority of the acceptors. In that case, we say that the proposal (as well as its value) has been chosen.</p><p>We can allow multiple proposals to be chosen, but we must guarantee that all chosen proposals have the same value. By induction on the proposal number, it suffices to guarantee:</p><p>P2.<br>If a proposal with value v is chosen, then every higher-numbered proposal that is chosen has value v.</p><p>Since numbers are totally ordered, condition P2 guarantees the crucial safety property that only a single value is chosen.</p><p>To be chosen, a proposal must be accepted by at least one acceptor. So, we can satisfy P2 by satisfying:</p><p>P2a.<br>If a proposal with value v is chosen, then every higher-numbered proposal accepted by any acceptor has value v.</p><p>We still maintain P1 to ensure that some proposal is chosen. Because communication is asynchronous, a proposal could be chosen with some particular acceptor c never having received any proposal. Suppose a new proposer “wakes up” and issues a higher-numbered proposal with a different value. P1 requires c to accept this proposal, violating P2a . Maintaining both P1 and P2a requires strengthening P2a to:<br>P2b.<br>If a proposal with value v is chosen, then every higher-numbered proposal issued by any proposer has value v.</p><p>Since a proposal must be issued by a proposer before it can be accepted by an acceptor, P2b implies P2a , which in turn implies P2.</p><p>To discover how to satisfy P2b , let’s consider how we would prove that it holds. We would assume that some proposal with number m and value v is chosen and show that any proposal issued with number n &gt; m also has value v. We would make the proof easier by using induction on n, so we can prove that proposal number n has value v under the additional assumption that every proposal issued with a number in m . .(n − 1) has value v, where i . . j denotes the set of numbers from i through j. For the proposal numbered m to be chosen, there must be some set C consisting of a majority of acceptors such that every acceptor in C accepted it. Combining this with the induction assumption, the hypothesis that m is chosen implies:</p><p>Every acceptor in C has accepted a proposal with number in m . .(n − 1), and every proposal with number in m . .(n − 1) accepted by any acceptor has value v.</p><p>Since any set S consisting of a majority of acceptors contains at least one member of C , we can conclude that a proposal numbered n has value v by ensuring that the following invariant is maintained:</p><p>P2c . For any v and n, if a proposal with value v and number n is issued, then there is a set S consisting of a majority of acceptors such that either (a) no acceptor in S has accepted any proposal numbered less than n, or (b) v is the value of the highest-numbered proposal among all proposals numbered less than n accepted by the acceptors in S.</p><p>We can therefore satisfy P2b by maintaining the invariance of P2c</p><p>To maintain the invariance of P2c , a proposer that wants to issue a proposal numbered n must learn the highest-numbered proposal with number less than n, if any, that has been or will be accepted by each acceptor in some majority of acceptors. Learning about proposals already accepted is easy enough; predicting future acceptances is hard. Instead of trying to predict the future, the proposer controls it by extracting a promise that there won’t be any such acceptances. In other words, the proposer requests that the acceptors not accept any more proposals numbered less than n. This leads to the following algorithm for issuing proposals.</p><ol><li><p>A proposer chooses a new proposal number n and sends a request to each member of some set of acceptors, asking it to respond with:<br> (a) A promise never again to accept a proposal numbered less than n, and<br> (b) The proposal with the highest number less than n that it has accepted, if any.</p><p> I will call such a request a prepare request with number n.</p></li><li>If the proposer receives the requested responses from a majority of the acceptors, then it can issue a proposal with number n and value v, where v is the value of the highest-numbered proposal among the responses, or is any value selected by the proposer if the responders reported no proposals.</li></ol><p>A proposer issues a proposal by sending, to some set of acceptors, a request that the proposal be accepted. (This need not be the same set of acceptors that responded to the initial requests.) Let’s call this an accept request. This describes a proposer’s algorithm. What about an acceptor? It can receive two kinds of requests from proposers: prepare requests and accept requests. An acceptor can ignore any request without compromising safety. So, we need to say only when it is allowed to respond to a request. It can always respond to a prepare request. It can respond to an accept request, accepting the proposal, iff it has not promised not to. In other words:</p><p>P1a . An acceptor can accept a proposal numbered n iff it has not responded to a prepare request having a number greater than n.</p><p>Observe that P1a subsumes P1.</p><p>We now have a complete algorithm for choosing a value that satisfies the required safety properties—assuming unique proposal numbers. The final algorithm is obtained by making one small optimization.</p><p>Suppose an acceptor receives a prepare request numbered n, but it has already responded to a prepare request numbered greater than n, thereby promising not to accept any new proposal numbered n. There is then no reason for the acceptor to respond to the new prepare request, since it will not accept the proposal numbered n that the proposer wants to issue. So we have the acceptor ignore such a prepare request. We also have it ignore a prepare request for a proposal it has already accepted.</p><p>With this optimization, an acceptor needs to remember only the highestnumbered proposal that it has ever accepted and the number of the highestnumbered prepare request to which it has responded. Because P2c must be kept invariant regardless of failures, an acceptor must remember this information even if it fails and then restarts. Note that the proposer can always abandon a proposal and forget all about it—as long as it never tries to issue another proposal with the same number.</p><p>Putting the actions of the proposer and acceptor together, we see that the algorithm operates in the following two phases.</p><p>Phase 1.<br>    (a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.<br>    (b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, hen it responds to the request with a promise not to accept any more roposals numbered less than n and with the highest-numbered proposal if any) that it has accepted. </p><p>Phase 2.<br>    (a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v, where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.<br>    (b) If an acceptor receives an accept request for a proposal numbered n, it accepts the proposal unless it has already responded to a prepare request having a number greater than n.</p><p>A proposer can make multiple proposals, so long as it follows the algorithm for each one. It can abandon a proposal in the middle of the protocol at any time. (Correctness is maintained, even though requests and/or responses for the proposal may arrive at their destinations long after the proposal was abandoned.) It is probably a good idea to abandon a proposal if some proposer has begun trying to issue a higher-numbered one. Therefore, if an acceptor ignores a prepare or accept request because it has already received a prepare request with a higher number, then it should probably inform<br>the proposer, who should then abandon its proposal. This is a performance<br>optimization that does not affect correctness.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Learning-a-Chosen-Value" style="display: inline;"><a href="#Learning-a-Chosen-Value" class="headerlink" title="Learning a Chosen Value"></a>Learning a Chosen Value</h3><p>To learn that a value has been chosen, a learner must find out that a proposal has been accepted by a majority of acceptors. The obvious algorithm is to have each acceptor, whenever it accepts a proposal, respond to all learners, sending them the proposal. This allows learners to find out about a chosen value as soon as possible, but it requires each acceptor to respond to each learner—a number of responses equal to the product of the number of acceptors and the number of learners.</p><p>The assumption of non-Byzantine failures makes it easy for one learner to find out from another learner that a value has been accepted. We can have the acceptors respond with their acceptances to a distinguished learner, which in turn informs the other learners when a value has been chosen. This approach requires an extra round for all the learners to discover the chosen value. It is also less reliable, since the distinguished learner could fail. But it requires a number of responses equal only to the sum of the number of acceptors and the number of learners.</p><p>More generally, the acceptors could respond with their acceptances to some set of distinguished learners, each of which can then inform all the learners when a value has been chosen. Using a larger set of distinguished learners provides greater reliability at the cost of greater communication complexity.</p><p>Because of message loss, a value could be chosen with no learner ever finding out. The learner could ask the acceptors what proposals they have accepted, but failure of an acceptor could make it impossible to know whether or not a majority had accepted a particular proposal. In that case, learners will find out what value is chosen only when a new proposal is chosen. If a learner needs to know whether a value has been chosen, it can have a proposer issue a proposal, using the algorithm described above.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Progress" style="display: inline;"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h3><p>It’s easy to construct a scenario in which two proposers each keep issuing a sequence of proposals with increasing numbers, none of which are ever chosen. Proposer p completes phase 1 for a proposal number n1. Another proposer q then completes phase 1 for a proposal number n2 &gt; n1. Proposer p’s phase 2 accept requests for a proposal numbered n1 are ignored because the acceptors have all promised not to accept any new proposal numbered less than n2. So, proposer p then begins and completes phase 1 for a new proposal number n3 &gt; n2, causing the second phase 2 accept requests of proposer q to be ignored. And so on.</p><p>To guarantee progress, a distinguished proposer must be selected as the only one to try issuing proposals. If the distinguished proposer can communicate successfully with a majority of acceptors, and if it uses a proposal with number greater than any already used, then it will succeed in issuing a proposal that is accepted. By abandoning a proposal and trying again if it learns about some request with a higher proposal number, the distinguished proposer will eventually choose a high enough proposal number.</p><p>If enough of the system (proposer, acceptors, and communication network) is working properly, liveness can therefore be achieved by electing a single distinguished proposer. The famous result of Fischer, Lynch, and Patterson [1] implies that a reliable algorithm for electing a proposer must use either randomness or real time—for example, by using timeouts. However, safety is ensured regardless of the success or failure of the election.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="The-Implementation" style="display: inline;"><a href="#The-Implementation" class="headerlink" title="The Implementation"></a>The Implementation</h3><p>The Paxos algorithm [5] assumes a network of processes. In its consensus algorithm, each process plays the role of proposer, acceptor, and learner. The algorithm chooses a leader, which plays the roles of the distinguished proposer and the distinguished learner. The Paxos consensus algorithm is precisely the one described above, where requests and responses are sent as ordinary messages. (Response messages are tagged with the corresponding proposal number to prevent confusion.) Stable storage, preserved during failures, is used to maintain the information that the acceptor must remember. An acceptor records its intended response in stable storage before actually sending the response.</p><p>All that remains is to describe the mechanism for guaranteeing that no two proposals are ever issued with the same number. Different proposers choose their numbers from disjoint sets of numbers, so two different proposers never issue a proposal with the same number. Each proposer remembers (in stable storage) the highest-numbered proposal it has tried to issue, and begins phase 1 with a higher proposal number than any it has already used.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="Implementing-a-State-Machine" style="display: inline;"><a href="#Implementing-a-State-Machine" class="headerlink" title="Implementing a State Machine"></a>Implementing a State Machine</h2><p>A simple way to implement a distributed system is as a collection of clients that issue commands to a central server. The server can be described as a deterministic state machine that performs client commands in some sequence. The state machine has a current state; it performs a step by taking as input a command and producing an output and a new state. For example, the clients of a distributed banking system might be tellers, and the state-machine state might consist of the account balances of all users. A withdrawal would be performed by executing a state machine command that decreases an account’s balance if and only if the balance is greater than the amount withdrawn, producing as output the old and new balances.</p><p>An implementation that uses a single central server fails if that server fails. We therefore instead use a collection of servers, each one independently implementing the state machine. Because the state machine is deterministic, all the servers will produce the same sequences of states and outputs if they all execute the same sequence of commands. A client issuing a command can then use the output generated for it by any server.</p><p>To guarantee that all servers execute the same sequence of state machine commands, we implement a sequence of separate instances of the Paxos consensus algorithm, the value chosen by the <code>ith</code> instance being the <code>ith</code> state machine command in the sequence. Each server plays all the roles (proposer, acceptor, and learner) in each instance of the algorithm. For now, I assume that the set of servers is fixed, so all instances of the consensus algorithm use the same sets of agents.</p><p>In normal operation, a single server is elected to be the leader, which acts as the distinguished proposer (the only one that tries to issue proposals) in all instances of the consensus algorithm. Clients send commands to the leader, who decides where in the sequence each command should appear. If the leader decides that a certain client command should be the 135th command, it tries to have that command chosen as the value of the 135th instance of the consensus algorithm. It will usually succeed. It might fail because of failures, or because another server also believes itself to be the leader and has a different idea of what the 135th command should be. But the consensus algorithm ensures that at most one command can be chosen as the <code>135th</code> one.</p><p>Key to the efficiency of this approach is that, in the Paxos consensus algorithm, the value to be proposed is not chosen until phase 2. Recall that, after completing phase 1 of the proposer’s algorithm, either the value to be proposed is determined or else the proposer is free to propose any value.</p><p>I will now describe how the Paxos state machine implementation works during normal operation. Later, I will discuss what can go wrong. I consider what happens when the previous leader has just failed and a new leader has been selected. (System startup is a special case in which no commands have yet been proposed.)</p><p>The new leader, being a learner in all instances of the consensus algorithm, should know most of the commands that have already been chosen. Suppose it knows commands 1–134, 138, and 139—that is, the values chosen in instances 1–134, 138, and 139 of the consensus algorithm. (We will see later how such a gap in the command sequence could arise.) It then executes phase 1 of instances 135–137 and of all instances greater than 139. (I describe below how this is done.) Suppose that the outcome of these executions determine the value to be proposed in instances 135 and 140, but leaves the proposed value unconstrained in all other instances. The leader then executes phase 2 for instances 135 and 140, thereby choosing commands 135 and 140.</p><p>The leader, as well as any other server that learns all the commands the leader knows, can now execute commands 1–135. However, it can’t execute commands 138–140, which it also knows, because commands 136 and 137 have yet to be chosen. The leader could take the next two commands requested by clients to be commands 136 and 137. Instead, we let it fill the gap immediately by proposing, as commands 136 and 137, a special “noop” command that leaves the state unchanged. (It does this by executing phase 2 of instances 136 and 137 of the consensus algorithm.) Once these no-op commands have been chosen, commands 138–140 can be executed.</p><p>Commands 1–140 have now been chosen. The leader has also completed phase 1 for all instances greater than 140 of the consensus algorithm, and it is free to propose any value in phase 2 of those instances. It assigns command number 141 to the next command requested by a client, proposing it as the value in phase 2 of instance 141 of the consensus algorithm. It proposes the next client command it receives as command 142, and so on.</p><p>The leader can propose command 142 before it learns that its proposed command 141 has been chosen. It’s possible for all the messages it sent in proposing command 141 to be lost, and for command 142 to be chosen before any other server has learned what the leader proposed as command 141. When the leader fails to receive the expected response to its phase 2 messages in instance 141, it will retransmit those messages. If all goes well, its proposed command will be chosen. However, it could fail first, leaving a gap in the sequence of chosen commands. In general, suppose a leader can get α commands ahead—that is, it can propose commands i + 1 through i +α after commands 1 through i are chosen. A gap of up to α−1 commands could then arise.</p><p>A newly chosen leader executes phase 1 for infinitely many instances of the consensus algorithm—in the scenario above, for instances 135–137 and all instances greater than 139. Using the same proposal number for all instances, it can do this by sending a single reasonably short message to the other servers. In phase 1, an acceptor responds with more than a simple OK only if it has already received a phase 2 message from some proposer. (In the scenario, this was the case only for instances 135 and 140.) Thus, a server (acting as acceptor) can respond for all instances with a single reasonably short message. Executing these infinitely many instances of phase 1 therefore poses no problem.</p><p>Since failure of the leader and election of a new one should be rare events, the effective cost of executing a state machine command—that is, of achieving consensus on the command/value—is the cost of executing only phase 2 of the consensus algorithm. It can be shown that phase 2 of the Paxos consensus algorithm has the minimum possible cost of any algorithm for reaching agreement in the presence of faults [2]. Hence, the Paxos algorithm is essentially optimal.</p><p>This discussion of the normal operation of the system assumes that there is always a single leader, except for a brief period between the failure of the current leader and the election of a new one. In abnormal circumstances, the leader election might fail. If no server is acting as leader, then no new commands will be proposed. If multiple servers think they are leaders, then they can all propose values in the same instance of the consensus algorithm, which could prevent any value from being chosen. However, safety is preserved—two different servers will never disagree on the value chosen as the <code>ith</code> state machine command. Election of a single leader is needed only to ensure progress.</p><p>If the set of servers can change, then there must be some way of determining what servers implement what instances of the consensus algorithm. The easiest way to do this is through the state machine itself. The current set of servers can be made part of the state and can be changed with ordinary state-machine commands. We can allow a leader to get α commands ahead by letting the set of servers that execute instance i + α of the consensus algorithm be specified by the state after execution of the <code>ith</code> state machine command. This permits a simple implementation of an arbitrarily sophisticated reconfiguration algorithm.</p><p>References<br>[1] Michael J. Fischer, Nancy Lynch, and Michael S. Paterson. Impossibility of distributed consensus with one faulty process. Journal of the ACM, 32(2):374–382, April 1985.<br>[2] Idit Keidar and Sergio Rajsbaum. On the cost of fault-tolerant consensus when there are no faults—a tutorial. TechnicalReport MIT-LCS-TR-821, Laboratory for Computer Science, Massachusetts Institute Technology, Cambridge, MA, 02139, May 2001. also published in SIGACT News 32(2) (June 2001).<br>[3] Leslie Lamport. The implementation of reliable distributed multiprocess systems. Computer Networks, 2:95–114, 1978.<br>[4] Leslie Lamport. Time, clocks, and the ordering of events in a distributed system. Communications of the ACM, 21(7):558–565, July 1978.<br>[5] Leslie Lamport. The part-time parliament. ACM Transactions on Computer Systems, 16(2):133–169, May 1998.</p>    <p hidden id="CurrentFileName">paxos-simple.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习 paxos。英文能力略残，所以把&lt;a href=&quot;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文&lt;/a&gt;按照规则排版之后，在网页上进行 谷歌翻译。&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;The Paxos algorithm for implementing a fault-tolerant distributed system has been regarded as difficult to understand, perhaps because the original presentation was Greek to many readers [5]. In fact, it is among the simplest and most obvious of distributed algorithms. At its heart is a consensus algorithm—the “synod” algorithm of [5]. The next section shows that this consensus algorithm follows almost unavoidably from the properties we want it to satisfy. The last section explains the complete Paxos algorithm, which is obtained by the straightforward application of consensus to the state machine approach for building a distributed system—an approach that should be well-known, since it is the subject of what is probably the most often-cited article on the theory of distributed systems [4].&lt;/p&gt;
    
    </summary>
    
      <category term="共识算法" scheme="http://blog.msiter.com/categories/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="论文" scheme="http://blog.msiter.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="共识算法" scheme="http://blog.msiter.com/tags/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="paoxs" scheme="http://blog.msiter.com/tags/paoxs/"/>
    
  </entry>
  
  <entry>
    <title>分布网络-共识算法</title>
    <link href="http://blog.msiter.com/fbwl-gs,zsf-20180720.html"/>
    <id>http://blog.msiter.com/fbwl-gs,zsf-20180720.html</id>
    <published>2018-07-20T18:25:43.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="分布式网络" style="display: inline;"><a href="#分布式网络" class="headerlink" title="分布式网络"></a>分布式网络</h2><p>我们来大致的看一下网络的发展脚步</p><p>在1961年，麻省理工学院的L.克莱因罗克(L.Klenrock)博士发表论文《大型通讯网络的信息流》，第一次详细论述了分布式网络理论。</p><p>我们可以看到，从这个理论开始到现在也不过50多个年头，连一个世纪都没有，甚至说，L.克莱因罗克(L.Klenrock)博士(<em>互联网的创始人之一</em>)至今还在世。</p><p>不仅让我们感叹，人类的进步的速度…</p><p>之后60年代，美籍波兰人保罗·巴兰(Paul Baran)撰写多份报告，不仅系统地阐述了分布式网络理论而且提出后来网络传播的核心——“包切换”(Packet Switching)</p><a id="more"></a><p>与此同时，英国物理学家D.W.戴维斯也提出“分布式网络”理论，其原理同巴兰的构想如出一辙，唯一的区别在于命名。巴兰将拆分的、便于传送的数据称为“块”。而戴维斯经过深思熟虑，并请教语言学家后，选择了“包”(packet)这个术语，从此拆分传送数据的方式也就被称为“包切换”。另外，戴维斯构想包切换的初衷，也同巴兰为军方服务有所不同，他是想创建一个更加有效的网络系统，从而使更多的人可以利用网络进行交流。</p><p>1964年伊凡·沙日尔兰德（Ivan Sutherland）继任担任该处处长，两年后的鲍勃·泰勒（Bob Taylor）上任，他在任职期间萌发了新型计算机网络的想法，并筹集资金启动试验。在鲍勃·泰勒的一再邀请下，日后成为“阿帕网之父”的拉里·罗伯茨出任信息处理处处长。</p><p>1965年的时候，在兰德公司(Rand)的支持下，巴兰正式向美国空军提出创建分布式网络的计划。由于巴兰的想法适合军方的需要，因而受到美国国防部的高度重视。按照分布式网络的原理，由于单个节点的重要性大大降低，所以网络的任何节点遭到破坏，都不至于影响整个网络，而且节点越多，网络的安全性能就越高。</p><p>这个包切换，网络专家尼葛洛庞帝(Nicholas Negropoute)对包切换及网络传播原理做了如下解释：</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>一个个信息包各自独立，其中包含了大量讯息，每个信息包都可以经由不同的传输路径，从甲地传输到乙地。现在，假定我要从波士顿把这段文字传到旧金山给你。每个信息包……基本上都可以采取不同的路径，有的经由丹佛，有的经由芝加哥，有的经由达拉斯，等等。假设信息包在旧金山以此排序时，却发现6号信息包不见了。6号信息包究竟出了什么事？军方拨款资助阿帕网时,正值冷战高峰。核战的威胁让人忧心忡忡。因此，假设6号信息包经过明尼阿波利斯时,敌人的飞弹正好落在这个城市。6号信息包因此不见了。其他的信息包一确定它不见了，就会要求波士顿重新传输一次(这次不会再经过明尼阿波利斯了)。也就是说，因为我总是有办法可以找到可用的传输途径，假如要阻止我把讯息传输给你，敌人必须扫荡大半个美国。没错，在寻找可用的传输路径时(假如越来越多城市被敌人摧毁)，系统的速度就会减慢，但系统不会灭亡。了解这个道理非常重要，因为正是这种分布式体系结构令互联网能像今天这样三头六臂。无论是通过法律还是炸弹，政客都无法控制整个网络。讯息还是传提交去了，不是经由这条路，就是走另一条路出去。</p></em>                                </div>        <p>有了这些理论的支持，以及政府的介入。</p><p>1967年，罗伯茨来到高级研究计划署ARPA，着手筹建“分布式网络”。人员调度和工程设计很顺利，不到一年，就提出阿帕网的构想。随着计划的不断改进和完善，罗伯茨在描图纸上陆续绘制了数以百计的网络连接设计图，使之结构日益成熟。</p><p>1968年，罗伯茨提交研究报告《资源共享的计算机网络》，其中着力阐发的就是让“阿帕”的电脑达到互相连接，从而使大家分享彼此的研究成果。根据这份报告组建的国防部“高级研究计划网”，就是著名的“阿帕网”，拉里·罗伯茨也就成为“阿帕网之父”。</p><p>1969年底，阿帕网正式投入运行。<br>最初的“阿帕网”，由西海岸的4个节点构成。第一个节点选在加州大学洛杉矶分校（UCLA），因为罗伯茨过去的麻省理工学院同事L.克莱因罗克教授，正在该校主持网络研究。第二个节点选在斯坦福研究院（SRI），那里有道格拉斯·恩格巴特（D.Engelbart）等一批网络的先驱人物。此外，加州大学圣巴巴拉分校（UCSB）和犹他大学（UTAH）分别被选为三、四节点。这两所大学都有电脑绘图研究方面的专家，而泰勒之前的信息处理技术处处长伊凡·泽兰教授，此时也任教于犹他大学。</p><p>我们可以看到这就是最初的互联网的雏形，它本身就是 peer to peer的分布式网络。</p><p>ARPA网无法做到和个别计算机网络交流，这引发了研究者的思考。根据诺顿的看法，他的设计需要太多的控制和太多的网络中机器设备的标准化。因此，1973年春，文顿·瑟夫和鲍勃·康（Bob Kahn）开始思考如何将ARPA网和另外两个已有的网络相连接，尤其是连接卫星网络（SAT NET）和基于夏威夷的分组无线业务的ALOHA网（ALOHA NET）瑟夫设想了新的计算机交流协议，最后创造出传送控制协议／互联网协议（TCP/IP）。</p><p>1975年，ARPA网被转交到美国国防部通信处（Defense Department Communicationg Agence）。此后ARPA网不再是实验性和独一无二的了。大量新的网络在1970年代开始出现，包括计算机科学研究网络（CSNET，Computer Science Research Network），加拿大网络（CDnet，Canadian Network），因时网（BITNET，Because It’s Time Network）和美国国家自然科学基金网络（NSFnet，National Science Foundation Network）。最后一个网络最终将在它自身被商业网络取代前代替ARPA网作为互联网的高速链路。</p><p>1982年中期ARPA网被停用，原先的交流协议NCP被禁用，只允许使用Cern的TCP/IP语言的网站交流。1983年1月1日，NCP成为历史，TCP/IP开始成为通用协议。</p><p>1983年ARPA网被分成两部分，用于军事和国防部门的军事网（MILNET）和用于民间的ARPA网版本。</p><p>1985年成为TCP/IP协议突破的一年，当时它成为UNIX操作系统的组成部分。最终将它放进了Sun公司的微系统工作站。</p><p>当免费的在线服务和商业的在线服务兴起后，例如Prodigy、FidoNet、Usenet、Gopher等，当NSFNET成为互联网中枢后，ARPA网的重要性被大大减弱了。系统在1989年被关闭，1990年正式退役。</p><p>另外，咱们现在这种 服务端-客户端的方式是从80年代到90年代，开始流行的。当时大部分文件传输还是依靠电话线，使用FTP或者Usenet网络。90年代后，新的数据压缩技术出现，例如 MP3，MPEG。在此背景下，Napster 出现了。用户可以免费下载 Napster 客户端，然后从别人那里下载 MP3 文件，同时自己也作为一台服务器，供别人下载。Napster 有一台中心服务器，向所有用户提供文件目录服务，客户想下载音乐时，需要先到这台中心服务器上查询哪些客户端拥有这首音乐，然后直连到那台机器下载。不到一年时间，它的用户量达到100万，两年时间不到，金属乐队起诉这家公司。2001年七月，Napster 被关闭，此时距它成立还不到三年时间。</p><p>我们可以来看看虽然，Napster服务是以p2p网络以基础，但是它依靠中心节点来存储索引，所以这也是为什么 Napster 容易被关闭的原因。</p><p>在 2000年的时候，Gnutella出现，它向与自己直接连接的节点发起查询，被查询的结点再去查询与自己连接的节点，如此递归下去，直到查询到为止。尽管它没有直接查询中心节点有效率，但它不再依赖一个中心化的索引节点。</p><p>并且与此同时，Freenet在2000年也开启了。Freenet 是一个内容发布和沟通平台，专为抵御内容审查而设计。在 Freenet 网络中，任何人都可以在上面自由发表言论，做自己想做的网站，传自己想传的资源。Freenet 开启了暗网时代！</p><p>在2001年，诸多肥宅的希望-Bittorrent!降世!!</p><p>Bittorrent 是基于 TCP/IP 协议开发的。发布文件之前需要制作种子文件，种子是一个记录了下载文件的服务器信息的索引文件。BitTorrent 协议下载的特点是，下载的人越多，提供的带宽也越多，下载速度就越快。同时，拥有完整文件的用户也会越来越多，文件的“寿命”也就越长。<br>BitTorrent 引入了分布式哈希技术（ DHT ），相比泛洪查询技术，DHT 效率显著提升。</p><p>2009年bitcoin出现，在此之前从未让这么多民众开始关心这些东西。它的出现，可以说是一场革命。</p><p>Namecoin，2011年。Namecoin 是一个去中心化的域名系统，功能和传统的域名供应商类似，用来解析域名。我们现在使用的域名系统是分布式而非去中心化的，所以理论上强权是可以做到控制整个域名系统，从而控制互联网的访问。而 Namecoin 是去中心化的，理论上是没有人可以关闭他的。Namecoin 提供的域名后缀是 .bit，目前主流浏览器都还不支持它，要想使用就需要安装插件。可以说 Namecoin 是第一个非货币的区块链应用。早期以太坊的创始人就提到了用区块链来做 DNS 系统的可能性。<br>所以愣着干嘛，赶紧把 google.bit baidu.bit mi.bit 搞下来～  等升值去吧</p><p>Diaspora，2012年。Diaspora 将自己定位为开源的个人 Web 服务器和去中心化的社交网络。2010年在 Kickstarter 上筹资20万美金后，项目正式成立，并迅速发布了一个测试版本，到了2012年，稳定的社区版才算正式发布。Diaspora 的目标之一就是替代Facebook。Facebook 是一个集中式的平台，用户使用它时，只需要一台 Web 浏览器即可，而 Diaspora 是需要专门下载自己的程序客户端的，这也使得推广起来比较难。另外，有的人其实根本不关心集中式平台带来的隐私问题。</p><p>DSNs, Descentralised Storage Networks。 去中心化存储网络的背后思想是将云存储转变成一种带有激励措施的去中心化存储系统，并向愿意提供存储空间的矿工节点发放代币。经济激励是关键，它是系统可持续运行的重要保障。目前代表作有 IPFS。在比特币这样的区块链上存储数据，效率非常低，并且成本高，而在 IPFS 上，我们可以很方便的存储例如 PDF、mp4 等文件。</p><p>以上就是P2P网络的发展历史，我们可以将它们分为4个阶段</p><ol><li>依赖中心索引系统的 Napster 时代</li><li>使用泛洪查询，摆脱中心索引的 Gnutella 的时代</li><li>使用分布式哈希（DHT）的 BitTorrent</li><li>带激励的分布式存储</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="共识问题" style="display: inline;"><a href="#共识问题" class="headerlink" title="共识问题"></a>共识问题</h2><p>区块链核心价值就在于实现了去中心化的价值传输。那么区块链是如何做到这种价值传输的呢，很显然共识机制起到了决定性作用，今天我们就来深入讲解共识机制背后的原理及其发展。</p><p>首先我们来看一个我们不能绕开的问题，“拜占庭将军问题”，这个问题，首次是由 <a href="https://en.wikipedia.org/wiki/Leslie_Lamport" target="_blank" rel="noopener">Leslie Lamport</a>等人在1982年在他的同名论文<a href="https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fbyz.pdf" target="_blank" rel="noopener">The Byzantine Generals Problem</a> 中提到。Fischer, Lynch 和 Patterson在1985年发表的论文中提出了可以说是最重要的分布式系统定理：FLP不可能定理（在异步通信场景，即使只有一个进程失败，也没有任何算法能保证非失败进程达到一致性）；2000年，EricBrewer教授又进一步提出了CAP猜想：一致性、可用性和分区容错性三者无法在分布式系统中被同时满足，并且最多只能满足其中两个；2002年，Lynch与其他人证明了Brewer的猜想，从而把CAP上升为一个定理。这期间和之后，涌现了一些著名的分布式一致性算法，如LeslieLamport在1989年提出的Paxos算法，1999年Castro和Liskov提出的PBFT算法等。直到比特币采用POW进行记账后，共识算法才真正进入到了大众的视野里。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="共识资料" style="display: inline;"><a href="#共识资料" class="headerlink" title="共识资料"></a>共识资料</h3><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="FLP不可能原理" style="display: inline;"><a href="#FLP不可能原理" class="headerlink" title="FLP不可能原理"></a>FLP不可能原理</h4><p>任何问题一般都存在一个理论上的下限（最坏的情况），那么对于分布式系统的共识问题，其理论上的解是什么呢？经过科学家的证明，异步分布式系统的共识问题的通用解决方法是：无解，也就是说即便是在网络通信可靠的情况下，可扩展的分布式系统的共识问题是无解的。这个定理由Fischer，Lynch和Patterson三位科学家于1985年发表的论文中给出了证明，也叫做<a href="https://blog.csdn.net/chen77716/article/details/27963079" target="_blank" rel="noopener">FLP不可能原理</a>。这个定理也告诉人们不要试图去设计一套在任意场景下都适用的共识算法，否则等同于浪费时间。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="CAP原理" style="display: inline;"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h4><p>CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ul class="g-list-style-circle"><li>一致性（Consistence） （等同于所有节点访问同一份最新的数据副本）</li><li>可用性（Availability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）</li><li>分区容错性（Partition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择[3]。）</li></ul><p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。</p><p>理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p><p>此定理也是由FLP定理证明的作者之一的Lynch给出证明。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="BASE原理" style="display: inline;"><a href="#BASE原理" class="headerlink" title="BASE原理"></a>BASE原理</h4><p>BASE是对CAP原理中一致性和可用性权衡以后的结果：</p><p>Base Available：基本可用性，是指在系统的部分节点出现故障以后，允许损失一部分可用性；</p><p>Soft state：软状态，允许系统中的数据存在中间状态，允许不同节点之间的数据副本的同步过程存在延迟；</p><p>Eventually consistent：最终一致性，是指系统中的数据，在经过一定的时间以后会最终达到一致状态，也就是降低一致性要求，不要求实时的强一致性。</p><p>比特币区块链就是一个很好的例子，在区块链延长的过程中，有可能会出现分叉，不同的节点上区块不一样（不一致），但是经过一定时间以后，随着所有节点都切换到最长的主链，分叉的情况就会消失（最终一致）。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="拜占庭容错" style="display: inline;"><a href="#拜占庭容错" class="headerlink" title="拜占庭容错"></a>拜占庭容错</h3><p>我们现在来看一下，拜占庭容错，到底讲了什么？</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>一组拜占庭将军分别各率领一支军队共同围困一座城市。为了简化问题，将各支军队的行动策略限定为进攻或撤离两种。因为部分军队进攻部分军队撤离可能会造成灾难性后果，因此各位将军必须通过投票来达成一致策略，即所有军队一起进攻或所有军队一起撤离。因为各位将军分处城市不同方向，他们只能通过信使互相联系。在投票过程中每位将军都将自己投票给进攻还是撤退的信息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以知道共同的投票结果而决定行动策略。</p></em>                                </div>        <p>要让这个问题有解，有一个十分重要的前提，那就是信道必须是可靠的。如果信道不能保证可靠，那么拜占庭问题无解。关于信道可靠问题，会引出两军问题。两军问题的结论是，在一个不可靠的通信链路上试图通过通信以达成一致是基本不可能或者十分困难的。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="两军问题" style="display: inline;"><a href="#两军问题" class="headerlink" title="两军问题"></a>两军问题</h4><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/Two_Generals_Problem.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/Two_Generals_Problem.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">两军问题</figcaption></figure></p><p>白军驻扎在沟渠里，蓝军则分散在沟渠两边。白军比任何一支蓝军都更为强大，但是蓝军若能同时合力进攻则能够打败白军。他们不能够远程的沟通，只能派遣通信兵穿过沟渠去通知对方蓝军协商进攻时间。是否存在一个能使蓝军必胜的通信协议，这就是两军问题。</p><p>看到这里您可能发现两军问题和拜占庭将军问题有一定的相似性，但我们必须注意的是，通信兵得经过敌人的沟渠，在这过程中他可能被捕，也就是说，两军问题中信道是不可靠的，并且其中没有叛徒之说，这就是两军问题和拜占庭将军问题的根本性不同。</p><p>倘若1号蓝军（简称1）向2号蓝军（简称2）派出了通信兵，若1要知道2是否收到了自己的信息，1必须要求2给自己传输一个回执，说“你的信息我已经收到了，我同意你提议的明天早上10点9分准时进攻”。</p><p>然而，就算2已经送出了这条信息，2也不能确定1就一定会在这个时间进攻，因为2发出的回执1并不一定能够收到。所以，1必须再给2发出一个回执说“我收到了”，但是1也不会知道2是否收到了这样一个回执，所以1还会期待一个2的回执。</p><p>虽然看似很可笑，但在这个系统中永远需要存在一个回执，这对于两方来说都并不一定能够达成十足的确信。更要命的是，我们还没有考虑，通信兵的信息还有可能被篡改。由此可见，经典情形下两军问题是不可解的，并不存在一个能使蓝军一定胜利的通信协议。</p><p>不幸的是，两军问题作为现代通信系统中必须解决的问题，我们尚不能将之完全解决，这意味着你我传输信息时仍然可能出现丢失、监听或篡改的情况。但我们能不能通过一种相对可靠的方式来解决大部分情形呢？这需要谈到TCP协议。事实上，搜索“两军问题与三次握手”，您一定可以找到大量与TCP协议相关的内容</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/tcp shake hands.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/tcp shake hands.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">TCP 握手协议</figcaption></figure></p><p>TCP协议中，A先向B发出一个随机数x，B收到x了以后，发给A另一个随机数y以及x+1作为答复，这样A就知道B已经收到了，因为要破解随机数x可能性并不大；然后A再发回y+1给B，这样B就知道A已经收到了。这样，A和B之间就建立一个可靠的连接，彼此相信对方已经收到并确认了信息。</p><p>而事实上，A并不会知道B是否收到了y+1；并且，由于信道的不可靠性，x或者y都是可能被截获的，这些问题说明了即使是三次握手，也并不能够彻底解决两军问题，只是在现实成本可控的条件下，我们把TCP协议当作了两军问题的现实可解方法。</p><p>解决方法，可参考<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E7%BA%8F%E7%B5%90" target="_blank" rel="noopener">量子纏結</a>,量子信道。</p><p>所以，在这种情况下，我们必须默认，信道是安全的，才可以继续去看待拜占庭容错这个问题。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="拜占庭容错问题" style="display: inline;"><a href="#拜占庭容错问题" class="headerlink" title="拜占庭容错问题"></a>拜占庭容错问题</h4><p>回到刚才的问题，我们可以看出来，问题在于，将军中可能出现叛徒，他们不仅可能向较为糟糕的策略投票，还可能选择性地发送投票信息。假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。</p><p>由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。</p><p>假始那些忠诚（或是没有出错）的将军仍然能通过多数决定来决定他们的战略，便称达到了拜占庭容错。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。</p><p>上述的故事映射到计算机系统里，将军便成了计算机，而信差就是通信系统。虽然上述的问题涉及了电子化的决策支持与信息安全，却没办法单纯的用密码学与数字签名来解决。因为不正常的电压仍可能影响整个加密过程，这不是密码学与数字签名算法在解决的问题。因此计算机就有可能将错误的结果提交去，亦可能导致错误的决策。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="拜占庭容错论文证明" style="display: inline;"><a href="#拜占庭容错论文证明" class="headerlink" title="拜占庭容错论文证明"></a>拜占庭容错论文证明</h4><p>Lamport在其论文中证明：假设将军总数为N，叛变的将军数为f，则在N &gt; 3f 时，上述的拜占庭将军问题可以解决，将军达成共识的时间复杂度为O(N^(f+1))，即指数级的复杂度。</p><p>接下来，让我们来推算下这个容错。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>假设总共有3个将军A，B，C，其中1个将军叛变，按照上面的结论，因为不满足N &gt;= 3f + 1的条件，因此不可能达成一致：</p><p>假设A是叛变者同时也是提案者，他派出两名信使分别告诉B说进攻，告诉C说防守，结果最终C会得到两份矛盾的消息：A的信使告诉他说防守，但是B的信使又告诉他说进攻，无法形成共识；</p><p>假设叛变的将军是A，但提案者是B，B派出信使告诉A和C某日某时某刻发起进攻，但是A收到消息后可以篡改，他可以告诉C说收到的是防守的指令，同样无法达成共识；</p><p>如果加1名将军，总共A，B，C，D四名将军，同样只有1名将军叛变，此时满足N &gt;= 3f + 1的条件，我们再来验证看是否能达成一致：</p><p>假设A是提案者，同时也是叛徒，此时无论他怎么安排，剩余的3名将军中总会有至少2名的将军得到相同的指令，假设B和C得到的是A发出的进攻指令，而D得到的是A发出的防守的指令，根据少数服从多数的原则，最终B，C，D都会达成共识：</p><p>D收到A的防守指令，但是收到B和C的进攻指令，少数服从多数，D认为要进攻；</p><p>B收到A和C的进攻指令，收到D的防守指令，少数服从多数，B也选择进攻；</p><p>C收到A和B的进攻指令，收到D的防守指令，同样C也决定进攻；</p><p>最终B，C，D都进攻，A的诡计无法得逞。</p></em>                                </div>        <p>通过上面的简单验证，我们已经了解到N &gt;= 3f + 1确实能做到存在拜占庭节点的分布式系统的共识，换句话说PBFT算法最多可以容许不超过(N-1) / 3个问题节点。作者Lamport凭借他在分布式系统共识算法上的杰出成绩，获得了2013年的图灵奖。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="PAXOS-共识算法" style="display: inline;"><a href="#PAXOS-共识算法" class="headerlink" title="PAXOS 共识算法"></a>PAXOS 共识算法</h3><p>paxos算法是由Leslie Lamport于1990年提出的一种非拜占庭模型的分布式系统共识算法，对的就是提出拜占庭问题的大牛，自己提出的解答。</p><p>为了描述算法，Lamport虚拟了一个希腊城邦paxos（这也是算法名字的由来），这个岛按照议会民主制的政治模式制订法律，但是没有人愿意将自己的全部时间和精力放在这种事情上。所以无论是议员，议长或者传递纸条的服务员都不能承诺别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。但是这里假设没有拜占庭将军问题（Byzantine failure，即虽然有可能一个消息被传递了两次，但是绝对不会出现错误的消息）；只要等待足够的时间，消息就会被传到。另外，Paxos 岛上的议员是不会反对其他议员提出的决议。</p><p>paxos算法的推导过程理解起来有一定困难，但是从操作层面讲，paxos解决共识的思路其实并不难。</p><p>首先算法将网络中的节点划分为3种角色：提案者，接受者和学习者。</p><ul class="g-list-style-circle"><li>提案者：负责提出提案，这里提案可以是任何可以达成共识的东西，比如某个要写入DB的值，一条日志等等；</li><li>接受者：接收提案，确定接受还是拒绝提案；</li><li>学习者：获取并同步最终选择的提案；</li></ul><p>提案是一个由提案编号和提案值组成的pair，即[proposalNo, proposalValue]，一个提案被半数以上的接受者接受即认为达成共识。提案编号是最终能达成共识的关键，每个接受者都会记录已响应过的提案的最大编号，并且承诺不会接受比此提案号小的提案。</p><p>具体操作时，paxos可以分为两个阶段：</p><p>第一阶段：准备阶段，提案者选择一个提案号，发送提案给接受者，试探能否得到半数以上接受者的响应；<br>第二阶段：如果第一阶段收到超过半数的接受者的响应，则提交提案，如果能够得到半数以上接受者的响应，则共识完成；</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="paxos算法推导过程" style="display: inline;"><a href="#paxos算法推导过程" class="headerlink" title="paxos算法推导过程"></a>paxos算法推导过程</h4><p>paxos算法最初的论文被公认为是晦涩难懂，后来作者Lamport又发布了<a href="https://www.microsoft.com/en-us/research/publication/paxos-made-simple/" target="_blank" rel="noopener">《paxos made simple》</a>，用更加容易理解的方式对paxos做了阐述。</p><p>论文中通过从简单到复杂逐步添加约束条件的方式来论证其共识算法。虽然作者已经做了简化，但毕竟还是比较学术化，理解论文中提出的几个约束条件还是有一定的困难，详细的过程读者可以自行阅读论文。</p><p>paxos算法的论证过程虽然比较难理解，但是实际的操作过程却比较简单，网上有人用一个形象的例子来说明paxos达成共识的过程：</p><p>假设有2个商人P1和P2想从政府买块地，商人想要最终拿下这块地，需要经过3个政府官员A1，A2和A3的审批，只有经过2个以上的官员同意，才能最终拿下地皮，现在的目标是：最终只能有一个商人拿到地。另外假设商人要想通过官员的审批，必须给一定数量的贿赂费。</p><p>我们看看这样一个场景下，如何达成共识（选定一个商人把地批给他）。</p><p>拿地是一件争分夺秒的事情，于是商人P1和P2开始准备了：</p><ol><li>假设P1的行动快一些，他很快找到了官员A1和A2，告诉两人只要批了地就给100W的感谢费，两个官员很高兴，告诉P1回去拿钱吧；<br><strong>注：这一步实际上是P1在进行paxos算法中的准备阶段；</strong></li><li>商人P2在P1之前先找了官员A3，告诉他只要批了地就给他200W，A3愉快的接受了；</li><li>P2又跑到官员A1和A2那，承诺只要批地，就给200W，因为这份费用比此前P1承诺的高，于是贪财的官员A1和A2变卦了；<br><strong>注：以上两步是P2在进行paxos的准备阶段；</strong></li><li>商人P1此前已经初步贿赂A1和A2成功，于是满心欢喜的拿着准备好的钱找到了A1和A2，结果却是A1和A2都告诉他：对不起，MrXX，就在刚刚有人承诺了200W，你是个聪明人，你懂得该怎么做的。商人P1很是郁闷，告诉A1和A2：容我想想再给答复；<br><strong>注：以上P1拿钱给A1和A2，对应与paxos算法的提交阶段，因为此前P1已经得到了3位官员中2位的同意；</strong></li><li>就在P1还在犹豫要不要提高贿赂费的时候，商人P2按之前承诺的向A1和A2的账户分别打入200W，于是A1，A2拿钱办事，批准通过，因为超过半数的官员审批通过，于是在政府网站上向大众公布P2最终拿地成功，所有人都知道了这个结果。</li></ol><p>注意上面的过程中的一个问题：假设上面第（4）步中P1被拒绝以后，立刻向官员承诺一个更高的费用，那么当商人P2拿着钱到A1和A2时，同样也会被拒绝，于是P2又可能会抬价，这样交替下去就可能造成死循环，这就是paxos算法中的活锁问题。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/20180626115459183.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/20180626115459183.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">paxos 算法交互图</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="paxos-算法优化" style="display: inline;"><a href="#paxos-算法优化" class="headerlink" title="paxos 算法优化"></a>paxos 算法优化</h4><p>paxos算法有很多变种和优化算法，这里只说一下multi paxos算法。</p><p>之前提到paxos算法存在活锁的问题：一个提案者提案被拒以后用更高的提案，另一个提案者发现被提案被拒以后也增加提案编号，从而形成死循环，造成活锁</p><p>multi paxos算法对paxos进行了优化，引入leader这个角色以避免活锁问题。首先选举出一个节点作为leader，之后所有的提案先提交给leder节点，因为通过leader可以控制提案提交进度，从而避免活锁发生。</p><p>考虑前面商人买地的那个例子：此时官员们不直接和商人碰面，而是由官员指定一个总代理，啥事情都先跟代理说，再由代理统一汇报。于是P1跑到代理那承诺说：只要能批，咱就给领导100W酬劳，但是代理可以选择不立刻就去把这事给官员汇报，他可以等一等，结果不久后P2来承诺说事成之后200W，代理就可以选择报价高的拿给官员审批。</p><p>可以参考paxos和multi paxos算法的流程图仔细体会一下：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2018062620592854.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2018062620592854.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">paxos 算法交互图</figcaption></figure><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/20180626210646267.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/20180626210646267.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">multi paxos 算法交互图</figcaption></figure></p><p>从图中可以看到最大的区别在于，multi paxos算法没有了第一阶段（prepare阶段），而是直接由leader发送提案（直接进行第二阶段），如果收到半数以上的acceptor的应答就达成共识。</p><p>引入leader节点虽然可以解决活锁问题，但是又引出其他一些问题：比如leader应该如何选举产生等等。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="paxos-算法总结" style="display: inline;"><a href="#paxos-算法总结" class="headerlink" title="paxos 算法总结"></a>paxos 算法总结</h4><p>paxos是CFT类共识算法，不考虑拜占庭错误即节点可能作恶的情况；</p><p>paxos算法将节点分成三个角色：提案者（proposer），接受者（acceptor）和学习者（learner）</p><p>paxos算法分成两个阶段来完成共识：</p><ol><li>准备阶段：提案者发出提案，试探是否能得到半数以上acceptor的同意；</li><li>提交阶段：如果提案在准备阶段得到半数以上的支持，则尝试提交此提案，如果响应的acceptor超过半数以上，则此提案被选定，完成共识；否则提案者需要新选定一个提案编号重新进入准备阶段；</li></ol><p><strong><br>在这里，我们有必要解释一下 CFT类，其实分布式系统的共识算法主要分为： CFT算法（Crash falut）和BFT（Byzantine fault）算法。CFT算法主要解决网络中节点可能出错（比如宕机），但是节点不会作恶（比如伪造数据）的情况下节点之间如何达成共识，而BFT算法则针对网络中可能存在节点作恶的情况下节点间达成共识的方法。</strong></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="RAFT-共识算法" style="display: inline;"><a href="#RAFT-共识算法" class="headerlink" title="RAFT 共识算法"></a>RAFT 共识算法</h3><p>结合咱们刚才学习的 paxos 共识算法，在后面我们提到的 multi paxos算法的leader选举问题，raft给出了答案。它是一种paxos改进算法。它有许多的开源参考实现，具有 GO,C++,Java和Sacle的完整规范实现。更多的实现可以查看<a href="https://raft.github.io/" target="_blank" rel="noopener">The Raft Consensus Algorithm</a>,具体的实现可以查阅 <a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf" target="_blank" rel="noopener">In Search of an Understandable Consensus Algorithm</a></p><p>raft是 paxos 的改进方法，所以他是 CFT类，在他的算法中，他的容错率为 n &gt; 2f即可，也就是说，有超过一半的节点进行了统一，那么就说明完成了共识操作了。因为不存在做恶的节点。</p><p>在这里，我们就不想进行这个验证了。大家可以思考一下。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="角色划分" style="display: inline;"><a href="#角色划分" class="headerlink" title="角色划分"></a>角色划分</h4><p>raft 把节点分为三种角色，</p><ul class="g-list-style-circle"><li>leader: 负责Client交互和log复制，同一时刻系统中最多存在1个</li><li>follower: 被动响应leader请求RPC，从不主动发起请求RPC</li><li>candidate: 由Follower向Leader转换的中间状态</li></ul><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/20140804203847296.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/20140804203847296.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">server states - 节点的状态</figcaption></figure> </p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Terms" style="display: inline;"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h4><p>众所周知，在分布式环境中，“时间同步”本身是一个很大的难题，但是为了识别“过期信息”，时间信息又是必不可少的。Raft为了解决这个问题，将时间切分为一个个的Term，可以认为是一种“逻辑时间”。如下图所示：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/20140804203911429.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/20140804203911429.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">term 示意图</figcaption></figure> </p><ol><li>每个Term至多存在1个Leader</li><li>某些Term由于选举失败，不存在Leader</li><li>每个Server本地维护currentTerm</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="选举过程" style="display: inline;"><a href="#选举过程" class="headerlink" title="选举过程"></a>选举过程</h4><p>在开始启动之初，所有的节点都以 follower 角色启动，如果某个 follower 不想听从 领导者意见了，想起义。那么就把自己的状态修改为 candidate 状态，并且向其他的节点发起投票请求，我想当leader，其他的节点回复他的请求。如果大多数的节点都进行了投票，该 node 就会再次修改状态 从 candidate -&gt; leader. </p><p>以上的过程就被称为 选举过程。</p><p><strong>接下来，我们来看一下实际中 raft 操作。</strong></p><p>我们假设存在三个节点，Nodea，Nodeb，Nodec，raft 会给每一个节点都设置两个 <code>timeout settings</code>，也就是时间超时设置. 第一个时间的超时是 <code>election timeout</code>,也就是选举超时，如果达到这个时间，节点就会由follower转换为 candidate，也就是咱们之前说的<code>起义</code>。其中 在 raft中，这个选举超时的值设置为150ms和300ms之间的随机值。在达到时间超时之后，节点会转换身份为 candidate，并且将自己的 term 增加1，我们可以理解为 要换代了，进行国号的修改。另外，默认的 转换身份的节点会给自己投上一票～然后向其他的follwer节点发送所有选票的请求(大家支持支持我吧～)。<strong>此时我们假设NodeA时间超时了，成为了candidate，并且更改了 term为1，并且NodeA 给自己投上一票</strong><br>接下来，收到消息的 follower，也就是NodeB和NodeC，要确认国号，也就是 term 为 1 的这个朝代内，他没有投票过！之后他会针对为这个 candidate 即 Nodea 进行投票～并且在此之后，follower 节点即 Nodeb，Nodec重置自己的 <code>election timeout</code>.<br>一旦 candidate即Nodea 获得了大多数的支持票之后，它就成为了 leader 起义完成。</p><p>随后的时间里，leader会对他的follower 通过心跳超时<code>heartbeat timeout</code>的方式发送互动消息。这里我们就接触到了第二个 时间超时。follower 会在接收到消息之后，重置他的选举超时时间，并进行回复。</p><p>这种情况会一直存在，直到 leader Nodea 死去（死机，宕机），接下来，选举超时的节点，有可能是 Nodeb，有可能是 Nodec，会重复以上选举超时，进行选举的操作。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>要求，在一个term下只能存在一个 leader。 （一个国号下只能存在一个领导人）</p></em>                                </div>        <p><strong>那么如果出现了！两个follower 在同一个时刻成为了 candidate 那怎么办？</strong></p><p>这种情况我们称为 分裂投票，好的，我们接下来进行一次分裂投票吧。</p><p>在这个时候我们在加入的一个 Noded。假设此时。 Nodea 和 Noded，<code>timeout settings</code> 在同一个时刻进行了起义，他们都会成为 candidate，他们定国号都为 term 2. 他们向 node bc 发送所有选票请求。因为 时间先后的顺序，bc只能为同一个 term2 朝代内的一个节点投票，所有最后 a d 他们选票都是 2.所以进入第二次超时投票，因为超时时间是随机的额，所以肯定会最终出现一个领导。当然 term2 这个朝代内就不存在领导了～</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="日志复制" style="display: inline;"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p>此时基本的流程就是， 客户端发送一个提案（值）给 leader ，leader 将提案追加到log中，将日志中的值广播给他的 follower，大于一半的 follower 给予肯定反馈，那么 leader 确认提案。<br>接下来， leader 告诉会再次发送请求告诉所有的 follower ，刚才的提案已经提交了。所有的follower，此时该集群内就现在的系统状态达成了共识。这个过程叫做 日志复制</p><p><strong>我们来看一下 raft内的日志复制的做法吧</strong></p><p>还是 Node abc。三个节点，其中 Nodea为leader。</p><p>我们的客户端向 Nodea发送更改，例如为5。发送给leader nodea，nodea不会立马发布，他会把这个值放置在日志中。然后再下一次心跳超时消息时，把值带给他的follower。如果大多数的粉丝同意这个值，nodea就会把这个值，设置为提交，并修改 nodea节点值。并把这个响应结果返回给客户端。其中设置为提交的这个消息会在下一次的心跳超时消息时传递给 其他的 follower。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="raft-网络分区" style="display: inline;"><a href="#raft-网络分区" class="headerlink" title="raft 网络分区"></a>raft 网络分区</h4><p>raft 可以在网络分区同样适用。假设我们此时有 5个节点 node abcde，其中 ab为一个分区(a为leader)，cde为一个分区(c为leader)。</p><p>我们添加使用两个客户端尝试更新这两个leader。</p><p>假如此时，我们向A发送一个 消息，A会向他的 follower B 发送消息，但是因为他的个数达不到满足，所以他的消息状态始终为 为提交。<br>此时，我们向C发送一个消息，它最终会因为拥有两个 follower而达到消息最终确定。</p><p>此时我们来 <strong>治愈分区</strong>.</p><p>NodeA 会看到的更高的 term，而停止。节点A和B都将回滚他们未提交条目并且匹配到最新的leader的条目。</p><p>这个时候整个 网络达成一致～</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="raft-总结" style="display: inline;"><a href="#raft-总结" class="headerlink" title="raft 总结"></a>raft 总结</h4><p>raft 算法的容错率为 2f &lt; n, 原因是 它并没有把做恶的节点这种情况算入，也就是他只针对 节点死机宕机的情况进行了处理。</p><p>其他的特性，我们在讲完 PBFT 之后，会与 PBFT 一起进行对比查看。</p><p><strong>！！！！！都是虚的！！！！！   <a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">raft 动画演示</a></strong></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="PBFT-算法" style="display: inline;"><a href="#PBFT-算法" class="headerlink" title="PBFT 算法"></a>PBFT 算法</h3><p>PBFT是Practical Byzantine Fault Tolerance的缩写，意为实用拜占庭容错算法。该算法是Miguel Castro (卡斯特罗)和Barbara Liskov（利斯科夫）在1999年提出来的，解决了原始拜占庭容错算法效率不高的问题，将算法复杂度由指数级降低到多项式级，使得拜占庭容错算法在实际系统应用中变得可行。该论文发表在1999年的操作系统设计与实现国际会议上（OSDI99）。没错，这个Loskov就是提出著名的里氏替换原则（LSP）的人，2008年图灵奖得主。</p><p>PBFT算法目前在许多区块链项目中都有运用，例如国内的迅雷，腾讯等公司的区块链使用的就是PBFT算法（应该是对算法进行了优化），超级账本的Farbic v0.6版本也使用了PBFT作为其共识算法。</p><p>简单来说一下 PBEF，在网上看到一个故事可以概述这个算法。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>PBFT算法要求至少要4个参与者，一个被选举为军长，3个师长。军长接到总司令命令：你们向前行军500公里。军长就会给3个师长发命令向前行军500公里。3个师长收到消息后会执行命令，并汇报结果。A师长说我在首都以东500公里，B师长说我在首都以东500公里，C师长说我在首都以东250公里。军长总结3个师长的汇报，发现首都以东500公里占多数（2票&gt;1票），所以就会忽略C师长的汇报结果，给总司令汇报说，好了，现在部队是在首都以东500公里了。这就是PBFT算法。</p></em>                                </div>        <p>在可以理解为：对于每一个收到命令的将军，都要去询问其他人，他们收到的命令是什么。也就是说利用不断的信息交换让可行的节点确认哪一个记录选择是正确的，即发现其中的背叛者</p><p>采用PBFT方法，本质上就是利用通信次数换取信用。每个命令的执行都需要节点间两两交互去核验消息，通信代价是非常高的。通常采用PBFT算法，节点间的通信复杂度是节点数的平方级的</p><p>但是即使如此，也已经把之前的指数级 变成了现在的 多项式级</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="PBFT-算法-3f-1-lt-n-的推论" style="display: inline;"><a href="#PBFT-算法-3f-1-lt-n-的推论" class="headerlink" title="PBFT 算法  3f+1 &lt;= n 的推论"></a>PBFT 算法  3f+1 &lt;= n 的推论</h4><p>我们会在 下面和 raft 对比的时候进行详细说明。这里我们就知道这个就是如此就好了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="PBFT-算法基本流程" style="display: inline;"><a href="#PBFT-算法基本流程" class="headerlink" title="PBFT 算法基本流程"></a>PBFT 算法基本流程</h4><p>pbft算法的基本流程主要有以下四步：</p><ol><li>客户端发送请求给主节点</li><li>主节点广播请求给其它节点，节点执行pbft算法的三阶段共识流程。</li><li>节点处理完三阶段流程后，返回消息给客户端。</li><li>客户端收到来自f+1个节点的相同消息后，代表共识已经正确完成。</li></ol><p>为什么收到f+1个节点的相同消息后就代表共识已经正确完成？从上一小节的推导里可知，无论是最好的情况还是最坏的情况，如果客户端收到f+1个节点的相同消息，那么就代表有足够多的正确节点已全部达成共识并处理完毕了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="算法核心三阶段流程" style="display: inline;"><a href="#算法核心三阶段流程" class="headerlink" title="算法核心三阶段流程"></a>算法核心三阶段流程</h4><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/1785959-41fed6221d531794.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/1785959-41fed6221d531794.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">PBFT流程</figcaption></figure></p><p>算法的核心三个阶段分别是pre-prepare阶段（预准备阶段），prepare阶段（准备阶段），commit阶段（提交阶段）。图中的C代表客户端，0，1，2，3代表节点的编号，打叉的3代表可能是故障节点或者是问题节点，这里表现的行为就是对其它节点的请求无响应。0是主节点。整个过程大致是：</p><p>首先，客户端向主节点发起请求，主节点0收到客户端请求，会向其它节点发送pre-prepare消息，其它节点就收到了pre-prepare消息，就开始了这个核心三阶段共识过程了。</p><p>Pre-prepare阶段：节点收到pre-prepare消息后，会有两种选择，一种是接受，一种是不接受。什么时候才不接受主节点发来的pre-prepare消息呢？一种典型的情况就是如果一个节点接到了一条pre-pre消息，消息里的v和n在之前收到里的消息是曾经出现过的，但是d和m却和之前的消息不一致，或者请求编号不在高低水位之间（高低水位的概念在2.4节会进行解释），这时候就会拒绝请求。拒绝的逻辑就是主节点不会发送两条具有相同的v和n，但d和m却不同的消息。</p><p>Prepare阶段：节点同意请求后会向其它节点发送prepare消息。这里要注意一点，同一时刻不是只有一个节点在进行这个过程，可能有n个节点也在进行这个过程。因此节点是有可能收到其它节点发送的prepare消息的。在一定时间范围内，如果收到超过2f个不同节点的prepare消息，就代表prepare阶段已经完成。</p><p>Commit阶段：于是进入commit阶段。向其它节点广播commit消息，同理，这个过程可能是有n个节点也在进行的。因此可能会收到其它节点发过来的commit消息，当收到2f+1个commit消息后（包括自己），代表大多数节点已经进入commit阶段，这一阶段已经达成共识，于是节点就会执行请求，写入数据。</p><p>处理完毕后，节点会返回消息给客户端，这就是pbft算法的全部流程。</p><p>为了更清晰的展现这个过程和一些细节，下面以流程图来表示这个过程。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/486074-20180507102718422-1141825881.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/486074-20180507102718422-1141825881.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">PBFT交互图</figcaption></figure></p><p>注解：</p><p>V：当前视图的编号。视图的编号是什么意思呢？比如当前主节点为A，视图编号为1，如果主节点换成B，那么视图编号就为2.这个概念和raft的term任期是很类似的。<br>N：当前请求的编号。主节点收到客户端的每个请求都以一个编号来标记。<br>M：消息的内容<br>d或D(m)：消息内容的摘要<br>i： 节点的编号</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="checkpoint、stable-checkpoint和高低水位" style="display: inline;"><a href="#checkpoint、stable-checkpoint和高低水位" class="headerlink" title="checkpoint、stable checkpoint和高低水位"></a>checkpoint、stable checkpoint和高低水位</h4><p>什么是checkpoint呢？checkpoint就是当前节点处理的最新请求序号。前文已经提到主节点收到请求是会给请求记录编号的。比如一个节点正在共识的一个请求编号是101，那么对于这个节点，它的checkpoint就是101.</p><p>那什么是stable checkpoint（稳定检查点）呢？stable checkpoint就是大部分节点（2f+1）已经共识完成的最大请求序号。比如系统有4个节点，三个节点都已经共识完了的请求编号是213.那么这个213就是stable checkpoint了。</p><p>那设置这个stable checkpoint有什么作用呢？最大的目的就是减少内存的占用。因为每个节点应该记录下之前曾经共识过什么请求，但如果一直记录下去，数据会越来越大，所以应该有一个机制来实现对数据的删除。那怎么删呢？很简单，比如现在的稳定检查点是213，那么代表213号之前的记录已经共识过的了，所以之前的记录就可以删掉了。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/486074-20180507102918856-832514733.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/486074-20180507102918856-832514733.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">高低水位示意图</figcaption></figure></p><p>图中A节点的当前请求编号是1039，即checkpoint为1039，B节点的checkpoint为1133.当前系统stable checkpoint为1034.那么1034这个编号就是低水位，而高水位H=低水位h+L，其中L是可以设定的数值。因此图中系统的高水位为1034+100=1134。</p><p>举个例子：如果B当前的checkpoint已经为1034，而A的checkpoint还是1039，假如有新请求给B处理时，B会选择等待，等到A节点也处理到和B差不多的请求编号时，比如A也处理到1112了，这时会有一个机制更新所有节点的stabel checkpoint ，比如可以把stabel checkpoint设置成1100，于是B又可以处理新的请求了，如果L保持100不变，这时的高水位就会变成1100+100=1200了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="ViewChange（视图更改）事件" style="display: inline;"><a href="#ViewChange（视图更改）事件" class="headerlink" title="ViewChange（视图更改）事件"></a>ViewChange（视图更改）事件</h4><p>当主节点挂了（超时无响应）或者从节点集体认为主节点是问题节点时，就会触发ViewChange事件，ViewChange完成后，视图编号将会加1。</p><p>下图展示ViewChange的三个阶段流程。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/20160715170931404.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/20160715170931404.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">View Change 流程</figcaption></figure></p><p>如图所示，viewchange会有三个阶段，分别是view-change，view-change-ack和new-view阶段。从节点认为主节点有问题时，会向其它节点发送view-change消息，当前存活的节点编号最小的节点将成为新的主节点。当新的主节点收到2f个其它节点的view-change消息，则证明有足够多人的节点认为主节点有问题，于是就会向其它节点广播</p><p>New-view消息。注意：从节点不会发起new-view事件。对于主节点，发送new-view消息后会继续执行上个视图未处理完的请求，从pre-prepare阶段开始。其它节点验证new-view消息通过后，就会处理主节点发来的pre-prepare消息，这时执行的过程就是前面描述的pbft过程。到这时，正式进入 v+1（视图编号加1）的时代了。</p><p>为了更清晰的展现ViewChange这个过程和一些细节，下面以流程图来表示这个过程。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/486074-20180507102957016-2140471289.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/486074-20180507102957016-2140471289.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">View Change 交互图</figcaption></figure></p><p>上图里红色字体部分的O集合会包含哪些pre-prepare消息呢？假设O集合里消息的编号范围：（min～max），则Min为V集合最小的stable checkpoint，Max为V集合中最大序号的prepare消息。最后一步执行O集合里的pre-preapare消息，每条消息会有两种情况: 如果max-min&gt;0,则产生消息<pre-prepare,v+1,n,d> ；如果max-min=0，则产生消息<pre-prepare,v+1,n,d(null)>。</pre-prepare,v+1,n,d(null)></pre-prepare,v+1,n,d></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="从Fabric源码看出些东西" style="display: inline;"><a href="#从Fabric源码看出些东西" class="headerlink" title="从Fabric源码看出些东西"></a>从Fabric源码看出些东西</h4><p>在 <a href="https://github.com/hyperledger/fabric/tree/v0.6" target="_blank" rel="noopener">fabric v0.6 </a>将项目荡到本地之后，我们发现在consensus内的 pbft 就是整个 fabric 共识代码。</p><pre class="line-numbers language-golang g-mb-30"><code class="language-golang">type pbftCore struct {    // internal data    internalLock sync.Mutex    executing    bool // signals that application is executing    idleChan   chan struct{} // Used to detect idleness for testing    injectChan chan func()   // Used as a hack to inject work onto the PBFT thread, to be removed eventually    consumer innerStack    // PBFT data    activeView    bool              // view change happening    byzantine     bool              // whether this node is intentionally acting as Byzantine; useful for debugging on the testnet    f             int               // max. number of faults we can tolerate    N             int               // max.number of validators in the network    h             uint64            // low watermark    id            uint64            // replica ID; PBFT `i`    K             uint64            // checkpoint period    logMultiplier uint64            // use this value to calculate log size : k*logMultiplier    L             uint64            // log size    lastExec      uint64            // last request we executed    replicaCount  int               // number of replicas; PBFT `|R|`    seqNo         uint64            // PBFT "n", strictly monotonic increasing sequence number    view          uint64            // current view    chkpts        map[uint64]string // state checkpoints; map lastExec to global hash    pset          map[uint64]*ViewChange_PQ  //已经完成prepare阶段的请求    qset          map[qidx]*ViewChange_PQ //已经完成pre-prepare阶段的请求    skipInProgress    bool               // Set when we have detected a fall behind scenario until we pick a new starting point    stateTransferring bool               // Set when state transfer is executing    highStateTarget   *stateUpdateTarget // Set to the highest weak checkpoint cert we have observed    hChkpts           map[uint64]uint64  // highest checkpoint sequence number observed for each replica    currentExec           *uint64                  // currently executing request    timerActive           bool                     // is the timer running?    vcResendTimer         events.Timer             // timer triggering resend of a view change    newViewTimer          events.Timer             // timeout triggering a view change    requestTimeout        time.Duration            // progress timeout for requests    vcResendTimeout       time.Duration            // timeout before resending view change    newViewTimeout        time.Duration            // progress timeout for new views    newViewTimerReason    string                   // what triggered the timer    lastNewViewTimeout    time.Duration            // last timeout we used during this view change    broadcastTimeout      time.Duration            // progress timeout for broadcast    outstandingReqBatches map[string]*RequestBatch // track whether we are waiting for request batches to execute    nullRequestTimer   events.Timer  // timeout triggering a null request    nullRequestTimeout time.Duration // duration for this timeout    viewChangePeriod   uint64        // period between automatic view changes    viewChangeSeqNo    uint64        // next seqNo to perform view change    missingReqBatches map[string]bool // for all the assigned, non-checkpointed request batches we might be missing during view-change    // implementation of PBFT `in`    reqBatchStore   map[string]*RequestBatch // track request batches    certStore       map[msgID]*msgCert       // track quorum certificates for requests    checkpointStore map[Checkpoint]bool      // track checkpoints as set    viewChangeStore map[vcidx]*ViewChange    // track view-change messages    newViewStore    map[uint64]*NewView      // track last new-view we received or sent}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现， bfpt中的view 就是一个 正整数。</p><p>其中我可以看到他的主节点,判断如下。 </p><pre class="line-numbers language-golang g-mb-30"><code class="language-golang">// Given a certain view n, what is the expected primary?func (instance *pbftCore) primary(n uint64) uint64 {    return n % uint64(instance.replicaCount)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主节点由公式p = v mod |R|计算得到，这里v是视图编号，p是副本编号，|R|是副本集合的个数。当主节点失效的时候就需要启动视图更换（view change）过程</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="PBFT-算法总结" style="display: inline;"><a href="#PBFT-算法总结" class="headerlink" title="PBFT 算法总结"></a>PBFT 算法总结</h4><p>PBFT 就属于 BFT 类的共识算法了，他可以解决分布式系统中存在做宕机的节点，也可以处理存在做坏事儿节点的问题。</p><ol><li>pbft算法可以容忍不超过(N - 1) / 3个问题节点，共识算法的时间复杂度为O(n^2)；</li><li>pbft算法完成共识需要经过三个阶段：pre-prepare、prepare和commit阶段；</li><li>pbft算法需要一个主节点，每个主节点的任期就是一个view。当从节点发现主节点有问题（比如请求在规定时间内没有相应）时通过view change来请求更换主节点。</li></ol><p>PBFT算法非常重要，很多大厂的区块链项目中都有运用，例如国内的迅雷、腾讯等公司的区块链项目，超级账本的fabric等，都使用了pbft或者优化后的pbft作为共识算法，理解pbft算法是区块链学习过程中非常重要的一环。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="PBFT-与-RAFT-对比" style="display: inline;"><a href="#PBFT-与-RAFT-对比" class="headerlink" title="PBFT 与 RAFT 对比"></a>PBFT 与 RAFT 对比</h3>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>对比点</th><th>RAFT</th><th>PBFT</th></tr></thead><tbody><tr><td>适用环境</td><td>私链</td><td>联盟链</td></tr><tr><td>算法通信复杂度</td><td>O(n)</td><td>O(n^2)</td></tr><tr><td>最大故障合同错节点</td><td>2f+1&lt;=N</td><td>3f+1&lt;=N</td></tr><tr><td>流程对比</td><td>1. 初始化leader（谁快谁当）<br>2. 共识过程<br>3. 重选leader机制</td><td>1. 初始化leader选举(按编号依次轮流做主节点)<br>2. 共识过程<br>3. 重选leader机制</td></tr></tbody>                    </table>                </div>            </div><p>公链：公链不仅需要考虑网络中存在故障节点，还需要考虑作恶节点，这一点和联盟链是类似的。和联盟链最大的区别就是，公链中的节点可以很自由的加入或者退出，不需要严格的验证和审核。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="最大容错率" style="display: inline;"><a href="#最大容错率" class="headerlink" title="最大容错率"></a>最大容错率</h4><p>首先我们先来思考一个问题，为什么pbft算法的最大容错节点数量是（n-1）/3，而raft算法的最大容错节点数量是（n-1）/2？</p><p>对于raft算法，raft算法的的容错只支持容错故障节点，不支持容错作恶节点。什么是故障节点呢？就是节点因为系统繁忙、宕机或者网络问题等其它异常情况导致的无响应，出现这种情况的节点就是故障节点。那什么是作恶节点呢？作恶节点除了可以故意对集群的其它节点的请求无响应之外，还可以故意发送错误的数据，或者给不同的其它节点发送不同的数据，使整个集群的节点最终无法达成共识，这种节点就是作恶节点。</p><p>raft算法只支持容错故障节点，假设集群总节点数为n，故障节点为f，根据小数服从多数的原则，集群里正常节点只需要比f个节点再多一个节点，即f+1个节点，正确节点的数量就会比故障节点数量多，那么集群就能达成共识。因此raft算法支持的最大容错节点数量是（n-1）/2。</p><p>对于pbft算法，因为pbft算法的除了需要支持容错故障节点之外，还需要支持容错作恶节点。假设集群节点数为N，有问题的节点为f。有问题的节点中，可以既是故障节点，也可以是作恶节点，或者只是故障节点或者只是作恶节点。那么会产生以下两种极端情况：</p><p>第一种情况，f个有问题节点既是故障节点，又是作恶节点，那么根据小数服从多数的原则，集群里正常节点只需要比f个节点再多一个节点，即f+1个节点，确节点的数量就会比故障节点数量多，那么集群就能达成共识。也就是说这种情况支持的最大容错节点数量是（n-1）/2。</p><p>第二种情况，故障节点和作恶节点都是不同的节点。那么就会有f个问题节点和f个故障节点，当发现节点是问题节点后，会被集群排除在外，剩下f个故障节点，那么根据小数服从多数的原则，集群里正常节点只需要比f个节点再多一个节点，即f+1个节点，确节点的数量就会比故障节点数量多，那么集群就能达成共识。所以，所有类型的节点数量加起来就是f+1个正确节点，f个故障节点和f个问题节点，即3f+1=n。</p><p>结合上述两种情况，因此pbft算法支持的最大容错节点数量是（n-1）/3。下图展示了论文里证明pbft算法为什么3f+1&lt;=n的一段原文，以及根据原文提到的两种情况对应的示意图。</p><p>paxos主要用于解决非拜占庭模型的共识问题，一般适用于私链，因为私链仅在组织内部使用，因此可以不考虑集群中存在拜占庭节点问题，而公链或者联盟链则必须要考虑存在恶意节点的情况，因此不适合用paxos或者raft这类非拜占庭模型的共识算法。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="时间复杂度" style="display: inline;"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>为什么raft是o（n），而pbft是o（n^2）呢？这里主要考虑算法的共识过程。</p><p>对于raft算法，核心共识过程是日志复制这个过程，这个过程分两个阶段，一个是日志记录，一个是提交数据。两个过程都只需要领导者发送消息给跟随者节点，跟随者节点返回消息给领导者节点即可完成，跟随者节点之间是无需沟通的。所以如果集群总节点数为 n，对于日志记录阶段，通信次数为n-1，对于提交数据阶段，通信次数也为n-1，总通信次数为2n-2，因此raft算法复杂度为O（n）。</p><p>对于pbft算法，核心过程有三个阶段，分别是pre-prepare（预准备）阶段，prepare（准备）阶段和commit（提交）阶段。对于pre-prepare阶段，主节点广播pre-prepare消息给其它节点即可，因此通信次数为n-1；对于prepare阶段，每个节点如果同意请求后，都需要向其它节点再 广播parepare消息，所以总的通信次数为n<em>（n-1），即n^2-n；对于commit阶段，每个节点如果达到prepared状态后，都需要向其它节点广播commit消息，所以总的通信次数也为n</em>（n-1），即n^2-n。所以总通信次数为（n-1）+（n^2-n）+（n^2-n），即2n^2-n-1，因此pbft算法复杂度为O（n^2）。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="流程对比上" style="display: inline;"><a href="#流程对比上" class="headerlink" title="流程对比上"></a>流程对比上</h4><p>对于leader选举这块，raft算法本质是谁快谁当选，而pbft算法是按编号依次轮流做主节点。对于共识过程和重选leader机制这块，为了更形象的描述这两个算法，接下来会把raft和pbft的共识过程比喻成一个团队是如何执行命令的过程，从这个角度去理解raft算法和pbft的区别。</p><p>一个团队一定会有一个老大和普通成员。对于raft算法，共识过程就是：只要老大还没挂，老大说什么，我们（团队普通成员）就做什么，坚决执行。那什么时候重新老大呢？只有当老大挂了才重选老大，不然生是老大的人，死是老大的鬼。</p><p>对于pbft算法，共识过程就是：老大向我发送命令时，当我认为老大的命令是有问题时，我会拒绝执行。就算我认为老大的命令是对的，我还会问下团队的其它成员老大的命令是否是对的，只有大多数人（2f+1）都认为老大的命令是对的时候，我才会去执行命令。那什么时候重选老大呢？老大挂了当然要重选，如果大多数人都认为老大不称职或者有问题时，我们也会重新选择老大。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="结语" style="display: inline;"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>raft算法和pbft算法是私链和联盟链中经典的共识算法，本文主要介绍了raft和pbft算法的流程和区别。raft和pbft算法有两点根本区别：</p><ol><li>raft算法从节点不会拒绝主节点的请求，而pbft算法从节点在某些情况下会拒绝主节点的请求 ;</li><li>raft算法只能容错故障节点，并且最大容错节点数为（n-1）/2，而pbft算法能容错故障节点和作恶节点，最大容错节点数为（n-1）/3。</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Pow-工作证明" style="display: inline;"><a href="#Pow-工作证明" class="headerlink" title="Pow 工作证明"></a>Pow 工作证明</h3><p>Proof of Work，工作证明相关理念最早于1993年被Cynthia Dwork和Moni Naor提出，之后的几年，该概念在是否能有效对抗拒绝服务攻击的争论中不断被人们所知。PoW机制的核心在于强迫攻击者作出一定量的工作才能进行接下来的交互操作，这样无形中就给攻击者提高了攻击的成本。自然而然的，攻击者需要完成的工作可以按消耗的计算机资源种类分为以下三大类：</p><p>消耗CPU资源。例如，反垃圾邮件的Hashcash方案以及受此启发而诞生的比特币；<br>消耗内存资源。例如，为了防止与比特币采用相同的共识机制所可能导致的51%攻击，以太坊目前就使用了一种需要占用大量内存资源的PoW算法；<br>消耗网络资源。攻击者在进行拒绝服务攻击之前，必须要获取多个远程服务器发送的命令。<br>POW作为数字货币的共识机制于 1998 年在 B-money 设计中提出。2008年中本聪发表比特币白皮书，比特币采用POW共识，通过计算来猜测一个数值（nonce），得以解决规定的 Hash 问题（两次SHA256）。保证在一段时间内，系统中只能出现少数合法提案。 同时，这些少量的合法提案会在网络中进行广播，收到的用户进行验证后会基于它认为的最长链上继续难题的计算。因此，系统中可能出现链的分叉（Fork），但最终会有一条链成为最长的链。</p><p>Hash 问题具有不可逆的特点，因此，目前除了暴力计算外，还没有有效的算法进行解决。反之，如果获得符合要求的 nonce，则说明在概率上是付出了对应的算力。谁的算力多，谁最先解决问题的概率就越大。 当掌握超过全网一半算力时，从概率上就能控制网络中链的走向。这也是所谓 51% 攻击的由来</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="比特币POW算法的ASIC化问题" style="display: inline;"><a href="#比特币POW算法的ASIC化问题" class="headerlink" title="比特币POW算法的ASIC化问题"></a>比特币POW算法的ASIC化问题</h4><p>由于比特币采用的是比较简单的SHA256哈希算法作为POW共识算法，这个算法只消耗CPU资源，对内存要求不高，所以可以很容易被制造出ASIC芯片。这是比特币挖矿芯片的更新换代图</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2625-20180415221649606-1851610838.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2625-20180415221649606-1851610838.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">比特币矿机芯片阶段</figcaption></figure></p><p>而现在，比特币的挖矿都变成了这样子：大量ASIC矿机组成的矿场。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2625-20180415221652415-454882799.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2625-20180415221652415-454882799.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">大量ASIC矿机组成的矿场</figcaption></figure></p><p>这样算力就越来越集中到了大矿主手里，普通用户使用电脑根本不可能挖到矿，这与中本聪当年设想的人人都能公平记账的愿景相违背。为此，人们设计了各种反ASIC化的方案。主要思想就是将POW算法改的很复杂，需要大量的内存，这样ASIC芯片是不可能集成大量内存进去的，从而无法制造出专门的挖矿芯片。比较有代码的改进方案有：</p><ul class="g-list-style-circle"><li>莱特币：刚性内存哈希函数Scrypt取代SHA256</li><li>达世币：X11，11种哈希函数混合使用</li><li>以太坊：Ethash，大内存DAG搜索</li></ul><p>但是实际上，只要利益足够大，人们总能够设计出专门POW挖矿的矿机，莱特币矿机和达世币矿机先后被制造了出来，以太坊之前也顶多是使用显卡挖矿，最近比特大陆也研发出了专门进行以太坊挖矿的专业矿机“蚂蚁矿机E3。具体可以参考这个新闻：<a href="http://t.cj.sina.com.cn/articles/view/1181714847/466f899f001007d4h" target="_blank" rel="noopener">http://t.cj.sina.com.cn/articles/view/1181714847/466f899f001007d4h</a></p><p>比特币的POW算法是没有任何实际意义的SHA256运算，那么有没有可能在挖矿的同时，把这些算力算出一些副产物？以下是几个比较有名的进行有效工作量证明的区块链：</p><ul class="g-list-style-circle"><li>质数币：Primecoin（质数币）发布于2013年7月。其最大的特点是将虚拟货币中浪费的算法资源利用起来。它的PoW可以搜索质数，从而计算孪生素数表。所以有一定的科学价值。</li><li>治疗币：Curecoin（治疗币）发布于2013年5月。治疗币最大的特点是将蛋白质褶皱结构的研究SHA256工作量证明算法进行了结合。因为蛋白质褶皱研究需要对蛋白质进行生化反应的模拟过程需要大量的计算资源，所以在“挖矿”的同时，还用于发现治愈疾病的新药，一举两得。</li><li>比原链：比原链重新设计一种不同于比特币的哈希运算PoW共识机制，引入了矩阵运算与卷积运算，这样就能让人工智能运算充分利用比原链的挖矿设备。在这个过程中，人工智能加入了新的硬件，其算法运行速度得到明显提高。同时，这样也能减少一定的资源浪费。在这种情况下，矿机市场巨大的经济利益能够极大地加速人工智能ASIC芯片的发展，加快人工智能的研究。反过来，人工智能的快速发展也产生了更多的ASIC矿机需求。因此，这是一种正向反馈良性发展的过程。</li></ul><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Pos-权益证明" style="display: inline;"><a href="#Pos-权益证明" class="headerlink" title="Pos 权益证明"></a>Pos 权益证明</h3><p>PoS也称股权证明机制，其诞生的初衷是为了解决PoW带来的能耗问题。这种模式下持有币的数量越多、时间越长，记账成功率就越高（持有越多，获得越多），类似于利息制度。举例来说，PoS算法中有一个名词叫币龄，每个币每天产生1币龄，如果你持有100个币，总共持有了30天，那么此时你的币龄就为3000。这个时候如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的奖励(相当于年利率5%)，在这个案例中，奖励 = 3000 * 5% / 365 = 0.41个币，即持币有利息。</p><p>PoS作为PoW的一种升级共识机制，根据每个节点所持有代币的数量和时间，等比例的降低挖矿难度，在一定程度上缩短了共识达成的时间，但最重要的是不再需要消耗大量能源进行挖矿。它的缺点在于：性能提升有限，持币吃息的模式会导致代币的大量集中，流动性变得匮乏起来。典型项目如以太坊，目前正在从PoW切换至PoS机制。</p><p>第一个POS虚拟货币——点点币<br>Peercoin（点点币，PPC）于2012年8月发布，最大创新是其采矿方式混合了POW工作量证明及POS权益证明方式，其中POW主要用于发行货币，未来预计随着挖矿难度上升，产量降低，系统安全主要由POS维护。目前区块链中存在两种类型的区块，POW区块和POS区块。PPC的作者为同样不愿意公开身份的密码货币极客Sunny King，同时也是Primecoin的发明者。</p><p>第一个纯POS虚拟货币——未来币<br>2013年9月，一个名为BCNext的用户在Bitcointalk论坛发起一个帖子，宣布将发行一种全新的纯POS币种，后来取名为Nextcoin，简称NXT。Nxt是且是第一个100%的股权证明(PoS)机制的电子货币，Nxt不再通过消耗大量的资源“挖矿”产生新货币，而是通过现有账户的余额去“锻造”区块，并给与成功“锻造”区块的账户交易费用奖励。NXT的POS实现方式与PPC完全不同，合格区块判定方法为：</p><p>hit &lt; baseTarget <em> effectiveBalance </em> elapseTime</p><p>hit是根据最新区块和用户的私钥生成的值，用户在挖一个区块时只需要计算一次即可。而右边的值跟账户余额成正比，跟流逝的时间成正比。也就意味着，用户账户余额越多，挖到矿的几率越高，随着时间的流逝越久，越容易找到新的区块。NXT区块的生成完全摒弃了竞争的理念，有点“上帝早已安排好一切”的味道，下一个区块由谁来生成冥冥中早就注定了，全网节点能做的就是静静等待那一刻的到来。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2625-20180415221701177-996771581.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2625-20180415221701177-996771581.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">POS</figcaption></figure></p><p>POS的本质就是比谁的钱多，钱越多越容易挖到区块，这将会造成富者越富，资源越来越集中，从而变得更中心化。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="DPOS-代理权益证明" style="display: inline;"><a href="#DPOS-代理权益证明" class="headerlink" title="DPOS 代理权益证明"></a>DPOS 代理权益证明</h3><p>DPoS是权益证明的一种改进版本，共识过程不再需要所有参与节点进行验证，而是委托部分代表来进行，很大程度上提高了共识效率。BitShares社区首先提出了DPoS机制，并引入了见证人的概念。见证人可以生成区块（记账并获得奖励），每一个持有比特股的人都可以投票选举见证人。得票数前100名的候选者可以当选为见证人，见证人的候选名单每个维护周期更新一次。见证人通过随机排列后，依次轮流生成区块（限时2s内出块），若见证人在2s内未能出块，则自动跳到下一个见证人。由于持股人可以随时通过投票更换见证人，因此见证人为了获得奖励和避免损失保证金，就必须提供稳定高效的出块能力。</p><p>可以看出，DPoS实际上是对共识进行了分级，先通过投票选举达成见证人共识（选出极少数可信的见证人），然后见证人之间再达成交易验证共识，这样大大提高了整个系统的共识效率。从某种角度来看，DPoS与议会制度或人民代表大会制度有相似之处。如果代表不能履行他们的职责，例如未能按时出块，就会被网络选出的新见证节点所取代。DPoS算法从性能和能耗的角度来说完全可以满足商用，但也不可避免地带来了过于中心化的问题。比如现在很火的EOS超级节点竞选就变成了鲸鱼们的合纵游戏，甚至被质疑是伪区块链项目。当然这种看法笔者并不赞同，毕竟上期也讲到3类区块链，采用DPoS算法的项目应当算作联盟链，只不过有些联盟比较开放有了大量散户，从运营模式上看更像公链。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="EOS" style="display: inline;"><a href="#EOS" class="headerlink" title="EOS"></a>EOS</h4><p>另外目前最火的区块链项目之一EOS也是采用了DPOS共识。EOS通过投票的方式选举出21个超级节点作为记账节点，每个节点有3秒的时间片，轮流记账。如果轮到某节点记账而没有出块，则该节点可能被投票出局，由其他备选节点顶替。出块速度是0.5秒！</p><p>EOS.IO软件允许区块精准的以每0.5秒产生一个区块，只有一个生产者被授权在任何给定的时间点生产一个区块。如果区块在预定的时间没有被生产出来，那么，那个时间的区块将被跳过。当一个或多个区块被跳过，将会有0.5秒或更多秒的区块间隔。<br>使用EOS.IO软件，区块以126个区块为一轮（每个生产者可以生产6个，有21个生产者，二者相乘）。在每一轮的开始，21个区块生产者通过token持有者的投票被选中。选中的生产者依据商定好的顺序生产区块，这个顺序由15个或者更多的生产者商定。<br>如果一个生产者错过了一个区块，并且在24小时内没有生产任何区块，他们将会被移除。直到这些“宕机”的生产者们及时通知区块链，他们将打算再次生产区块才被重新加入。通过不安排那些不够可靠的节点，尽可能的减少错过区块创建，来让整个网络运行得更平稳。</p><p>DPOS的特殊性，也是奠定拜占庭容错能力的基础框架，是它的算力节点是固定21个人，并且由大型的机构运营节点，其信息也相对透明，例如运营节点的地点、运营的情况等等。并且DPOS的算力节点是固定出块顺序的，固定地从A到B到C······。</p><p>传统DPOS中加入了拜占庭容错算法（BFT），只要没有生产者盖上相同的时间戳或相同区块高度的两个区块，便允许所有生产者签署所有区块。一旦15个生产者签署了一个区块，该区块就被认为是不可逆转的。在这种模式下，不可逆转的共识应该在1秒内完成。 </p><p>在这种情况下，其实DPOS是拜占庭容错的特殊解，如何理解特殊解？原来的拜占庭容错（POW工作量证明），解决的是不限数量、随机广播同步的算力节点的容错能力，DPOS解决的拜占庭容错从两个维度降低了难度： </p><p>1、节点数量固定只有21个。并且节点信息透明。<br>2、固定出块顺序。每个节点跟接力棒一样，一个个往下接力出块。每个节点不能还没轮到它出块的时候，就出块。都是必须轮到再出块。如果出现出块故障，会跳过这个节点。 </p><p>在POW或者其他的POS共识里，节点不限、随机出块顺序的问题，就变成只要解决「固定数量和固定出块顺序情况下的拜占庭问题」，其难度就大大降低。</p><p>一直以来以太坊的创始人Vitalik和EOS创始人BM关于POW和DPOS谁更中心化进行互怼。Vitalik认为EOS的21个超级节点违反了区块链的去中心化原则，有失公平。而BM则认为几个几大矿池控制了比特币和以太坊的绝大部分算力，这相当于以太坊只有几个超级节点，比21个节点还要少，对手里拿着BTC和ETH的人他们对社区和整个生态，他们是没有确定的发言权的，在比特币的世界里算力就是王道，面对算力大量集中在部分矿场的现在，它真的实现了中本聪的本心了吗？同样需要挖矿POS也是一样，需要看概率来决定你能否发声，但是DPOS是有发言权的，不管持有多少，我都有发言权。这种看似由“直接民主”转为“间接民主”的机制，或许才是真正体现了去中心化精神。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="NEO的dBFT" style="display: inline;"><a href="#NEO的dBFT" class="headerlink" title="NEO的dBFT"></a>NEO的dBFT</h3><p>NEO采用的是 Delegated Byzantine Fault Tolerance (dBFT) 共识算法，由于它目前只有 7 个 代理节点，而代表节点则是通过用户投票选出。dBFT参与记账的是超级节点，普通节点可以看到共识过程，并同步账本信息，但不参与记账。总共n个超级节点分为一个议长和n-1个议员，议长会轮流当选。每次记账时，先有议长发起区块提案（拟记账的区块内容），一旦有至少（2n+1)/3个记账节点（议长加议员）同意了这个提案，那么这个提案就成为最终发布的区块，并且该区块是不可逆的，所有里面的交易都是百分之百确认的。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="以太坊的下一代POS共识：Casper" style="display: inline;"><a href="#以太坊的下一代POS共识：Casper" class="headerlink" title="以太坊的下一代POS共识：Casper"></a>以太坊的下一代POS共识：Casper</h3><p>Casper（投注共识）是一种以太坊下一代的共识机制，属于PoS。Casper的共识是按块达成的而不是像PoS那样按链达成的。</p><p>为了防止验证人在不同的世界中提供不同的投注，我们还有一个简单严格的条款：如果你有两次投注序号一样，或者说你提交了一个无法让Casper合约处理的投注，你将失去所有保证金。从这一点我们可以看出，Casper与传统的PoS不同的是Casper有惩罚机制，这样非法节点通过恶意攻击网络不仅得不到交易费，而且还面临着保证金被没收的风险。</p><p>Casper协议下的验证人需要完成出块和投注两个活动。具体如下：</p><p>出块是一个独立于其它所有事件而发生的过程：验证人收集交易，当轮到他们的出块时间时，他们就制造一个区块，签名，然后发送到网络上。投注的过程更为复杂一些。目前Casper默认的验证人策略被设计为模仿传统的拜占庭容错共识：观察其他的验证人如何投注，取33%处的值，向0或者1进一步移动。<br>而客户端的确认当前状态的过程如下所示：</p><p>一开始先下载所有的区块和投注，然后用上面的算法来形成自己的意见，但是不公布意见。它只要简单的按顺序在每个高度进行观察，如果一个块的概率高于0.5就处理它，否则就跳过它。在处理所有的区块之后得到的状态就可以显示为区块链的“当前状态”。客户端还可以给出对于“最终确定”的主观看法：当高度k之前的每个块，意见要么高于99.999%或者低于0.001%</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="HyperLedger-Fabric下一代共识：SBFT" style="display: inline;"><a href="#HyperLedger-Fabric下一代共识：SBFT" class="headerlink" title="HyperLedger Fabric下一代共识：SBFT"></a>HyperLedger Fabric下一代共识：SBFT</h3><p>PBFT在Fabric0.6的时候被采用，但是由于一些说不清的原因，在Fabric1.0中并没有采用PBFT，而是使用Kafka进行排序，作为共识节点。在Fabric的提案中，打算会采用SBFT（Simple BFT），这种BFT算法会对PBFT进行简化，具体什么时候实现还没准呢。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="PalletOne的陪审团共识" style="display: inline;"><a href="#PalletOne的陪审团共识" class="headerlink" title="PalletOne的陪审团共识"></a>PalletOne的陪审团共识</h3><p>在英美，陪审团制度是一个使用了几百年的共识制度，关于一个案件中嫌疑人是否有罪，是由随机抽选的陪审员组成陪审团共同决定的。提到陪审团，就不得不提一部非常经典的电影《十二怒汉》：</p><p>十二怒汉》讲述的是一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。<br>《十二怒汉》通过一场陪审团审判，生动演绎了美国的法律制度与文化，是美国宣传法律和法律制度的“银法槌奖”的首部获奖作品。同名电影在IMDB上排名第五，高于《阿甘正传》《辛德勒的名单》等，是一部超越时代的经典之作！其中的一段台词也很能体现陪审团制度的特点：</p><p>“我们都肩负责任。我一直认为，这正是民主社会了不起的地方。我们接到邮件通知，大老远跑到这里，决定一个跟我们素昧平生的人到底有没有罪。不论作出什么样的裁决，我们都拿不到任何好处，也不会有任何损失。这正是我们国家强大的原因之一。我们不能把它当成个人的事”</p><p>PalletOne提供了对各个底层链的抽象，用户使用常用的开发语言，基于对底层链的抽象接口进行操作。而合约的执行就是靠一个个的陪审团来完成的。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2625-20180415221707026-416685126.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2625-20180415221707026-416685126.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">PalletOne 示意图</figcaption></figure></p><p>除了陪审团这个角色，在PalletOne中还有一个叫仲裁中介(Mediator)的角色，该角色是基于DPOS选举的，相当于现实生活中的法官的角色，在接到一个新的智能合约后，Mediator会随机选择陪审员组成陪审团，由该陪审团负责该智能合约的执行和共识。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/共识算法/2625-20180415221707731-1721061432.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/共识算法/2625-20180415221707731-1721061432.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">仲裁中介(Mediator)</figcaption></figure></p><p>陪审团共识与传统POW、POS等共识的不同之处在于，陪审团共识是一个并行的共识机制，在同一个时刻，有多个陪审团同时在执行不同的合约。为了配合陪审团的并行共识，PalletOne采用了DAG作为分布式存储，合约的状态数据可以并行写入DAG中。所以PalletOne使用陪审团并行共识+DAG的并行写入，可以实现极高的TPS。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="总结" style="display: inline;"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>共识算法的选择与应用场景高度相关，可信环境使用Paxos或者Raft，带许可的联盟可使用PBFT，非许可链可以是POW、POS、DPOS共识等。</p><p>现在区块链上数字资产的应用越来越多来源于真实世界或金融资产，对交易的最终确认有很高的要求，需要有不同的共识机制。<br>共识机制是区块链的核心技术，现在各种区块链共识机制的选择是认为至今为止的相对的最优选择；当未来区块链技术越来越多应用于现实，未来将会不断有所改进，以切合实际的需要。</p><p>现在仍然有很多共识算法在不断的被研究出，被优化，这是一条不会终止的路。</p>    <p hidden id="CurrentFileName">分布网络-共识算法.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式网络&quot;&gt;&lt;a href=&quot;#分布式网络&quot; class=&quot;headerlink&quot; title=&quot;分布式网络&quot;&gt;&lt;/a&gt;分布式网络&lt;/h2&gt;&lt;p&gt;我们来大致的看一下网络的发展脚步&lt;/p&gt;
&lt;p&gt;在1961年，麻省理工学院的L.克莱因罗克(L.Klenrock)博士发表论文《大型通讯网络的信息流》，第一次详细论述了分布式网络理论。&lt;/p&gt;
&lt;p&gt;我们可以看到，从这个理论开始到现在也不过50多个年头，连一个世纪都没有，甚至说，L.克莱因罗克(L.Klenrock)博士(&lt;em&gt;互联网的创始人之一&lt;/em&gt;)至今还在世。&lt;/p&gt;
&lt;p&gt;不仅让我们感叹，人类的进步的速度…&lt;/p&gt;
&lt;p&gt;之后60年代，美籍波兰人保罗·巴兰(Paul Baran)撰写多份报告，不仅系统地阐述了分布式网络理论而且提出后来网络传播的核心——“包切换”(Packet Switching)&lt;/p&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://blog.msiter.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://blog.msiter.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="p2p" scheme="http://blog.msiter.com/tags/p2p/"/>
    
      <category term="consensus" scheme="http://blog.msiter.com/tags/consensus/"/>
    
  </entry>
  
  <entry>
    <title>区块链 P2P 认识</title>
    <link href="http://blog.msiter.com/q,okl%20p2prs,z-20180716.html"/>
    <id>http://blog.msiter.com/q,okl p2prs,z-20180716.html</id>
    <published>2018-07-16T15:05:43.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，区块链的不同节点要互相交换数据，无论是交易的发布，以及挖矿成功的发布</p><p>我最开始学习这个时候就很疑惑，他是怎么知道我的呢？</p><p>本次文章，我打算搞清楚四件事儿</p><ol><li>我如何知道别人的</li><li>节点间的互相通讯</li><li>他是怎么知道我的</li><li>我们如何交换数据</li></ol><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="我如何知道别人的" style="display: inline;"><a href="#我如何知道别人的" class="headerlink" title="我如何知道别人的"></a>我如何知道别人的</h2><p>我们可以发现在，<a href="https://en.bitcoin.it/wiki/Satoshi_Client_Node_Discovery" target="_blank" rel="noopener">bitcoin的wiki</a>上有以下方法</p><ol><li>Nodes discover their own external address by various methods.<br> 节点通过各种方法发现自己​​的外部地址。</li><li>Nodes receive the callback address of remote nodes that connect to them.<br> 节点接收连接到它们的远程节点的回调地址。</li><li>Nodes makes DNS request to receive IP addresses.<br> 节点使DNS请求接收IP地址。</li><li>Nodes can use addresses hard coded into the software.<br> 节点可以使用硬编码到软件中的地址。</li><li>Nodes exchange addresses with other nodes.<br> 节点与其他节点交换地址。</li><li>Nodes store addresses in a database and read that database on startup.<br> 节点在数据库中存储地址并在启动时读取该数据库。</li><li>Nodes can be provided addresses as command line arguments<br> 节点可以作为命令行参数提供地址</li><li>Nodes read addresses from a user provided text file on startup<br> 节点在启动时从用户提供的文本文件中读取地址</li></ol><p>我们分开来介绍一下。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-discover-their-own-external-address-by-various-methods" style="display: inline;"><a href="#Nodes-discover-their-own-external-address-by-various-methods" class="headerlink" title="Nodes discover their own external address by various methods."></a>Nodes discover their own external address by various methods.</h3><p>大致的意思，就是让我们自己想办法，找到自己的外部ip地址。</p><p>客户端里有内置的方法，通过很多公共的服务，比如 checkip.dyndns.org，当然客户端有内置的一系列链接，来获取ip，如果失败，就一直请求下去。直到可以获取完成。</p><p>这个方法，目前已经被废除了</p><p>在<a href="https://github.com/bitcoin/bitcoin/pull/3088" target="_blank" rel="noopener">#3088</a> 提交中，建议不要使用该方法，具体原因可以自行查看。</p><p>目前的代码，我查找到一些位于<a href="https://github.com/bitcoin/bitcoin/blob/172f984f598f471f970d2ed4bf6379e9aa33901e/src/net.cpp#L1499" target="_blank" rel="noopener">net.cpp#L1499</a>代码 ，好像是为了获取本机的外网的代码</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">char</span> externalIPAddress<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">UPNP_GetExternalIPAddress</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>controlURL<span class="token punctuation">,</span> data<span class="token punctuation">.</span>first<span class="token punctuation">.</span>servicetype<span class="token punctuation">,</span> externalIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> UPNPCOMMAND_SUCCESS<span class="token punctuation">)</span>    <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: GetExternalIPAddress() returned %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>externalIPAddress<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CNetAddr resolved<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LookupHost</span><span class="token punctuation">(</span>externalIPAddress<span class="token punctuation">,</span> resolved<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: ExternalIPAddress = %s\n"</span><span class="token punctuation">,</span> resolved<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">AddLocal</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> LOCAL_UPNP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: GetExternalIPAddress failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了 <code>miniupnpc</code> 库，针对于 upnp的操作</p><p>UPNP_GetExternalIPAddress：根据指定设备获得外网ip地址</p><p>后面，我才知道这个东西…….庞大…. 后面会做介绍</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-receive-the-callback-address-of-remote-nodes-that-connect-to-them" style="display: inline;"><a href="#Nodes-receive-the-callback-address-of-remote-nodes-that-connect-to-them" class="headerlink" title="Nodes receive the callback address of remote nodes that connect to them."></a>Nodes receive the callback address of remote nodes that connect to them.</h3><p>在版本 0.6.x开始，比特币客户端，默认不在使用IRC引导，并且从0.8.2版本开始，对IRC引导的支持完全删除。</p><p>这里，我们还是解释一下的他的工作原理。</p><p>在<a href="https://github.com/bitcoin/bitcoin/blob/847593228de8634bf6ef5933a474c7e63be59146/src/irc.cpp#L231" target="_blank" rel="noopener">代码</a>中,我们可以发现， 在我们的客户端初始化后，我们会默认的使用 </p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp">CService <span class="token function">addrConnect</span><span class="token punctuation">(</span><span class="token string">"92.243.23.21"</span><span class="token punctuation">,</span> <span class="token number">6667</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// irc.lfnet.org</span>CService <span class="token function">addrIRC</span><span class="token punctuation">(</span><span class="token string">"irc.lfnet.org"</span><span class="token punctuation">,</span> <span class="token number">6667</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>addrIRC<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    addrConnect <span class="token operator">=</span> addrIRC<span class="token punctuation">;</span>SOCKET hSocket<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ConnectSocket</span><span class="token punctuation">(</span>addrConnect<span class="token punctuation">,</span> hSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IRC connect failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nErrorWait <span class="token operator">=</span> nErrorWait <span class="token operator">*</span> <span class="token number">11</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Wait</span><span class="token punctuation">(</span>nErrorWait <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>irc.lfnet.rog 的服务，随机的进入频道 <code>#bitcoin00-#bitcoin99</code>。</p><p>随后，发布 who 命令，之后线程会解析出现的打印，并且解析IP地址。这是一个循环，直到节点关闭</p><p>当我们发现了地址之后，会把当前的时间戳设置给这个地址，但是他会使用51分钟的惩罚,也就是把这个时间增加51分钟… </p><p>该代码位于 <a href="https://github.com/bitcoin/bitcoin/blob/847593228de8634bf6ef5933a474c7e63be59146/src/irc.cpp#L348" target="_blank" rel="noopener">irc.cpp 348 行处</a></p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>boost<span class="token operator">::</span>algorithm<span class="token operator">::</span><span class="token function">starts_with</span><span class="token punctuation">(</span>strName<span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CAddress addr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">DecodeAddress</span><span class="token punctuation">(</span>strName<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        addr<span class="token punctuation">.</span>nTime <span class="token operator">=</span> <span class="token function">GetAdjustedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addrman<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> addrConnect<span class="token punctuation">,</span> <span class="token number">51</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IRC got new address: %s\n"</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nGotIRCAddresses<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IRC decode failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么。。。我也不知道。。。。这看起来很奇怪，就像你发现这个地址是在51分钟之后….</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-makes-DNS-request-to-receive-IP-addresses" style="display: inline;"><a href="#Nodes-makes-DNS-request-to-receive-IP-addresses" class="headerlink" title="Nodes makes DNS request to receive IP addresses."></a>Nodes makes DNS request to receive IP addresses.</h3><p>在启动的时候，如果需要发现对等网络节点，客户端会发起DNS请求，来了解其他对等节点的地址。</p><p>客户端会请求DNS服务的主机名列表。 截止到 2018-7-12. l列表来自 <a href="https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L132" target="_blank" rel="noopener">chainparams.cpp</a>，包括：</p><ul class="g-list-style-circle"><li>seed.bitcoin.sipa.be</li><li>dnsseed.bluematt.me</li><li>dnsseed.bitcoin.dashjr.org</li><li>seed.bitcoinstats.com</li><li>seed.bitcoin.jonasschnelli.ch</li><li>seed.btc.petertodd.org</li><li>seed.bitcoin.sprovoost.nl</li></ul><p>我们可以使用 <code>dig</code> 命令来测试一下</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"> <span class="token operator">%</span>  dig dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">></span> DiG <span class="token number">9.10</span><span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">></span> dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">;</span><span class="token punctuation">;</span> global options<span class="token punctuation">:</span> <span class="token operator">+</span>cmd<span class="token punctuation">;</span><span class="token punctuation">;</span> Got answer<span class="token punctuation">:</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token operator">></span><span class="token operator">></span>HEADER<span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">-</span> opcode<span class="token punctuation">:</span> QUERY<span class="token punctuation">,</span> status<span class="token punctuation">:</span> NOERROR<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">64930</span><span class="token punctuation">;</span><span class="token punctuation">;</span> flags<span class="token punctuation">:</span> qr rd ra<span class="token punctuation">;</span> QUERY<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> ANSWER<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> AUTHORITY<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> ADDITIONAL<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> OPT PSEUDOSECTION<span class="token punctuation">:</span><span class="token punctuation">;</span> EDNS<span class="token punctuation">:</span> version<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> flags<span class="token punctuation">:</span><span class="token punctuation">;</span> udp<span class="token punctuation">:</span> <span class="token number">4096</span><span class="token punctuation">;</span><span class="token punctuation">;</span> QUESTION SECTION<span class="token punctuation">:</span><span class="token punctuation">;</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span>    IN    A<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION<span class="token punctuation">:</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">94.102</span><span class="token punctuation">.</span><span class="token number">220.92</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">82.43</span><span class="token punctuation">.</span><span class="token number">171.91</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.216</span><span class="token punctuation">.</span><span class="token number">38.201</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">35.185</span><span class="token punctuation">.</span><span class="token number">239.122</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">213.239</span><span class="token punctuation">.</span><span class="token number">201.46</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">178.62</span><span class="token punctuation">.</span><span class="token number">242.100</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">109.197</span><span class="token punctuation">.</span><span class="token number">127.221</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">95.158</span><span class="token punctuation">.</span><span class="token number">39.64</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">67.193</span><span class="token punctuation">.</span><span class="token number">68.147</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.194</span><span class="token punctuation">.</span><span class="token number">75.63</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">24.233</span><span class="token punctuation">.</span><span class="token number">245.188</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">52.60</span><span class="token punctuation">.</span><span class="token number">106.162</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">14.2</span><span class="token punctuation">.</span><span class="token number">124.84</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">101.65</span><span class="token punctuation">.</span><span class="token number">253.15</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">75.109</span><span class="token punctuation">.</span><span class="token number">56.138</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.219</span><span class="token punctuation">.</span><span class="token number">96.50</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">82.213</span><span class="token punctuation">.</span><span class="token number">234.197</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">111.206</span><span class="token punctuation">.</span><span class="token number">188.73</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">117.62</span><span class="token punctuation">.</span><span class="token number">107.81</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.191</span><span class="token punctuation">.</span><span class="token number">24.206</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">76.89</span><span class="token punctuation">.</span><span class="token number">163.33</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.184</span><span class="token punctuation">.</span><span class="token number">20.43</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">18.197</span><span class="token punctuation">.</span><span class="token number">78.199</span>dnsseed<span class="token punctuation">.</span>bitcoin<span class="token punctuation">.</span>dashjr<span class="token punctuation">.</span>org<span class="token punctuation">.</span> <span class="token number">3262</span> IN    A    <span class="token number">221.225</span><span class="token punctuation">.</span><span class="token number">194.182</span><span class="token punctuation">;</span><span class="token punctuation">;</span> Query time<span class="token punctuation">:</span> <span class="token number">26</span> msec<span class="token punctuation">;</span><span class="token punctuation">;</span> SERVER<span class="token punctuation">:</span> <span class="token number">114.114</span><span class="token punctuation">.</span><span class="token number">114.114</span>#<span class="token number">53</span><span class="token punctuation">(</span><span class="token number">114.114</span><span class="token punctuation">.</span><span class="token number">114.114</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span> WHEN<span class="token punctuation">:</span> Thu Jul <span class="token number">12</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">45</span> CST <span class="token number">2018</span><span class="token punctuation">;</span><span class="token punctuation">;</span> MSG SIZE  rcvd<span class="token punctuation">:</span> <span class="token number">439</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-can-use-addresses-hard-coded-into-the-software" style="display: inline;"><a href="#Nodes-can-use-addresses-hard-coded-into-the-software" class="headerlink" title="Nodes can use addresses hard coded into the software."></a>Nodes can use addresses hard coded into the software.</h3><p>在<a href="https://github.com/bitcoin/bitcoin/blob/master/src/chainparamsseeds.h" target="_blank" rel="noopener">chainparamsseeds.h</a>本身存在一批种子节点，这些节点是硬编码在代码中的。</p><p>在这里就会获取到一批种子结果，当然，在有可能的情况下，代码会尽量的从种子节点转移到其他节点，避免种子节点过载。</p><p>一旦本地有了足够的地址（可以从种子节点获知），链接线程将关闭种子节点链接。</p><p>目前的地址为：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> BITCOIN_CHAINPARAMSSEEDS_H</span><span class="token macro property">#<span class="token directive keyword">define</span> BITCOIN_CHAINPARAMSSEEDS_H</span><span class="token comment" spellcheck="true">/** * List of fixed seed nodes for the bitcoin network * AUTOGENERATED by contrib/seeds/generate-seeds.py * * Each line contains a 16-byte IPv6 address and a port. * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly. */</span><span class="token keyword">static</span> SeedSpec6 pnSeed6_main<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xae</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8333</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，，表示看不懂… 怎么这么多位….</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-exchange-addresses-with-other-nodes" style="display: inline;"><a href="#Nodes-exchange-addresses-with-other-nodes" class="headerlink" title="Nodes exchange addresses with other nodes."></a>Nodes exchange addresses with other nodes.</h3><p>和其他的节点交换地址～</p><p><b style="color: red">bang bang bang！！！ 敲黑板了！  重点了！  重点了！！！</b></p><p>这节，我们会单独到下一个章节，重起一章，进行讲解</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-store-addresses-in-a-database-and-read-that-database-on-startup" style="display: inline;"><a href="#Nodes-store-addresses-in-a-database-and-read-that-database-on-startup" class="headerlink" title="Nodes store addresses in a database and read that database on startup."></a>Nodes store addresses in a database and read that database on startup.</h3><p>在调用 AddAddress() 时，地址会存储在数据库中。</p><p>当 AppInit2() 调用位于 <a href="https://github.com/bitcoin/bitcoin/blob/a139ed74f2a5764afbd678c0e4eb6143455a3a49/src/db.cpp" target="_blank" rel="noopener">db.cpp</a>的 LoanAddress() 时，会在启动时读取地址。</p><p>目前该方法，已经在版本删除，代码提交在 <a href="https://github.com/bitcoin/bitcoin/pull/545" target="_blank" rel="noopener">pull #545</a>,具体的原因就是 没有人用这玩意。留着没意思….</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-can-be-provided-addresses-as-command-line-arguments" style="display: inline;"><a href="#Nodes-can-be-provided-addresses-as-command-line-arguments" class="headerlink" title="Nodes can be provided addresses as command line arguments"></a>Nodes can be provided addresses as command line arguments</h3><p>可以使用命令行，指定要连接的节点</p><pre class="line-numbers language-shell g-mb-30"><code class="language-shell">-addnode <ip><span aria-hidden="true" class="line-numbers-rows"><span></span></span></ip></code></pre><p>可以指定多个节点。</p><p>命令行上提供的地址最初为0时间戳，因此不会相应 <code>getaddr</code> 请求而通告他们。<br>用户还可以使用 <code>-connect &lt;ip&gt;</code> 指定要连接的地址。可以指定多个节点。</p><p><code>-connect</code>  与 <code>-addnode</code> 参数的不同之处在于它并没有将地址添加到数据中，仅仅是使用这些地址</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Nodes-read-addresses-from-a-user-provided-text-file-on-startup" style="display: inline;"><a href="#Nodes-read-addresses-from-a-user-provided-text-file-on-startup" class="headerlink" title="Nodes read addresses from a user provided text file on startup"></a>Nodes read addresses from a user provided text file on startup</h3><p>客户端会自动读取比特币目录下的名为 <code>addr.txt</code>  的文件，并把在其中找到的任何地址添加为节点地址。这些节点没有特别优先于其他地址。</p><p>他们被添加时，将被赋予零时间戳，因此他们不会相应 <code>getaddr</code> 请求而被通告</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="疑惑！！！" style="display: inline;"><a href="#疑惑！！！" class="headerlink" title="疑惑！！！"></a>疑惑！！！</h3><p>在这里你肯定很疑惑！  零时间戳！  是什么鬼吧？  或者，你也许压根没注意到这个东西… 好吧，接下来我们看看节点间是如何互相通讯的吧</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="节点间的通讯" style="display: inline;"><a href="#节点间的通讯" class="headerlink" title="节点间的通讯"></a>节点间的通讯</h2><p>在这里，我们介绍的事以bitcoin core客户端为例的。</p><p>节点必须连接到若干不同的对等节点才能在比特币网络中建立通向比特币网络的种类各异的路径（path）。</p><p>由于节点可以随时加入和离开，通讯路径是不可靠的。</p><p>因此，节点必须持续进行两项工作：在失去已有连接时发现新节点，并在其他节点启动时为其提供帮助。节点启动时只需要一个连接，因为第一个节点可以将它引荐给它的对等节点，而这些节点又会进一步提供引荐。一个节点，如果连接到大量的其他对等节点，这既没必要，也是对网络资源的浪费。在启动完成后，节点会记住它最近成功连接的对等节点；因此，当重新启动后它可以迅速与先前的对等节点网络重新建立连接。如果先前的网络的对等节点对连接请求无应答，该节点可以使用种子节点进行重启动。</p><p>如果已建立的连接没有数据通信，所在的节点会定期发送信息以维持连接。如果节点持续某个连接长达90分钟没有任何通信，它会被认为已经从网络中断开，网络将开始查找一个新的对等节点。因此，比特币网络会随时根据变化的节点及网络问题进行动态调整，不需经过中心化的控制即可进行规模增、减的有机调整。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="消息的结构" style="display: inline;"><a href="#消息的结构" class="headerlink" title="消息的结构"></a>消息的结构</h3><p>在节点与对等节点交流中，会发送一段数据，这些数据的结构都是以下结构。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>magic</td><td>uint32_t</td><td>Magic value indicating message origin network, and used to seek to next message when stream state is unknown</td></tr><tr><td>12</td><td>command</td><td>char[12]</td><td>ASCII string identifying the packet content, NULL padded (non-NULL padding results in packet rejected)</td></tr><tr><td>4</td><td>length</td><td>uint32_t</td><td>Length of payload in number of bytes</td></tr><tr><td>4</td><td>checksum</td><td>uint32_t</td><td>First 4 bytes of sha256(sha256(payload))</td></tr><tr><td>?</td><td>payload</td><td>uchar[]</td><td>The actual data</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="神奇数" style="display: inline;"><a href="#神奇数" class="headerlink" title="神奇数"></a>神奇数</h4><p>其中 magic 字段，是一个在bitcoin 硬性编码的值。其目的是作为两个消息间的间隔，其值会根据其所在的网络环境进行选择。其位于 <a href="https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp" target="_blank" rel="noopener">chainparams.cpp</a></p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * The message start string is designed to be unlikely to occur in normal data. * The characters are rarely used upper ASCII, not valid as UTF-8, and produce * a large 32-bit integer with any alignment. */</span>pchMessageStart<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span>pchMessageStart<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xbe</span><span class="token punctuation">;</span>pchMessageStart<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xb4</span><span class="token punctuation">;</span>pchMessageStart<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xd9</span><span class="token punctuation">;</span>nDefaultPort <span class="token operator">=</span> <span class="token number">8333</span><span class="token punctuation">;</span>nPruneAfterHeight <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上只是 主网的神奇数，其他的神奇数如下。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Network</th><th>Magic value</th><th>Sent over wire as</th></tr></thead><tbody><tr><td>main</td><td>0xD9B4BEF9</td><td>F9 BE B4 D9</td></tr><tr><td>testnet</td><td>0xDAB5BFFA</td><td>FA BF B5 DA</td></tr><tr><td>testnet3</td><td>0x0709110B</td><td>0B 11 09 07</td></tr><tr><td>namecoin</td><td>0xFEB4BEF9</td><td>F9 BE B4 FE</td></tr></tbody>                    </table>                </div>            </div><p>其中在消息中会出现其他的数据结构，在这里也总结一下：</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Varint" style="display: inline;"><a href="#Varint" class="headerlink" title="Varint"></a>Varint</h4><p>Varint 是一个变长的参数。<strong>Variable length integer</strong></p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Value</th><th>Storage length</th><th>Format</th></tr></thead><tbody><tr><td>&lt; 0xFD</td><td>1</td><td>uint8_t</td></tr><tr><td>&lt;= 0xFFFF</td><td>3</td><td>0xFD followed by the length as uint16_t</td></tr><tr><td>&lt;= 0xFFFF FFFF</td><td>5</td><td>0xFE followed by the length as uint32_t</td></tr><tr><td>-</td><td>9</td><td>0xFF followed by the length as uint64_t</td></tr></tbody>                    </table>                </div>            </div><p>解析的步骤如下:</p><ul class="g-list-style-circle"><li>读取第 1 个字节, 假设它的值为 <code>v1</code></li><li>如果 <code>v1 &lt; 0xF</code>, 那么 v1 就是 In-counter 的值</li><li>如果 <code>v1 == 0xFD</code>, 那么再读取 2 个字节, 这 2 个字节以 little-endian 形式存储了 In-counter 值</li><li>如果 <code>v1 == 0xFE</code>, 那么再读取 4 个字节, 这 4 个字节以 little-endian 形式存储了 In-counter 值</li><li>如果 <code>v1 == 0xFF</code>, 那么再读取 8 个字节, 这 8 个字节以 little-endian 形式存储了 In-counter 值</li></ul><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Variable-length-string" style="display: inline;"><a href="#Variable-length-string" class="headerlink" title="Variable length string"></a>Variable length string</h4><p>可变长度字符串可以使用可变长度整数存储，后跟字符串本身。结构如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>length</td><td>var_int</td><td>Length of the string</td></tr><tr><td>?</td><td>string</td><td>char[]</td><td>The string itself (can be empty)</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Network-address" style="display: inline;"><a href="#Network-address" class="headerlink" title="Network address"></a>Network address</h4><p>当某处需要网络地址时，使用此结构。网络地址不以版本消息中的时间戳为前缀。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>time</td><td>uint32</td><td>the Time (version &gt;= 31402). <strong>Not present in version message</strong>.</td></tr><tr><td>8</td><td>services</td><td>uint64_t</td><td>same service(s) listed in version</td></tr><tr><td>16</td><td>IPv6/4</td><td>char[16]</td><td>IPv6 address. Network byte order. The original client only supported IPv4 and only read the last 4 bytes to get the IPv4 address. However, the IPv4 address is written into the message as a 16 byte IPv4-mapped IPv6 address <br> (12 bytes 00 00 00 00 00 00 00 00 00 00 FF FF, followed by the 4 bytes of the IPv4 address).</td></tr><tr><td>2</td><td>port</td><td>uint16_t</td><td>port number, network byte order</td></tr></tbody>                    </table>                </div>            </div><p>hexdump:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">0000   01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................0010   00 00 FF FF 0A 00 00 01  20 8D                    ........ .Network address: 01 00 00 00 00 00 00 00                         - 1 (NODE_NETWORK: see services listed under version command) 00 00 00 00 00 00 00 00 00 00 FF FF 0A 00 00 01 - IPv6: ::ffff:a00:1 or IPv4: 10.0.0.1 20 8D                                           - Port 8333</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Inventory-Vectors" style="display: inline;"><a href="#Inventory-Vectors" class="headerlink" title="Inventory Vectors"></a>Inventory Vectors</h4><p>清单向量用于通知其他节点有关他们拥有的对象或正在请求的数据。</p><p>结构如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>type</td><td>uint32_t</td><td>Identifies the object type linked to this inventory</td></tr><tr><td>32</td><td>hash</td><td>char[32]</td><td>Hash of the object</td></tr></tbody>                    </table>                </div>            </div><p>目前的type类型有可能是以下</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Value</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>ERROR</td><td>Any data of with this number may be ignored</td></tr><tr><td>1</td><td>MSG_TX</td><td>Hash is related to a transaction</td></tr><tr><td>2</td><td>MSG_BLOCK</td><td>Hash is related to a data block</td></tr><tr><td>3</td><td>MSG_FILTERED_BLOCK</td><td>Hash of a block header; identical to MSG_BLOCK. Only to be used in getdata message. Indicates the reply should be a merkleblock message rather than a block message; this only works if a bloom filter has been set.</td></tr><tr><td>4</td><td>MSG_CMPCT_BLOCK</td><td>Hash of a block header; identical to MSG_BLOCK. Only to be used in getdata message. Indicates the reply should be a cmpctblock message. See<a href="https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki" target="_blank" rel="noopener"> BIP 152</a> for more info.</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="command" style="display: inline;"><a href="#command" class="headerlink" title="command"></a>command</h4><p>我们可以看到 第二个参数为 command ，目前bitcoin的 command 列表如下。</p><ul class="g-list-style-circle"><li><strong>version</strong> - Information about program version and block count. Exchanged when first connecting.</li><li><strong>verack</strong> - Sent in response to a version message to acknowledge that we are willing to connect.</li><li><strong>addr</strong> - List of one or more IP addresses and ports.</li><li><strong>inv</strong> - “I have these blocks/transactions: …” Normally sent only when a new block or transaction is being relayed. This is only a list, not the actual data.</li><li><strong>getdata</strong> - Request a single block or transaction by hash.</li><li><strong>getblocks</strong> - Request an inv of all blocks in a range.</li><li><strong>getheaders</strong> - Request a headers message containing all block headers in a range.</li><li><strong>tx</strong> - Send a transaction. This is sent only in response to a getdata request.</li><li><strong>block</strong> - Send a block. This is sent only in response to a getdata request.</li><li><strong>headers</strong> - Send up to 2,000 block headers. Non-generators can download the headers of blocks instead of entire blocks.</li><li><strong>getaddr</strong> - Request an addr message containing a bunch of known-active peers (for bootstrapping).</li><li><strong>submitorder, checkorder, and reply</strong> - Used when performing an IP transaction.</li><li><strong>alert</strong> - Send a network alert.</li><li><strong>ping</strong> - Does nothing. Used to check that the connection is still online. A TCP error will occur if the connection has died.</li></ul><p>以上就是目前所有的消息类型。我们来看看这些命令的，数据结构</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="version" style="display: inline;"><a href="#version" class="headerlink" title="version"></a>version</h3><p>我们获取到了对等网络的地址之后，就需要进行握手协议了。也就是向目标地址发送一个 version的消息，其中 <a href="https://en.bitcoin.it/wiki/Protocol_documentation#version" target="_blank" rel="noopener">version</a> 的消息数据结构包含。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>int32_t</td><td>Identifies protocol version being used by the node</td></tr><tr><td>8</td><td>services</td><td>uint64_t</td><td>bitfield of features to be enabled for this connection</td></tr><tr><td>8</td><td>timestamp</td><td>int64_t</td><td>standard UNIX timestamp in seconds</td></tr><tr><td>26</td><td>addr_recv</td><td>net_addr</td><td>The network address of the node receiving this message</td></tr><tr><td>Fields below require version ≥ 106</td></tr><tr><td>26</td><td>addr_from</td><td>net_addr</td><td>The network address of the node emitting this message</td></tr><tr><td>8</td><td>nonce</td><td>uint64_t</td><td>Node random nonce, randomly generated every time a version packet is sent. This nonce is used to detect connections to self.</td></tr><tr><td>?</td><td>user_agent</td><td>var_str</td><td>User Agent (0x00 if string is 0 bytes long)</td></tr><tr><td>4</td><td>start_height</td><td>int32_t</td><td>The last block received by the emitting node</td></tr><tr><td>Fields below require version ≥ 70001</td></tr><tr><td>1</td><td>relay</td><td>bool</td><td>Whether the remote peer should announce relayed transactions or not, see BIP 0037</td></tr></tbody>                    </table>                </div>            </div><p>对等节点收到version消息后，会回应verack进行确认并建立连接。有时候对等端可能需要互换连接并连回起始节点，此时对等端也会发送该节点的version消息。</p><p>参考下图:</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/p2p network/20180512170431878.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/p2p network/20180512170431878.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">握手协议示意图</figcaption></figure></p><p>其中具体的数据我们参考</p><p>Version 0.3.19 hexdump:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">0000   F9 BE B4 D9 76 65 72 73  69 6F 6E 00 00 00 00 00   ....version.....0010   55 00 00 00 9C 7C 00 00  01 00 00 00 00 00 00 00   U....|..........0020   E6 15 10 4D 00 00 00 00  01 00 00 00 00 00 00 00   ...M............0030   00 00 00 00 00 00 00 00  00 00 FF FF 0A 00 00 01   ................0040   20 8D 01 00 00 00 00 00  00 00 00 00 00 00 00 00   ................0050   00 00 00 00 FF FF 0A 00  00 02 20 8D DD 9D 20 2C   .......... ... ,0060   3A B4 57 13 00 55 81 01  00                        :.W..U...Message header: F9 BE B4 D9                                                                   - Main network magic bytes 76 65 72 73 69 6F 6E 00 00 00 00 00                                           - &quot;version&quot; command 55 00 00 00                                                                   - Payload is 85 bytes long                                                                               - No checksum in version message until 20 February 2012. See https://bitcointalk.org/index.php?topic=55852.0Version message: 9C 7C 00 00                                                                   - 31900 (version 0.3.19) 01 00 00 00 00 00 00 00                                                       - 1 (NODE_NETWORK services) E6 15 10 4D 00 00 00 00                                                       - Mon Dec 20 21:50:14 EST 2010 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 0A 00 00 01 20 8D - Recipient address info - see Network Address 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 0A 00 00 02 20 8D - Sender address info - see Network Address DD 9D 20 2C 3A B4 57 13                                                       - Node random unique ID 00                                                                            - &quot;&quot; sub-version string (string is 0 bytes long) 55 81 01 00                                                                   - Last block sending node has is block #98645</code></pre><p>Version 60002 hexdump:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">0000   f9 be b4 d9 76 65 72 73 69 6f 6e 00 00 00 00 00  ....version.....0010   64 00 00 00 35 8d 49 32 62 ea 00 00 01 00 00 00  d...5.I2b.......0020   00 00 00 00 11 b2 d0 50 00 00 00 00 01 00 00 00  .......P........0030   00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff  ................0040   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0050   00 00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00  ................0060   3b 2e b3 5d 8c e6 17 65 0f 2f 53 61 74 6f 73 68  ;..]...e./Satosh0070   69 3a 30 2e 37 2e 32 2f c0 3e 03 00              i:0.7.2/.&gt;..Message Header: F9 BE B4 D9                                                                   - Main network magic bytes 76 65 72 73 69 6F 6E 00 00 00 00 00                                           - &quot;version&quot; command 64 00 00 00                                                                   - Payload is 100 bytes long 3B 64 8D 5A                                                                   - payload checksumVersion message: 62 EA 00 00                                                                   - 60002 (protocol version 60002) 01 00 00 00 00 00 00 00                                                       - 1 (NODE_NETWORK services) 11 B2 D0 50 00 00 00 00                                                       - Tue Dec 18 10:12:33 PST 2012 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00 - Recipient address info - see Network Address 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00 - Sender address info - see Network Address 3B 2E B3 5D 8C E6 17 65                                                       - Node ID 0F 2F 53 61 74 6F 73 68 69 3A 30 2E 37 2E 32 2F                               - &quot;/Satoshi:0.7.2/&quot; sub-version string (string is 15 bytes long) C0 3E 03 00                                                                   - Last block sending node has is block #212672</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="verack" style="display: inline;"><a href="#verack" class="headerlink" title="verack"></a>verack</h3>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>value</th><th>name</th><th>description</th></tr></thead><tbody><tr><td>1</td><td>NODE_NETWORK</td><td>This node can be asked for full blocks instead of just headers.</td></tr><tr><td>2</td><td>NODE_GETUTXO</td><td>See <a href="https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki" target="_blank" rel="noopener">BIP 0064</a></td></tr><tr><td>4</td><td>NODE_BLOOM</td><td>See <a href="https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki" target="_blank" rel="noopener">BIP 0111</a></td></tr><tr><td>8</td><td>NODE_WITNESS</td><td>See <a href="https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki" target="_blank" rel="noopener">BIP 0144</a></td></tr><tr><td>1024</td><td>NODE_NETWORK_LIMITED</td><td>See <a href="https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki" target="_blank" rel="noopener">BIP 0159</a></td></tr></tbody>                    </table>                </div>            </div><p>verack消息以回复版本发送。 此消息仅包含带有命令字符串“verack”的消息头。</p><p>verack hexdump:</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">0000   F9 BE B4 D9 76 65 72 61  63 6B 00 00 00 00 00 00   ....verack......0010   00 00 00 00 5D F6 E0 E2                            ........Message header: F9 BE B4 D9                          - Main network magic bytes 76 65 72 61  63 6B 00 00 00 00 00 00 - &quot;verack&quot; command 00 00 00 00                          - Payload is 0 bytes long 5D F6 E0 E2                          - Checksum</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="addr" style="display: inline;"><a href="#addr" class="headerlink" title="addr"></a>addr</h3><p>提供有关网络的已知节点的信息。通常3小时后应该忘记未广播的节点</p><p>数据结构：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description Data type</th><th>Comments</th></tr></thead><tbody><tr><td>1+</td><td>count</td><td>var_int Number of address entries (max: 1000)</td></tr><tr><td>30x?</td><td>addr_list</td><td>(uint32_t + net_addr)[] Address of other nodes on the network. version &lt; 209 will only read the first one. The uint32_t is a timestamp (see note below).</td></tr></tbody>                    </table>                </div>            </div><p>在本本 31402之后，地址需要增加时间戳的前缀，如果这个地址没有时间戳，那么就不该把这个地址分享给其他的对等网络。</p><p>是为了最大程度确认该地址最近活动的时间，最大程度的确保分享出去的地址对等网络可以使用</p><p>hexdump 数据如下</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">0000   F9 BE B4 D9 61 64 64 72  00 00 00 00 00 00 00 00   ....addr........0010   1F 00 00 00 ED 52 39 9B  01 E2 15 10 4D 01 00 00   .....R9.....M...0020   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 FF   ................0030   FF 0A 00 00 01 20 8D                               ..... .Message Header: F9 BE B4 D9                                     - Main network magic bytes 61 64 64 72  00 00 00 00 00 00 00 00            - &quot;addr&quot; 1F 00 00 00                                     - payload is 31 bytes long ED 52 39 9B                                     - checksum of payloadPayload: 01                                              - 1 address in this messageAddress: E2 15 10 4D                                     - Mon Dec 20 21:50:10 EST 2010 (only when version is &gt;= 31402) 01 00 00 00 00 00 00 00                         - 1 (NODE_NETWORK service - see version message) 00 00 00 00 00 00 00 00 00 00 FF FF 0A 00 00 01 - IPv4: 10.0.0.1, IPv6: ::ffff:10.0.0.1 (IPv4-mapped IPv6 address) 20 8D                                           - port 8333</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="inv" style="display: inline;"><a href="#inv" class="headerlink" title="inv"></a>inv</h3><p>允许节点广播其对一个或多个对象的数据。它可以是未经请求的，也可以是对getblocks的回复。</p><p>有效载荷（最多50,000个条目，刚刚超过1.8兆字节）：</p><p>数据结构如下</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>count</td><td>var_int</td><td>Number of inventory entries</td></tr><tr><td>36x?</td><td>inventory</td><td>inv_vect[]</td><td>Inventory vectors</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="getdata" style="display: inline;"><a href="#getdata" class="headerlink" title="getdata"></a>getdata</h3><p>getdata用于响应inv，以检索特定对象的内容，并且通常在过滤已知元素之后在接收到inv包之后发送。它可用于检索事务，但仅当它们位于内存池或中继集中时 - 不允许对链中的事务进行任意访问，以避免客户端开始依赖具有完整事务索引的节点（现代节点不具有）。</p><p>有效载荷（最多50,000个条目，刚刚超过1.8兆字节）：</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>内存池，是未经确认处理的缓冲区</p></em>                                </div>                     <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>count</td><td>var_int</td><td>Number of inventory entries</td></tr><tr><td>36x?</td><td>inventory</td><td>inv_vect[]</td><td>Inventory vectors</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="notfound" style="display: inline;"><a href="#notfound" class="headerlink" title="notfound"></a>notfound</h3><p>notfound是对getdata的响应，如果无法中继任何请求的数据项，则发送该数据，例如，因为请求的事务不在内存池或中继集中。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>count</td><td>var_int</td><td>Number of inventory entries</td></tr><tr><td>36x?</td><td>inventory</td><td>inv_vect[]</td><td>Inventory vectors</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="getblocks" style="display: inline;"><a href="#getblocks" class="headerlink" title="getblocks"></a>getblocks</h3><p>返回一个inv数据包，其中包含在块定位器对象中最后一个已知散列之后开始的块列表，最多为hash_stop或500个块，以先到者为准。</p><p>定位器哈希由节点按消息中出现的顺序处理。如果在节点的主链中找到块散列，则通过inv消息返回其子节点列表，并且无论是否达到所请求的限制，都将忽略其余定位符。</p><p>要接收下一个块哈希，需要使用新的块定位器对象再次发出getblock。请记住，如果块定位器对象在无效分支上包含散列，则某些客户端可能会提供无效的块。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>ield Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>uint32_t</td><td>the protocol version</td></tr><tr><td>1+</td><td>hash count</td><td>var_int</td><td>number of block locator hash entries</td></tr><tr><td>32+</td><td>block locator hashes</td><td>char[32]</td><td>block locator object; newest back to genesis block (dense to start, but then sparse)</td></tr><tr><td>32</td><td>hash_stop</td><td>char[32]</td><td>hash of the last desired block; set to zero to get as many blocks as possible (500)</td></tr></tbody>                    </table>                </div>            </div><p>要创建块定位器哈希值，请继续推哈希值，直到返回到创世块。在向后推10个哈希后，向后的步骤会使每个循环加倍：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token comment" spellcheck="true">// From libbitcoin which is under AGPL</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>size_t<span class="token operator">></span> <span class="token function">block_locator_indexes</span><span class="token punctuation">(</span>size_t top_height<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>size_t<span class="token operator">></span> indexes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Modify the step in the iteration.</span>    int64_t step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Start at the top of the chain and work backwards.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>int64_t<span class="token punctuation">)</span>top_height<span class="token punctuation">;</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">-</span><span class="token operator">=</span> step<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Push top 10 indexes first, then back off exponentially.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span>            step <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        indexes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  Push the genesis block index.</span>    indexes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> indexes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，允许将较少的已知哈希值发送到最少只有一个哈希值。但是，块定位器对象的目的是检测调用者主链中的错误分支。如果对等方检测到您不在主链上，它将发送早于最后一个已知块的块哈希。因此，如果你只是发送你最后一次已知的哈希并且它不在主链上，那么对等体将从块＃1开始</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="getheaders" style="display: inline;"><a href="#getheaders" class="headerlink" title="getheaders"></a>getheaders</h3><p>返回一个头文件包，其中包含从块定位器对象中最后一个已知哈希之后开始的块头，最多为hash_stop或2000个块，以先到者为准。要接收下一个块头，需要使用新的块定位器对象再次发出getheaders。该getheaders命令使用瘦客户机快速下载块链，其中交易的内容是不相关的（因为他们不是我们的）。请记住，如果块定位器对象在无效分支上包含散列，则某些客户端可能会提供无效的块标头。</p><p>有效载荷：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>uint32_t</td><td>the protocol version</td></tr><tr><td>1+</td><td>hash count</td><td>var_int</td><td>number of block locator hash entries</td></tr><tr><td>32+</td><td>block locator hashes</td><td>char[32]</td><td>block locator object; newest back to genesis block (dense to start, but then sparse)</td></tr><tr><td>32</td><td>hash_stop</td><td>char[32]</td><td>hash of the last desired block header; set to zero to get as many blocks as possible (2000)</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="tx" style="display: inline;"><a href="#tx" class="headerlink" title="tx"></a>tx</h3><p>tx描述了比特币交易，以回复getdata</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>int32_t</td><td>Transaction data format version (note, this is signed)</td></tr><tr><td>0 or 2</td><td>flag</td><td>optional uint8_t[2]</td><td>If present, always 0001, and indicates the presence of witness data</td></tr><tr><td>1+</td><td>tx_in count</td><td>var_int</td><td>Number of Transaction inputs (never zero)</td></tr><tr><td>41+</td><td>tx_in</td><td>tx_in[]</td><td>A list of 1 or more transaction inputs or sources for coins</td></tr><tr><td>1+</td><td>tx_out count</td><td>var_int</td><td>Number of Transaction outputs</td></tr><tr><td>9+</td><td>tx_out</td><td>tx_out[]</td><td>A list of 1 or more transaction outputs or destinations for coins</td></tr><tr><td>0+</td><td>tx_witnesses</td><td>tx_witness[]</td><td>A list of witnesses, one for each input; omitted if flag is omitted above</td></tr><tr><td>4</td><td>lock_time</td><td>uint32_t</td><td>The block number or timestamp at which this transaction is unlocked: <br>  <table class="wikitable"><tbody><tr><th> Value </th><th> Description</th></tr><tr><td> 0 </td><td> Not locked</td></tr><tr><td> &lt; 500000000 </td><td> Block number at which this transaction is unlocked</td></tr><tr><td> &gt;= 500000000 </td><td> UNIX timestamp at which this transaction is unlocked</td></tr></tbody></table> <br> If all TxIn inputs have final (0xffffffff) sequence numbers then lock_time is irrelevant. Otherwise, the transaction may not be added to a block until after lock_time (see NLockTime).</td></tr></tbody>                    </table>                </div>            </div><p>Txin 数据结构</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>36</td><td>previous_output</td><td>outpoint</td><td>The previous output transaction reference, as an OutPoint structure</td></tr><tr><td>1+</td><td>script length</td><td>var_int</td><td>The length of the signature script</td></tr><tr><td>?</td><td>signature</td><td>script</td><td>uchar[]</td><td>Computational Script for confirming transaction authorization</td></tr><tr><td>4</td><td>sequence</td><td>uint32_t</td><td>Transaction version as defined by the sender. Intended for “replacement” of transactions when information is updated before inclusion into a block.</td></tr></tbody>                    </table>                </div>            </div><p>Txout 数据结构</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>32</td><td>hash</td><td>char[32]</td><td>The hash of the referenced transaction.</td></tr><tr><td>4</td><td>index</td><td>uint32_t</td><td>The index of the specific output in the transaction. The first output is 0, etc.</td></tr></tbody>                    </table>                </div>            </div><p>脚本结构由一系列与交易价值相关的信息和操作组成。（将来要扩展的结构…有关更多信息，请参阅<a href="https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h" target="_blank" rel="noopener">script.h</a>和<a href="https://github.com/bitcoin/bitcoin/blob/master/src/script/script.cpp" target="_blank" rel="noopener">script.cpp</a>以及脚本）<br>TxOut结构包含以下字段：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>8</td><td>value</td><td>int64_t</td><td>Transaction Value</td></tr><tr><td>1+</td><td>pk_script</td><td>length</td><td>var_int Length of the pk_script</td></tr><tr><td>?</td><td>pk_script</td><td>uchar[]</td><td>Usually contains the public key as a Bitcoin script setting up conditions to claim this output.</td></tr></tbody>                    </table>                </div>            </div><p>TxWitness结构由见证数据组件的var_int计数组成，后跟（对于每个见证数据组件）组件的var_int长度和原始组件数据本身。</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">000000  F9 BE B4 D9 74 78 00 00  00 00 00 00 00 00 00 00   ....tx..........000010  02 01 00 00 E2 93 CD BE  01 00 00 00 01 6D BD DB   .............m..000020  08 5B 1D 8A F7 51 84 F0  BC 01 FA D5 8D 12 66 E9   .[...Q........f.000030  B6 3B 50 88 19 90 E4 B4  0D 6A EE 36 29 00 00 00   .;P......j.6)...000040  00 8B 48 30 45 02 21 00  F3 58 1E 19 72 AE 8A C7   ..H0E.!..X..r...000050  C7 36 7A 7A 25 3B C1 13  52 23 AD B9 A4 68 BB 3A   .6zz%;..R#...h.:000060  59 23 3F 45 BC 57 83 80  02 20 59 AF 01 CA 17 D0   Y#?E.W... Y.....000070  0E 41 83 7A 1D 58 E9 7A  A3 1B AE 58 4E DE C2 8D   .A.z.X.z...XN...000080  35 BD 96 92 36 90 91 3B  AE 9A 01 41 04 9C 02 BF   5...6..;...A....000090  C9 7E F2 36 CE 6D 8F E5  D9 40 13 C7 21 E9 15 98   .~.6.m...@..!...0000A0  2A CD 2B 12 B6 5D 9B 7D  59 E2 0A 84 20 05 F8 FC   *.+..].}Y... ...0000B0  4E 02 53 2E 87 3D 37 B9  6F 09 D6 D4 51 1A DA 8F   N.S..=7.o...Q...0000C0  14 04 2F 46 61 4A 4C 70  C0 F1 4B EF F5 FF FF FF   ../FaJLp..K.....0000D0  FF 02 40 4B 4C 00 00 00  00 00 19 76 A9 14 1A A0   ..@KL......v....0000E0  CD 1C BE A6 E7 45 8A 7A  BA D5 12 A9 D9 EA 1A FB   .....E.z........0000F0  22 5E 88 AC 80 FA E9 C7  00 00 00 00 19 76 A9 14   &quot;^...........v..000100  0E AB 5B EA 43 6A 04 84  CF AB 12 48 5E FD A0 B7   ..[.Cj.....H^...000110  8B 4E CC 52 88 AC 00 00  00 00                     .N.R......Message header: F9 BE B4 D9                                       - main network magic bytes 74 78 00 00 00 00 00 00 00 00 00 00               - &quot;tx&quot; command 02 01 00 00                                       - payload is 258 bytes long E2 93 CD BE                                       - checksum of payloadTransaction: 01 00 00 00                                       - versionInputs: 01                                                - number of transaction inputsInput 1: 6D BD DB 08 5B 1D 8A F7  51 84 F0 BC 01 FA D5 8D  - previous output (outpoint) 12 66 E9 B6 3B 50 88 19  90 E4 B4 0D 6A EE 36 29 00 00 00 00 8B                                                - script is 139 bytes long 48 30 45 02 21 00 F3 58  1E 19 72 AE 8A C7 C7 36  - signature script (scriptSig) 7A 7A 25 3B C1 13 52 23  AD B9 A4 68 BB 3A 59 23 3F 45 BC 57 83 80 02 20  59 AF 01 CA 17 D0 0E 41 83 7A 1D 58 E9 7A A3 1B  AE 58 4E DE C2 8D 35 BD 96 92 36 90 91 3B AE 9A  01 41 04 9C 02 BF C9 7E F2 36 CE 6D 8F E5 D9 40  13 C7 21 E9 15 98 2A CD 2B 12 B6 5D 9B 7D 59 E2  0A 84 20 05 F8 FC 4E 02 53 2E 87 3D 37 B9 6F 09  D6 D4 51 1A DA 8F 14 04 2F 46 61 4A 4C 70 C0 F1  4B EF F5 FF FF FF FF                                       - sequenceOutputs: 02                                                - 2 Output TransactionsOutput 1: 40 4B 4C 00 00 00 00 00                           - 0.05 BTC (5000000) 19                                                - pk_script is 25 bytes long 76 A9 14 1A A0 CD 1C BE  A6 E7 45 8A 7A BA D5 12  - pk_script A9 D9 EA 1A FB 22 5E 88  ACOutput 2: 80 FA E9 C7 00 00 00 00                           - 33.54 BTC (3354000000) 19                                                - pk_script is 25 bytes long 76 A9 14 0E AB 5B EA 43  6A 04 84 CF AB 12 48 5E  - pk_script FD A0 B7 8B 4E CC 52 88  ACLocktime: 00 00 00 00                                       - lock time</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="block" style="display: inline;"><a href="#block" class="headerlink" title="block"></a>block</h3><p>响应于getdata消息发送块消息，该消息从块散列请求事务信息。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>int32_t</td><td>Block version information (note, this is signed)</td></tr><tr><td>32</td><td>prev_block</td><td>char[32]</td><td>The hash value of the previous block this particular block references</td></tr><tr><td>32</td><td>merkle_root</td><td>char[32]</td><td>The reference to a Merkle tree collection which is a hash of all transactions related to this block</td></tr><tr><td>4</td><td>timestamp</td><td>uint32_t</td><td>A Unix timestamp recording when this block was created (Currently limited to dates before the year 2106!)</td></tr><tr><td>4</td><td>bits</td><td>uint32_t</td><td>The calculated difficulty target being used for this block</td></tr><tr><td>4</td><td>nonce</td><td>uint32_t</td><td>The nonce used to generate this block… to allow variations of the header and compute different hashes</td></tr><tr><td>?</td><td>txn_count</td><td>var_int</td><td>Number of transaction entries</td></tr><tr><td>?</td><td>txns</td><td>tx[]</td><td>Block transactions, in format of “tx” command</td></tr></tbody>                    </table>                </div>            </div><p>标识每个块（并且必须具有0位运行）的SHA256哈希值是根据此结构的前6个字段计算的（版本，prev_block，merkle_root，时间戳，位，nonce和标准SHA256填充，使得两个64-<br>所有的字节块）而不是完整的块。<br>要计算哈希值，SHA256算法只需要处理两个块。<br>由于nonce字段在第二个块中，因此第一个块在挖掘期间保持不变，因此只需要处理第二个块。<br>但是，比特币散列是散列的散列，因此每次挖掘迭代都需要两个SHA256循环。<br>有关详细信息和示例，请参阅<a href="https://en.bitcoin.it/wiki/Block_hashing_algorithm" target="_blank" rel="noopener">块散列算法</a>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="headers" style="display: inline;"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>头包返回块头以响应getheaders包</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>count</td><td>var_int</td><td>Number of block headers</td></tr><tr><td>81x?</td><td>headers</td><td>block_header[]</td><td>Block headers</td></tr></tbody>                    </table>                </div>            </div><p>请注意，此数据包中的块头包含事务计数（var_int，因此每个头可能超过81个字节），而不是由矿工进行哈希处理的块头。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="getaddr" style="display: inline;"><a href="#getaddr" class="headerlink" title="getaddr"></a>getaddr</h3><p>getaddr消息向节点发送请求，询问有关已知活动对等体的信息，以帮助查找网络中的潜在节点。<br>对接收该消息的响应是与来自已知活动对等体的数据库的一个或多个对等体一起发送一个或多个addr消息。<br>典型的假设是，如果节点在过去三小时内发送消息，则该节点可能处于活动状态。<br>此消息不会传输其他数据。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="mempool" style="display: inline;"><a href="#mempool" class="headerlink" title="mempool"></a>mempool</h3><p>mempool消息向节点发送请求，询问有关已验证但尚未确认的事务的信息。<br>接收此消息的响应是一条inv消息，其中包含节点的mempool中所有事务的事务哈希。<br>此消息不会传输其他数据。<br>它在<a href="https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki" target="_blank" rel="noopener">BIP 35</a>中指定。从<a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki" target="_blank" rel="noopener">BIP 37</a>开始，如果加载了<a href="https://en.bitcoin.it/wiki/Protocol_documentation#filterload.2C_filteradd.2C_filterclear.2C_merkleblock" target="_blank" rel="noopener">布隆过滤器</a>，则只回复与过滤器匹配的事务。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="checkorder-submitorder-and-reply" style="display: inline;"><a href="#checkorder-submitorder-and-reply" class="headerlink" title="checkorder , submitorder and  reply"></a>checkorder , submitorder and  reply</h3><p>此消息用于<a href="https://en.bitcoin.it/wiki/IP_Transactions" target="_blank" rel="noopener">IP事务</a>。<br>由于<a href="https://en.bitcoin.it/wiki/IP_transaction" target="_blank" rel="noopener">IP事务</a>已被弃用，因此不再使用它</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>Sending bitcoins to an IP address was a convenient way of sending bitcoins to a Bitcoin address along with additional information.</p><ul class="g-list-style-circle"><li>Your client contacts the IP address to find out if they’re actually running Bitcoin and accepting IP transactions. If not, no transaction occurs.</li><li>Your additional information (“from”, “message”, etc.) is exchanged with the server.</li><li>The server generates a brand new Bitcoin public key and sends it to your client.</li><li>Your client sends coins to this public key.<br>Unfortunately, the implementation provided no authentication, so any “man in the middle” could have intercepted your bitcoins during the transaction. When they see that you’re sending a Bitcoin payment by IP address, they pretend to be the actual destination and send back their Bitcoin address. You end up sending bitcoins to the wrong person. It’s therefore no longer a good idea to send bitcoins in this way, especially if you’re using a proxy.</li></ul></em>                                </div>        <p>删除原因 参考 <a href="http://bitcointalk.org/index.php?topic=9334.0" target="_blank" rel="noopener"> Remove send to IP address and IP transactions support</a></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="ping" style="display: inline;"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>发送ping消息主要是为了确认TCP / IP连接仍然有效。<br>传输中的错误被假定为闭合连接，并且该地址作为当前对等体被移除。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>8</td><td>nonce</td><td>uint64_t</td><td>random nonce</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="pong" style="display: inline;"><a href="#pong" class="headerlink" title="pong"></a>pong</h3><p>发送pong消息以响应ping消息。<br>在现代协议版本中，使用ping中包含的随机数生成pong响应。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>8</td><td>nonce</td><td>uint64_t</td><td>nonce from ping</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="reject" style="display: inline;"><a href="#reject" class="headerlink" title="reject"></a>reject</h3><p>拒绝消息时 发送的消息</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>1+</td><td>message</td><td>var_str</td><td>type of message rejected</td></tr><tr><td>1</td><td>ccode</td><td>char</td><td>code relating to rejected message</td></tr><tr><td>1+</td><td>reason</td><td>var_str</td><td>text version of reason for rejection</td></tr><tr><td>0+</td><td>data</td><td>char</td><td>Optional extra data provided by some errors. Currently, all errors which provide this field fill it with the TXID or block header hash of the object being rejected, so the field is 32 bytes.</td></tr></tbody>                    </table>                </div>            </div><p>ccode </p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Value</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x01</td><td>REJECT_MALFORMED</td><td></td></tr><tr><td>0x10</td><td>REJECT_INVALID</td><td></td></tr><tr><td>0x11</td><td>REJECT_OBSOLETE</td><td></td></tr><tr><td>0x12</td><td>REJECT_DUPLICATE</td><td></td></tr><tr><td>0x40</td><td>REJECT_NONSTANDARD</td><td></td></tr><tr><td>0x41</td><td>REJECT_DUST</td><td></td></tr><tr><td>0x42</td><td>REJECT_INSUFFICIENTFEE</td><td></td></tr><tr><td>0x43</td><td>REJECT_CHECKPOINT</td><td></td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="filterload-filteradd-filterclear-merkleblock" style="display: inline;"><a href="#filterload-filteradd-filterclear-merkleblock" class="headerlink" title="filterload, filteradd, filterclear, merkleblock"></a>filterload, filteradd, filterclear, merkleblock</h3><p>这些消息与连接的Bloom过滤有关，并在<a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki" target="_blank" rel="noopener">BIP 0037</a>中定义。<br>filterload命令定义如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>filter</td><td>uint8_t[]</td><td>The filter itself is simply a bit field of arbitrary byte-aligned size. The maximum size is 36,000 bytes.</td></tr><tr><td>4</td><td>nHashFuncs</td><td>uint32_t</td><td>The number of hash functions to use in this filter. The maximum value allowed in this field is 50.</td></tr><tr><td>4</td><td>nTweak</td><td>uint32_t</td><td>A random value to add to the seed value in the hash function used by the bloom filter.</td></tr><tr><td>1</td><td>nFlags</td><td>uint8_t</td><td>A set of flags that control how matched items are added to the filter.</td></tr></tbody>                    </table>                </div>            </div><p>有关Bloom过滤器算法的说明以及如何为所需的误报率选择nHashFuncs和过滤器大小，请参见下文。<br>在接收到<code>filterload</code>命令后，远程对等体将立即将其宣告的广播事务（在inv数据包中）限制为与过滤器匹配的事务，其中匹配算法在下面指定。<br>标志控制匹配算法的更新行为。<br><code>filteradd</code>命令定义如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>?</td><td>data</td><td>uint8_t[]</td><td>The data element to add to the current filter.</td></tr></tbody>                    </table>                </div>            </div><p>数据字段的大小必须小于或等于520字节（任何可能匹配的对象的最大大小）。<br>给定的数据元素将添加到Bloom过滤器中。<br>必须先使用<code>filterload</code>提供过滤器。<br>如果将新密钥或脚本添加到客户端钱包，同时它与网络连接打开时，此命令很有用，它可以避免重新计算并向每个对等方发送全新过滤器的需要（尽管这样做通常建议使用<br>保持匿名）。</p><p><code>filterclear</code>命令根本没有参数。<br>在设置过滤器之后，节点不仅停止宣布不匹配的事务，它们还可以提供过滤的块。<br>过滤后的块由merkleblock消息定义，定义如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>Field Size</th><th>Description</th><th>Data type</th><th>Comments</th></tr></thead><tbody><tr><td>4</td><td>version</td><td>int32_t</td><td>Block version information, based upon the software version creating this block (note, this is signed)</td></tr><tr><td>32</td><td>prev_block</td><td>char[32]</td><td>The hash value of the previous block this particular block references</td></tr><tr><td>32</td><td>merkle_root</td><td>char[32]</td><td>The reference to a Merkle tree collection which is a hash of all transactions related to this block</td></tr><tr><td>4</td><td>timestamp</td><td>uint32_t</td><td>A timestamp recording when this block was created (Limited to 2106!)</td></tr><tr><td>4</td><td>bits</td><td>uint32_t</td><td>The calculated difficulty target being used for this block</td></tr><tr><td>4</td><td>nonce</td><td>uint32_t</td><td>The nonce used to generate this block… to allow variations of the header and compute different hashes</td></tr><tr><td>4</td><td>total_transactions</td><td>uint32_t</td><td>Number of transactions in the block (including unmatched ones)</td></tr><tr><td>?</td><td>hashes</td><td>uint256[]</td><td>hashes in depth-first order (including standard varint size prefix)</td></tr><tr><td>?</td><td>flags</td><td>byte[]</td><td>flag bits, packed per 8 in a byte, least significant bit first (including standard varint size prefix)</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="alert" style="display: inline;"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><p>Note: Support for alert messages has been removed from bitcoin core in March 2016. Read more <a href="https://bitcoin.org/en/alert/2016-11-01-alert-retirement" target="_blank" rel="noopener">here</a></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="sendheaders" style="display: inline;"><a href="#sendheaders" class="headerlink" title="sendheaders"></a>sendheaders</h3><p>请求直接标题公告。<br>收到此消息后，允许但不要求节点通过headers命令（而不是inv命令）通知新块。<br>协议版本&gt; = 70012或比特币核心版本&gt; = 0.12.0支持此消息。<br>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki" target="_blank" rel="noopener">BIP 130</a>。<br>此消息不会传输其他数据</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="feefilter" style="display: inline;"><a href="#feefilter" class="headerlink" title="feefilter"></a>feefilter</h3><p>有效负载总是8个字节长，它编码64位整数值（LSB / little endian）的费用。<br>该值代表最小费用，以每1000字节的satoshis表示。<br>在收到“费用过滤器”消息后，该节点将被允许但不是必需的，以过滤低于费用过滤器消息中提供的费用率的交易的交易保护，该费用被解释为每千字节的satoshis。<br>费用过滤器是附加的，用于交易的布隆过滤器，因此如果SPV客户端要加载布隆过滤器并发送费用过滤器消息，则只有在通过两个过滤器时才会中继交易。<br>如果存在，则从mempool消息生成的Inv也需要收费过滤器。<br>通过检查协议版本&gt; = 70013启用功能发现<br>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki" target="_blank" rel="noopener">BIP 133</a></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="sendcmpct" style="display: inline;"><a href="#sendcmpct" class="headerlink" title="sendcmpct"></a>sendcmpct</h3><ol><li>sendcmpct 消息被定义为包含1字节整数后跟8字节整数的消息，其中pchCommand ==“sendcmpct”。</li><li>第一个整数应解释为布尔值（并且必须具有1或0的值）</li><li>第二个整数应解释为little-endian版本号。发送sendcmpct消息的节点当前必须将此值设置为1。</li><li>收到第一个和第二个整数设置为1的“sendcmpct”消息后，节点应该通过发送cmpctblock消息来通告新的块。</li><li>在收到第一个整数设置为0的“sendcmpct”消息后，节点不应该通过发送cmpctblock消息来通告新块，但是应该通过发送由BIP130定义的inv或头来发布新块。</li><li>在收到第二个整数设置为1以外的“sendcmpct”消息时，节点必须将对等体视为没有收到消息（因为它表明对等体将提供意外的编码）</li><li>cmpctblock和/或其他消息）。这允许将来的版本发送具有不同版本的重复sendcmpct消息，作为未来版本的版本握手的一部分。</li><li>在发送sendcmpct消息之前，节点应该检查协议版本&gt; = 70014。</li><li>在收到来自该对等体的sendcmpct消息之前，节点不得向对等体发送对MSG_CMPCT_BLOCK对象的请求。<br>此消息仅受协议版本&gt; = 70014支持</li></ol><p>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki" target="_blank" rel="noopener">BIP 152</a>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="cmpctblock" style="display: inline;"><a href="#cmpctblock" class="headerlink" title="cmpctblock"></a>cmpctblock</h3><ol><li>cmpctblock消息被定义为包含序列化HeaderAndShortIDs消息和pchCommand ==“cmpctblock”的消息。</li><li>在发送sendcmpct消息后收到cmpctblock消息后，节点应该为他们可用的每个未确认的事务（即在他们的mempool中）计算短事​​务ID，并将每个事务ID与cmpctblock消息中的每个短事务ID进行比较。</li><li>在找到已经可用的事务之后，没有可用于重建完整块的所有事务的节点应该使用getblocktxn消息来请求丢失的事务。</li><li>节点绝不能发送cmpctblock消息，除非它们能够响应请求块中每个事务的getblocktxn消息。</li><li>节点必须不发送cmpctblock消息，而不验证标头是否正确提交到块中的每个事务，并且正确地构建在具有有效工作证明的现有链之上。节点可以在验证块中的每个事务有效地花费现有UTXO集条目之前发送cmpctblock。</li></ol><p>此消息仅受协议版本&gt; = 70014支持</p><p>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki" target="_blank" rel="noopener">BIP 152</a>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="getblocktxn" style="display: inline;"><a href="#getblocktxn" class="headerlink" title="getblocktxn"></a>getblocktxn</h3><ol><li>getblocktxn消息被定义为包含序列化BlockTransactionsRequest消息和pchCommand ==“getblocktxn”的消息。</li><li>在收到格式正确的getblocktxnmessage后，最近为这种消息的发送者提供了该消息中标识的块散列的cmpctblock的节点必须用适当的blocktxn消息进行响应。这样的blocktxn消息必须完全且仅包含在请求的顺序中在getblocktxn索引列表中指定的索引处的适当块中存在的每个事务。<br>此消息仅受协议版本&gt; = 70014支持</li></ol><p>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki" target="_blank" rel="noopener">BIP 152</a>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="blocktxn" style="display: inline;"><a href="#blocktxn" class="headerlink" title="blocktxn"></a>blocktxn</h3><ol><li>blocktxn消息被定义为包含序列化BlockTransactions消息和pchCommand ==“blocktxn”的消息。</li><li>在收到格式正确的请求的blocktxn消息后，节点应该尝试通过以下方式重建整个块：</li><li>从原始cmpctblock中获取 prefilledtxn事务并将它们放在标记位置。</li><li>对于来自原始cmpctblock的每个短事务ID ，按顺序从blocktxn消息或其他源中查找相应的事务，并将其置于块中的第一个可用位置。</li><li>一旦块被重建，它将被正常处理，记住短事务ID偶尔会发生冲突，并且节点不得因这些冲突而受到惩罚，无论它们出现在何处。<br>此消息仅受协议版本&gt; = 70014支持</li></ol><p>有关更多信息，请参阅<a href="https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki" target="_blank" rel="noopener">BIP 152</a>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="别人如何知道我的-如何交换数据" style="display: inline;"><a href="#别人如何知道我的-如何交换数据" class="headerlink" title="别人如何知道我的 如何交换数据"></a>别人如何知道我的 如何交换数据</h2><p>其实i 看到这里，我们如何交易数据的就已经很清楚了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="NAT-与，-p2p-和-区块链" style="display: inline;"><a href="#NAT-与，-p2p-和-区块链" class="headerlink" title="NAT 与， p2p 和 区块链"></a>NAT 与， p2p 和 区块链</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="什么事-NAT" style="display: inline;"><a href="#什么事-NAT" class="headerlink" title="什么事 NAT"></a>什么事 NAT</h3><p> NAT是个什么鬼？它的全称是Network Address Translation，翻译过来就是网络地址转换。好事的人立马就得问了：好端端的为啥要地址转换，直接用IP地址不就行了么？</p><p>在TCP/IP协议创建的时候，他的创始人（Robert E.Kahn和Vinton G.Cerf）可能都没有预料到互联网的膨胀速度会如此之快，快到短短二三十年的时间，IPV4的地址就有要枯竭之势。随着越来越多的设备加入到互联网中，IPV4地址不够用的问题成了燃眉之急。</p><p>解决IP地址不够用的一个办法是大家已经非常熟悉的IPV6，但是这么多年过去了，IPV6似乎还是不温不火，始终普及不起来。于是就有了NAT的解决方案，可以说正是NAT把IPV4从死亡边缘拉了回来，NAT到底是用了什么方法立下如此奇功，本节我们来简单的了解一下。</p><p>平时我们无论是在家里，还是在公司，其实都是在一个私有的局域网，此时电脑上分配到的IP地址是私有IP地址。RFC1918规范里规定了3个保留地址段：10.0.0.0-10.255.255.255，172.16.0.0-172.31.255.255，192.168.0.0-192.168.255.255，这三个范围分别处于A、B、C类的地址段，专门用于组织或者企业内部使用，不需要进行申请。和公有IP地址相比，这些私有IP地址只在企业内部使用，不能作为全球路由地址，出了企业或组织的管理范围，这类私有地址就不在有任何意义。注意：任何一个组织都可以在内部使用这些私有地址，因此两个不同网络中存在相同IP地址的情况是很可能出现的，但是同一个网络中不允许两台主机拥有相同IP地址，否则将发生地址冲突。</p><p>当私有网络中的主机想请求公网中服务器的服务时，需要在网络出口处部署NAT网关。NAT的作用就是在报文离开私网进入Internet的时候，把报文中的源IP地址替换为公网地址，然后等服务端的响应报文到达网关时，NAT再把目的地址替换为私网中主机的IP地址。</p><p>听上去似乎很简单，NAT不就是替换了一下IP地址么，也没干什么，但是这里需要注意两点：</p><ol><li><p>有了NAT以后，内网的主机不在需要申请公网IP地址，只需要将内网主机地址和端口通过NAT映射到网络出口的公网IP即可，然后通信的两端在无感知的情况下进行通信。这也是为什么前文说NAT挽救了IPV4，因为大量的内网主机有了NAT，只需要很少的公网地址做映射就可以了，如此就可以节约出很多的IPV4地址空间。</p></li><li><p>当在私网网络出口处部署了NAT网关以后，只能由内网主机发起到外网主机的连接，外网主机无法主动发起连接到内网。这样虽然对外隔离了内网主机，但同时又限制了P2P的通信，这也是NAT带来的一大弊端，下一节介绍NAT穿透技术时会看到针对这一问题有哪些解决手段。</p></li></ol><p>区块链是建立在P2P网络基础上的。在比特币系统中，穿透NAT建立节点之间点对点的P2P网络，采用的就是上一节所说的UPNP技术。比特币使用了开源的miniupnp，基本上就是调用miniupnp封装好的接口，实现比较简单，我们来看看源代码：</p><p>比特币系统的初始化大部分都是在init.cpp中的AppInitMain中进行的：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"> <span class="token comment" spellcheck="true">// Map ports with UPnP</span><span class="token keyword">if</span> <span class="token punctuation">(</span>gArgs<span class="token punctuation">.</span><span class="token function">GetBoolArg</span><span class="token punctuation">(</span><span class="token string">"-upnp"</span><span class="token punctuation">,</span> DEFAULT_UPNP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">StartMapPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="NAT-穿透" style="display: inline;"><a href="#NAT-穿透" class="headerlink" title="NAT 穿透"></a>NAT 穿透</h3><p>前文提到过，使用NAT的缺陷之一就是只能由内网主机发起连接，外网主机无法主动连接到内网。这就意味着外部节点无法和内网主机进行P2P通信，就像第一节中提到的那个场景：因为两个人在不同的局域网中，相互不知道对方的公网地址和端口，所以无法直接建立起点对点连接。解决这个问题的办法就是NAT穿透技术。下面简单介绍几种常见的NAT穿越技术。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="STUN" style="display: inline;"><a href="#STUN" class="headerlink" title="STUN"></a>STUN</h4><p>STUN全称为Simple Tranversal of UDP through NAT。其穿透原理参考下图：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/p2p network/20180520171109120.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/p2p network/20180520171109120.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">STUN 穿透原理</figcaption></figure></p><p>假设两个不同网络中的设备A和B想穿透NAT进行点对点通信，通过STUN进行NAT穿透的过程如上图，其中STUN SERVER是部署在公网中的STUN服务器。</p><ol><li>CLIENT A通过NAT网关向STUN SERVER发送STUN请求消息(UDP)，查询并注册自己经过NAT映射后的公网地址；</li><li>STUN SERVER响应，并将CLIENT A经过转换后的公网IP地址和端口填在</li><li>CLIENT B通过NAT网关向STUN SERVER发送STUN请求消息(UDP)，查询并注册自己经过NAT映射后</li><li>STUN SERVER响应，并将CLIENT B经过转换后的公网IP地址和端口填在</li><li>此时CLIENT A已经知道了自己映射后对应的公网IP地址和端口号，它把这些信息打包在请求中发送给STUN SERVER，请求和</li><li>STUN SERVER查询到B注册的公网地址和端口，然后将请求通过NAT网</li><li>B从消息中知道A的公网地址和端口，于是通过此地址和端口，向A发送消息，消息中包含B映射后的公网地址和端口号，A收到消息后就知道了B的公网地址及端口，这样在A和B之间建立起了通信通道。</li></ol><p>从代码中可以看到，如果在启动bitcoind时开启了upnp选项，将会进行端口映射，如果想将自己的节点加入到比特币p2p网络中，让其他网络中的节点访问，可以开启此选项进行端口映射，然后把映射后的公网ip地址广播给网络中的其他节点。</p><p>StartMapPort()中开启了一个线程进行端口映射，线程函数为net.cpp中的ThreadMapPort：</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="TURN" style="display: inline;"><a href="#TURN" class="headerlink" title="TURN"></a>TURN</h4><p>STUN穿透技术的缺点在于无法穿透对称型NAT，这可以通过TURN技术进行改进。TURN的工作过程和STUN非常相似，区别在于在TURN中，公网地址和端口不由NAT网关分配，而是由TURN服务器分配。</p><p>TURN可以解决STUN无法穿透对称NAT的问题，但是由于所有的请求都需要经过TURN服务器，所以网络延迟和丢包的可能性较大，实际当中通常将STUN和TURN混合使用。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="UPNP" style="display: inline;"><a href="#UPNP" class="headerlink" title="UPNP"></a>UPNP</h4><p>UPNP意为通用即插即用协议，是由微软提出的一种NAT穿透技术。使用UPNP需要内网主机、网关和应用程序都支持UPNP技术。</p><p>UPNP通过网关映射请求可以动态的为客户分配映射表项，而NAT网关只需要执行地址和端口的转换。UPNP客户端发送到公网侧的信令或者控制消息中，会包含映射之后公网IP和端口，接收端根据这些信息就可以建立起P2P连接。</p><p>UPNP穿透的过程大致如下：</p><ol><li><p>发送查找消息：<br> 一个设备添加到网络以后，会多播大量发现消息来通知其嵌入式设备和服务，所有的控制点都可以监听多播地址以接收通知，标准的多播地址是239.255.255.250：1900。可以通过发送http请求查询局域网中upnp设备，消息形式如下</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt"> M-SEARCH * HTTP/1.1 \r\n HOST 239.255.255.250:1900 \r\n ST:UPnP rootdevice \r\n MAN:\&quot;ssdp:discover\&quot; \r\n MX:\r\n\r\n</code></pre></li><li><p>获得根设备描述url<br> 如果网络中存在upnp设备，此设备会向发送了查找请求的多播通道的源IP地址和端口发送响应消息，其形式如下：</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt"> HTTP/1.1 200 OK CACHE_CONTROL: max-age=100 DATE: XXXX LOCATION:http://192.168.1.1:1900/igd.xml SERVER: TP-LINK Wireness Router UPnP1.0 ST: upnp:rootdevice</code></pre><p> 首先通过200 OK确定成功的找到了设备。然后要从响应中找到根设备的描述URL（例如上面响应报文中的<code>http://192.168.1.1:1900/igd.xml</code>），通过此URL就可以找到根设备的描述信息，从根设备的描述信息中又可以得到设备的控制URL，通过控制URL就可以控制UPNP的行为。上面这个响应中表示我们在局域网中成功的找到了一台支持UPNP的无线路由器设备。</p></li><li><p>通过（2）中找到的设备描述URL的地址得到设备描述URL得到XML文档。发送HTTP请求消息：</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt"> GET /igd.xml HTTP/1.1 HOST:192.168.1.1:1900 Connection: Close</code></pre><p> 然后就能得到一个设备描述文档，从中可以找到服务和UPNP控制URL。每一种设备都有对应的serviceURL和controlURL。其中和端口映射有关的服务时WANIPConnection和WANPPPConnection。</p></li><li><p>进行端口映射<br> 拿到设备的控制URL以后就可以发送控制信息了。每一种控制都是根据HTTP请求来发送的，请求形式如下：</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt"> POST path HTTP/1.1 HOST: host:port SOAPACTION:serviceType#actionName CONTENT-TYPE: text/xml CONTENT-LENGTH: XXX ....</code></pre></li></ol><p>其中path表示控制url，host:port就是目的主机地址，actionName就是控制upnp设备执行响应的指令。UPNP支持的指令如下：</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>actionName</th><th>描述</th></tr></thead><tbody><tr><td>GetStatusInfo</td><td>查看UPNP设备状态</td></tr><tr><td>AddPortMapping</td><td>添加一个端口映射</td></tr><tr><td>DeletePortMapping</td><td>删除一个端口映射</td></tr><tr><td>GetExternalIPAddress</td><td>查看映射的外网地址</td></tr><tr><td>GetConnectionTypeInfo</td><td>查看连接状态</td></tr><tr><td>GetSpecificPortMappingEntry</td><td>查询指定的端口映射</td></tr><tr><td>GetGenericPortMappingEntry</td><td>查询端口映射表</td></tr></tbody>                    </table>                </div>            </div><p>通常我们需要用到的是AddPortMapping进行端口映射，以及GetExternalIPAddress获取到映射的公网地址。<br>UPNP完整的协议栈比较复杂，有兴趣的读者可以自行查找资料做更加深入的学习。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="UPNP在比特币P2P网络中的应用" style="display: inline;"><a href="#UPNP在比特币P2P网络中的应用" class="headerlink" title="UPNP在比特币P2P网络中的应用"></a>UPNP在比特币P2P网络中的应用</h3><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> USE_UPNP</span><span class="token keyword">static</span> CThreadInterrupt g_upnp_interrupt<span class="token punctuation">;</span><span class="token keyword">static</span> std<span class="token operator">::</span>thread g_upnp_thread<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ThreadMapPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>string port <span class="token operator">=</span> <span class="token function">strprintf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token function">GetListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> multicastif <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> minissdpdpath <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> UPNPDev <span class="token operator">*</span> devlist <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> lanaddr<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> UPNPDISCOVER_SUCCESS</span>    <span class="token comment" spellcheck="true">/* miniupnpc 1.5 */</span>    devlist <span class="token operator">=</span> <span class="token function">upnpDiscover</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> multicastif<span class="token punctuation">,</span> minissdpdpath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> MINIUPNPC_API_VERSION &lt; 14</span>    <span class="token comment" spellcheck="true">/* miniupnpc 1.6 */</span>    <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    devlist <span class="token operator">=</span> <span class="token function">upnpDiscover</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> multicastif<span class="token punctuation">,</span> minissdpdpath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token comment" spellcheck="true">/* miniupnpc 1.9.20150730 */</span>    <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    devlist <span class="token operator">=</span> <span class="token function">upnpDiscover</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> multicastif<span class="token punctuation">,</span> minissdpdpath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">struct</span> UPNPUrls urls<span class="token punctuation">;</span>    <span class="token keyword">struct</span> IGDdatas data<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token function">UPNP_GetValidIGD</span><span class="token punctuation">(</span>devlist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>urls<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> lanaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lanaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fDiscover<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> externalIPAddress<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> <span class="token function">UPNP_GetExternalIPAddress</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>controlURL<span class="token punctuation">,</span> data<span class="token punctuation">.</span>first<span class="token punctuation">.</span>servicetype<span class="token punctuation">,</span> externalIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> UPNPCOMMAND_SUCCESS<span class="token punctuation">)</span>                <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: GetExternalIPAddress() returned %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>externalIPAddress<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    CNetAddr resolved<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LookupHost</span><span class="token punctuation">(</span>externalIPAddress<span class="token punctuation">,</span> resolved<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: ExternalIPAddress = %s\n"</span><span class="token punctuation">,</span> resolved<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">AddLocal</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> LOCAL_UPNP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP: GetExternalIPAddress failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span>string strDesc <span class="token operator">=</span> <span class="token string">"Bitcoin "</span> <span class="token operator">+</span> <span class="token function">FormatFullVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> UPNPDISCOVER_SUCCESS</span>            <span class="token comment" spellcheck="true">/* miniupnpc 1.5 */</span>            r <span class="token operator">=</span> <span class="token function">UPNP_AddPortMapping</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>controlURL<span class="token punctuation">,</span> data<span class="token punctuation">.</span>first<span class="token punctuation">.</span>servicetype<span class="token punctuation">,</span>                                port<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lanaddr<span class="token punctuation">,</span> strDesc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"TCP"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>            <span class="token comment" spellcheck="true">/* miniupnpc 1.6 */</span>            r <span class="token operator">=</span> <span class="token function">UPNP_AddPortMapping</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>controlURL<span class="token punctuation">,</span> data<span class="token punctuation">.</span>first<span class="token punctuation">.</span>servicetype<span class="token punctuation">,</span>                                port<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lanaddr<span class="token punctuation">,</span> strDesc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"TCP"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">!=</span>UPNPCOMMAND_SUCCESS<span class="token punctuation">)</span>                <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"AddPortMapping(%s, %s, %s) failed with code %d (%s)\n"</span><span class="token punctuation">,</span>                    port<span class="token punctuation">,</span> port<span class="token punctuation">,</span> lanaddr<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">strupnperror</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPnP Port Mapping successful.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>g_upnp_interrupt<span class="token punctuation">.</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> <span class="token function">UPNP_DeletePortMapping</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>controlURL<span class="token punctuation">,</span> data<span class="token punctuation">.</span>first<span class="token punctuation">.</span>servicetype<span class="token punctuation">,</span> port<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"TCP"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"UPNP_DeletePortMapping() returned: %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">freeUPNPDevlist</span><span class="token punctuation">(</span>devlist<span class="token punctuation">)</span><span class="token punctuation">;</span> devlist <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token function">FreeUPNPUrls</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">LogPrintf</span><span class="token punctuation">(</span><span class="token string">"No valid UPnP IGDs found\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">freeUPNPDevlist</span><span class="token punctuation">(</span>devlist<span class="token punctuation">)</span><span class="token punctuation">;</span> devlist <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">FreeUPNPUrls</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先第一行拿到比特币系统所使用的端口号，默认为8333，之后将要映射此端口到公网ip上；</li><li>调用upnpDiscover查找当前局域网中的所有upnp设备；</li><li>调用UPNP_GetValidIGD，从（2）中找到的upnp设备列表中找到有效的IGD设备；</li><li>如果UPNP<em>GetValidIGD返回1，表示有一个连接，此时调用UPNP</em>  GetExternalIPAddress获取公网地址，然后对此公网地址进行DNS查询，将解析到的地址记录到内存中，这些公网地址之后将会被广播给P2P网络中的其他节点，一传十，十传百。</li><li>通过UPNP_AddPortMapping进行端口映射，假设内网获取的有效IGD设备的IP地址为192.168.0.1，网关出口的外网地址为192.169.1.1，采用比特币的默认端口8333，则端口映射后就是将内网中192.168.0.1：8333映射到网关出口的公有IP地址和端口：192.169.1.1:8333，之后外部节点通过此公网IP和端口，就可以与内网节点进行通信了。</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="小结" style="display: inline;"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这篇文章，主要介绍了，如何获取节点，以及节点的交流方式。逐个分析了，每个消息的结构。<br>后面介绍了NAT以及常见的NAT穿透技术。因为建立P2P通信很重要的一步就是穿透NAT以建立起节点之间的通信通道。<br>常见的NAT穿透技术有STUN，TURN以及UPNP，而比特币P2P组网采用的正是UPNP技术，具体实现时比特币采用了开源的<a href="https://github.com/miniupnp/miniupnp" target="_blank" rel="noopener">miniupnp</a>。</p><p><strong>参考链接</strong></p><ul class="g-list-style-circle"><li><a href="https://blog.csdn.net/ztemt_sw2/article/details/80291705" target="_blank" rel="noopener">比特币源码分析–P2P网络初始化</a></li><li><a href="https://blog.csdn.net/ztemt_sw2/article/details/80321600" target="_blank" rel="noopener">比特币源码分析–端口映射</a></li><li><a href="https://en.bitcoin.it/wiki/Protocol_documentation#Network_address" target="_blank" rel="noopener">Bitcoin wiki - Protocol documentation</a></li><li><a href="https://en.bitcoin.it/wiki/Network" target="_blank" rel="noopener">Bitcoin wiki - Network</a></li></ul>    <p hidden id="CurrentFileName">区块链 p2p认识.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道，区块链的不同节点要互相交换数据，无论是交易的发布，以及挖矿成功的发布&lt;/p&gt;
&lt;p&gt;我最开始学习这个时候就很疑惑，他是怎么知道我的呢？&lt;/p&gt;
&lt;p&gt;本次文章，我打算搞清楚四件事儿&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我如何知道别人的&lt;/li&gt;
&lt;li&gt;节点间的互相通讯&lt;/li&gt;
&lt;li&gt;他是怎么知道我的&lt;/li&gt;
&lt;li&gt;我们如何交换数据&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://blog.msiter.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://blog.msiter.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="p2p" scheme="http://blog.msiter.com/tags/p2p/"/>
    
      <category term="dns seed" scheme="http://blog.msiter.com/tags/dns-seed/"/>
    
  </entry>
  
  <entry>
    <title>web3js 学习 智能合约学习</title>
    <link href="http://blog.msiter.com/web3js%20xx%20znh,gyxx-20180703.html"/>
    <id>http://blog.msiter.com/web3js xx znh,gyxx-20180703.html</id>
    <published>2018-07-03T18:39:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>接下来，我们会创建一个智能合约，发布并且完成智能合约的调用。</p><p>阅读本篇文章的所需要具备的基础</p><ol><li>熟悉 Solidity 基本的操作，可以书写 简单的智能合约</li><li>电脑上安装 truffle 用于 sol的解析，当然你也可以使用 solcjs 进行 bin 以及 abi的编译</li><li>电脑上安装 genache 用于创建一个 测试网络</li></ol><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/web3js 学习 智能合约学习/download.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/web3js 学习 智能合约学习/download.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">以太坊-图灵完备智能合约最佳实践者</figcaption></figure></p><p>当然如果你只是想在电脑运行一份，聊天智能合约的话，只需要装一个  genache 就可以了，直接跳转到最下面就可以了。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="创建-一个智能合约" style="display: inline;"><a href="#创建-一个智能合约" class="headerlink" title="创建 一个智能合约"></a>创建 一个智能合约</h2><pre class="line-numbers language-solidity g-mb-30"><code class="language-solidity">pragma solidity ^0.4.0;contract Chat{    bytes32[] messages;    event ReceivedMessage(address fromuser,bytes32 message);    function sendMessage(bytes32 message) public {        messages.push(message);        emit ReceivedMessage(msg.sender,message);    }    function test() public returns (bytes32){        bytes32 name = "你好";        return name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="编译-智能合约" style="display: inline;"><a href="#编译-智能合约" class="headerlink" title="编译 智能合约"></a>编译 智能合约</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="使用-solcjs-编译" style="display: inline;"><a href="#使用-solcjs-编译" class="headerlink" title="使用 solcjs 编译"></a>使用 solcjs 编译</h3><p>使用命令</p><pre class="line-numbers language-shell g-mb-30"><code class="language-shell">solcjs Chat.sol -o ./out  --bin --abi## docssolcjs [filepath] -o [outpath] [--bin or --abi]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="使用-truffle-编译" style="display: inline;"><a href="#使用-truffle-编译" class="headerlink" title="使用 truffle 编译"></a>使用 truffle 编译</h3><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="web3js-调用-以及-部署智能合约" style="display: inline;"><a href="#web3js-调用-以及-部署智能合约" class="headerlink" title="web3js 调用 以及 部署智能合约"></a>web3js 调用 以及 部署智能合约</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="部署智能合约" style="display: inline;"><a href="#部署智能合约" class="headerlink" title="部署智能合约"></a>部署智能合约</h3><p>我们首先引入 web3js ，</p><pre class="line-numbers language-html g-mb-30"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>引用之后</p><pre class="line-numbers language-html g-mb-30"><code class="language-html">const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:9545"));const abiString = '[{"constant":false,"inputs":[{"name":"message","type":"bytes32"}],"name":"sendMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"fromuser","type":"address"},{"indexed":false,"name":"message","type":"bytes32"}],"name":"ReceivedMessage","type":"event"}]'const binString = '0x608060405234801561001057600080fd5b50610184806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e12c9ca814610051578063f8a8fd6d14610082575b600080fd5b34801561005d57600080fd5b5061008060048036038101908080356000191690602001909291905050506100b5565b005b34801561008e57600080fd5b5061009761012b565b60405180826000191660001916815260200191505060405180910390f35b7f8772b97689ed084ec4a4d86ec0d3b5c75e46d77b4c0cc886c5aaaf602cbc93323382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a150565b6000807fe4bda0e5a5bd0000000000000000000000000000000000000000000000000000905080915050905600a165627a7a72305820d65d0484d4c51b85359ec95f030a8f84b1ccd24f9e2f4b262bdf7a9a8a4ffb0c0029'const Contract = web3.eth.contract(JSON.parse(abiString));    // Deploy contract instanceconst contractInstance = Contract.new({    data: binS,    from: web3.eth.coinbase,    gas: 90000*2}, (err, res) => {    if (err) {        console.log(err);        return;    }    // If we have an address property, the contract was deployed    if (res.address) {        console.log('Contract address: ' + res.address);    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完成后，我们就可以获取到我们的智能合约部署的地址了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="获取智能合约-调用方法" style="display: inline;"><a href="#获取智能合约-调用方法" class="headerlink" title="获取智能合约 调用方法"></a>获取智能合约 调用方法</h3><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">const contract = web3.eth.contract(JSON.parse(abiS)).at(&#39;0xb5c0a3f96c6f0dd334c158ee766641f1df34ef98&#39;);// 打印； call 方法，会出结果，但是不会影响到实际区块链console.log(contract.test.call());// 打印； sendTransaction方法，实际影响到区块链console.log(contract.test.sendTransaction());</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="监听-event-事件儿" style="display: inline;"><a href="#监听-event-事件儿" class="headerlink" title="监听 event 事件儿"></a>监听 event 事件儿</h3><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>contract<span class="token punctuation">.</span><span class="token function">ReceivedMessage</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用该方法可以检测，智能合约中的  <code>ReceivedMessage</code> 事件儿。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="运行一个聊天-DAPP" style="display: inline;"><a href="#运行一个聊天-DAPP" class="headerlink" title="运行一个聊天 DAPP"></a>运行一个聊天 DAPP</h2><pre class="line-numbers language-soliduty g-mb-30"><code class="language-soliduty">pragma solidity ^0.4.0;contract Chat{    bytes32[] messages;    event ReceivedMessage(address fromuser,bytes32 message);    function sendMessage(bytes32 message) public {        messages.push(message);        emit ReceivedMessage(msg.sender,message);    }    function test() public returns (bytes32){        bytes32 name = "你好";        return name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 abi 和 bin 字段</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">    const binS = &quot;0x608060405234801561001057600080fd5b506101b6806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e12c9ca814610051578063f8a8fd6d14610082575b600080fd5b34801561005d57600080fd5b5061008060048036038101908080356000191690602001909291905050506100b5565b005b34801561008e57600080fd5b5061009761015d565b60405180826000191660001916815260200191505060405180910390f35b60008190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055507f8772b97689ed084ec4a4d86ec0d3b5c75e46d77b4c0cc886c5aaaf602cbc93323382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a150565b6000807fe4bda0e5a5bd0000000000000000000000000000000000000000000000000000905080915050905600a165627a7a7230582077134383b2da18c9d2798d5b3f6d4e18d7dc3dd8a8f96ee8774d75ea8e6bca970029&quot;    const abiS = &#39;[ { &quot;anonymous&quot;: false, &quot;inputs&quot;: [ { &quot;indexed&quot;: false, &quot;name&quot;: &quot;fromuser&quot;, &quot;type&quot;: &quot;address&quot; }, { &quot;indexed&quot;: false, &quot;name&quot;: &quot;message&quot;, &quot;type&quot;: &quot;bytes32&quot; } ], &quot;name&quot;: &quot;ReceivedMessage&quot;, &quot;type&quot;: &quot;event&quot; }, { &quot;constant&quot;: false, &quot;inputs&quot;: [ { &quot;name&quot;: &quot;message&quot;, &quot;type&quot;: &quot;bytes32&quot; } ], &quot;name&quot;: &quot;sendMessage&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot; }, { &quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;test&quot;, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes32&quot; } ], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot; } ]&#39;</code></pre><p>index.html 界面</p><pre class="line-numbers language-html g-mb-30"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>选择用户【余额=地址】:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入一些内容吧<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App.sendMessage()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>window.App = {    init: function(){        const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:9545"));        const abiS = '[ { "anonymous": false, "inputs": [ { "indexed": false, "name": "fromuser", "type": "address" }, { "indexed": false, "name": "message", "type": "bytes32" } ], "name": "ReceivedMessage", "type": "event" }, { "constant": false, "inputs": [ { "name": "message", "type": "bytes32" } ], "name": "sendMessage", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "test", "outputs": [ { "name": "", "type": "bytes32" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]'        this.contract = web3.eth.contract(JSON.parse(abiS)).at('0xb5c0a3f96c6f0dd334c158ee766641f1df34ef98');        // 如果 没有智能合约地址，需要使用下面的方法 进行 部署智能合约并且获取智能合约地址        // const binS = "0x608060405234801561001057600080fd5b506101b6806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e12c9ca814610051578063f8a8fd6d14610082575b600080fd5b34801561005d57600080fd5b5061008060048036038101908080356000191690602001909291905050506100b5565b005b34801561008e57600080fd5b5061009761015d565b60405180826000191660001916815260200191505060405180910390f35b60008190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055507f8772b97689ed084ec4a4d86ec0d3b5c75e46d77b4c0cc886c5aaaf602cbc93323382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a150565b6000807fe4bda0e5a5bd0000000000000000000000000000000000000000000000000000905080915050905600a165627a7a7230582077134383b2da18c9d2798d5b3f6d4e18d7dc3dd8a8f96ee8774d75ea8e6bca970029"        // const contractInstance = Contract.new({        //     data: binS,        //     from: web3.eth.coinbase,        //     gas: 90000*2        // }, (err, res) => {        //     if (err) {        //         console.log(err);        //         return;        //     }        //     // If we have an address property, the contract was deployed        //     if (res.address) {        //         console.log('Contract address: ' + res.address);        //     }        // });        this.watch();        this.setUsers();    },    addAnother:function(fromuser,message,gasused){        var ul = document.getElementById("list");        var li = document.createElement("li");        var children = ul.children.length + 1        li.setAttribute("id", "element"+children)        try {            li.appendChild(document.createTextNode("来自："+fromuser+"消耗【"+gasused+"】"+":消息"+web3.toUtf8(message)));        }catch(err){            li.appendChild(document.createTextNode("来自："+fromuser+"下号【"+gasused+"】"+":消息["+err+"]"+message));        }        ul.appendChild(li)    },    sendMessage:function(){        const e = document.getElementById("users");        const strUser = e.options[e.selectedIndex].value;        const input_view = document.getElementById("message");        this.contract.sendMessage.sendTransaction(input_view.value,{from: strUser });        input_view.value = "";    },    watch:function(){        this.contract.ReceivedMessage(function(error,result){            this.addAnother(result.args.fromuser,result.args.message,web3.eth.getTransactionReceipt(result.transactionHash).gasUsed)            this.setUsers();        }.bind(this))    },    setUsers: function(){        const datasource = web3.eth.accounts        const select = document.getElementById("users");        const select_index = select.selectedIndex == -1 ? 0 : select.selectedIndex        select.options.length = 0;        for (var i = datasource.length - 1; i >= 0; i--) {            // console.log();            const balance = web3.eth.getBalance(datasource[i]);            select.options[select.options.length] = new Option(balance+"="+datasource[i], datasource[i]);        }        select.selectedIndex = select_index    }}window.addEventListener('load', () => {  // Checking if Web3 has been injected by the browser (Mist/MetaMask)  if (typeof web3 !== 'undefined') {    window.web3 = new Web3(web3.currentProvider);  } else {    window.web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:9545"));  }  App.init();});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="预览" style="display: inline;"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/web3js 学习 智能合约学习/Kapture 2018-07-03 at 18.32.41.gif" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/web3js 学习 智能合约学习/Kapture 2018-07-03 at 18.32.41.gif" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">聊天 智能合约预览</figcaption></figure></p>    <p hidden id="CurrentFileName">web3js 学习 智能合约学习.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来，我们会创建一个智能合约，发布并且完成智能合约的调用。&lt;/p&gt;
&lt;p&gt;阅读本篇文章的所需要具备的基础&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟悉 Solidity 基本的操作，可以书写 简单的智能合约&lt;/li&gt;
&lt;li&gt;电脑上安装 truffle 用于 sol的解析，当然你也可以使用 solcjs 进行 bin 以及 abi的编译&lt;/li&gt;
&lt;li&gt;电脑上安装 genache 用于创建一个 测试网络&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/publicFiles/images/web3js 学习 智能合约学习/download.png&quot; alt=&quot;&quot; title=&quot;以太坊-图灵完备智能合约最佳实践者&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然如果你只是想在电脑运行一份，聊天智能合约的话，只需要装一个  genache 就可以了，直接跳转到最下面就可以了。&lt;/p&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://blog.msiter.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Web3js" scheme="http://blog.msiter.com/tags/Web3js/"/>
    
      <category term="Ethereum" scheme="http://blog.msiter.com/tags/Ethereum/"/>
    
      <category term="Solidity" scheme="http://blog.msiter.com/tags/Solidity/"/>
    
      <category term="truffle" scheme="http://blog.msiter.com/tags/truffle/"/>
    
      <category term="ganache" scheme="http://blog.msiter.com/tags/ganache/"/>
    
  </entry>
  
  <entry>
    <title>手势密码解锁界面</title>
    <link href="http://blog.msiter.com/ssmmj,xsjm-20180614.html"/>
    <id>http://blog.msiter.com/ssmmj,xsjm-20180614.html</id>
    <published>2018-06-14T13:46:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>休陪产假了，在家里实在是没什么事儿干了。每天都是洗尿布… 不过每天早上都是6.7点起床。哇。。。每一天的时间被拉长了呢</p><p>在家里的时候偶然想要创建一个 锁屏界面，下面就是我创建的额手势密码的一个例子。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/手势密码/Kapture 2018-06-14 at 14.22.15.gif" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/手势密码/Kapture 2018-06-14 at 14.22.15.gif" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">手势密码预览</figcaption></figure></p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="废话不多说" style="display: inline;"><a href="#废话不多说" class="headerlink" title="废话不多说"></a>废话不多说</h2><p>接下来就是全部的代码，使用方法，复制该代码到Xcode中，使用</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//or</span><span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder aDecoder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>手写代码和Storyboard，两种方式。其中，FingerPasswordView 宽高建议为相同的数值。</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  FingerPasswordView.swift</span><span class="token comment" spellcheck="true">//  FingerPassWord</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  Created by 荆文征 on 2018/6/14.</span><span class="token comment" spellcheck="true">//  Copyright © 2018年 com.baimaodai. All rights reserved.</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token keyword">let</span> <span class="token builtin">FingerPasswordColor</span> <span class="token operator">=</span> <span class="token function">UIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">168.0</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">216.0</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">185.0</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FingerPasswordView</span><span class="token punctuation">:</span> <span class="token builtin">UIView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 配置手指滑动的路径的 绘制</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> fingerPasswordLayer <span class="token operator">=</span> <span class="token function">CAShapeLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/// 手势动作</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> fingerPasswordPan <span class="token operator">=</span> <span class="token function">FingerPasswordPanGestureRecognizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token builtin">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> frame<span class="token punctuation">)</span>        <span class="token function">__init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder aDecoder<span class="token punctuation">:</span> <span class="token builtin">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> aDecoder<span class="token punctuation">)</span>        <span class="token function">__init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> collectionView<span class="token punctuation">:</span><span class="token builtin">UICollectionView</span><span class="token operator">!</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">__init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>isUserInteractionEnabled <span class="token operator">=</span> <span class="token boolean">true</span>        fingerPasswordPan<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>        fingerPasswordPan<span class="token punctuation">.</span><span class="token function">addTarget</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token function">_fingerPasswordPanHandleMethod</span><span class="token punctuation">(</span>pan<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">addGestureRecognizer</span><span class="token punctuation">(</span>fingerPasswordPan<span class="token punctuation">)</span>        <span class="token keyword">let</span> viewLayout <span class="token operator">=</span> <span class="token function">UICollectionViewFlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        viewLayout<span class="token punctuation">.</span>scrollDirection <span class="token operator">=</span> <span class="token punctuation">.</span>vertical        collectionView <span class="token operator">=</span> <span class="token function">UICollectionView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> collectionViewLayout<span class="token punctuation">:</span> viewLayout<span class="token punctuation">)</span>        collectionView<span class="token punctuation">.</span>isScrollEnabled <span class="token operator">=</span> <span class="token boolean">false</span>        collectionView<span class="token punctuation">.</span>isUserInteractionEnabled <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>collectionView<span class="token punctuation">)</span>        collectionView<span class="token punctuation">.</span>allowsMultipleSelection <span class="token operator">=</span> <span class="token boolean">true</span>        collectionView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span>clear        collectionView<span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">self</span>        collectionView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>        collectionView<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token builtin">FingerPasswordCollectionCell</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forCellWithReuseIdentifier<span class="token punctuation">:</span> <span class="token string">"cell"</span><span class="token punctuation">)</span>        collectionView<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addConstraints</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> collectionView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> collectionView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> collectionView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">left</span><span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">left</span><span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> collectionView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">right</span><span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">right</span><span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span>clear<span class="token punctuation">.</span>cgColor        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> <span class="token constant">kCALineCapRound</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token constant">kCALineCapRound</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token builtin">FingerPasswordColor</span><span class="token punctuation">.</span>cgColor        <span class="token keyword">self</span><span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">UIBezierPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> movePanPoint<span class="token punctuation">:</span><span class="token builtin">CGPoint</span><span class="token operator">!</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> throughPanCell <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">FingerPasswordCollectionCell</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">didSet</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token builtin">first</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span><span class="token builtin">first</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">UIBezierPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">first</span><span class="token punctuation">.</span>center<span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span>cell<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span>                    path<span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> cell<span class="token punctuation">.</span>center<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MARK: - UICollectionViewDataSource</span><span class="token keyword">extension</span> <span class="token builtin">FingerPasswordView</span><span class="token punctuation">:</span> <span class="token builtin">UICollectionViewDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">collectionView</span><span class="token punctuation">(</span><span class="token number">_</span> collectionView<span class="token punctuation">:</span> <span class="token builtin">UICollectionView</span><span class="token punctuation">,</span> numberOfItemsInSection section<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">9</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">collectionView</span><span class="token punctuation">(</span><span class="token number">_</span> collectionView<span class="token punctuation">:</span> <span class="token builtin">UICollectionView</span><span class="token punctuation">,</span> cellForItemAt indexPath<span class="token punctuation">:</span> <span class="token builtin">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UICollectionViewCell</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cell <span class="token operator">=</span> collectionView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withReuseIdentifier<span class="token punctuation">:</span> <span class="token string">"cell"</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span>        <span class="token keyword">return</span> cell    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MARK: - UICollectionViewDelegateFlowLayout</span><span class="token keyword">extension</span> <span class="token builtin">FingerPasswordView</span><span class="token punctuation">:</span> <span class="token builtin">UICollectionViewDelegateFlowLayout</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">collectionView</span><span class="token punctuation">(</span><span class="token number">_</span> collectionView<span class="token punctuation">:</span> <span class="token builtin">UICollectionView</span><span class="token punctuation">,</span> layout collectionViewLayout<span class="token punctuation">:</span> <span class="token builtin">UICollectionViewLayout</span><span class="token punctuation">,</span> sizeForItemAt indexPath<span class="token punctuation">:</span> <span class="token builtin">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">CGSize</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token punctuation">(</span>frame<span class="token punctuation">.</span>width<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token punctuation">(</span>frame<span class="token punctuation">.</span>width<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">collectionView</span><span class="token punctuation">(</span><span class="token number">_</span> collectionView<span class="token punctuation">:</span> <span class="token builtin">UICollectionView</span><span class="token punctuation">,</span> layout collectionViewLayout<span class="token punctuation">:</span> <span class="token builtin">UICollectionViewLayout</span><span class="token punctuation">,</span> minimumLineSpacingForSectionAt section<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">CGFloat</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">collectionView</span><span class="token punctuation">(</span><span class="token number">_</span> collectionView<span class="token punctuation">:</span> <span class="token builtin">UICollectionView</span><span class="token punctuation">,</span> layout collectionViewLayout<span class="token punctuation">:</span> <span class="token builtin">UICollectionViewLayout</span><span class="token punctuation">,</span> minimumInteritemSpacingForSectionAt section<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">CGFloat</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MARK: - UIPanGestureRecognizer Handle Extension</span><span class="token keyword">extension</span> <span class="token builtin">FingerPasswordView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// Pan GetstureRecongnizer Handle Method</span>    <span class="token atrule">@objc</span> fileprivate <span class="token keyword">func</span> <span class="token function">_fingerPasswordPanHandleMethod</span><span class="token punctuation">(</span>pan<span class="token punctuation">:</span><span class="token builtin">UIPanGestureRecognizer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span> pan<span class="token punctuation">.</span>state <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>began<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>changed<span class="token punctuation">:</span> <span class="token function">_movePointMethod</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> pan<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> pan<span class="token punctuation">.</span>view<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">_movePointMethod</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        print(pan.location(in: pan.view).x)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 手势滑动对象 滑动 处理方法</span>    <span class="token comment" spellcheck="true">///</span>    <span class="token comment" spellcheck="true">/// - Parameter point: point</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">_movePointMethod</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span><span class="token builtin">CGPoint</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token function">identifyFootprintsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">appendFingerCellMethod</span><span class="token punctuation">(</span>cell<span class="token punctuation">:</span> cell<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> _path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">UIBezierPath</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> _point <span class="token operator">=</span> point <span class="token punctuation">{</span>            _path<span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> _point<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> _path<span class="token punctuation">.</span>cgPath    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">FingerPasswordView</span><span class="token punctuation">:</span> <span class="token builtin">UIGestureRecognizerDelegate</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 手势 是否开始处理</span>    <span class="token comment" spellcheck="true">///</span>    <span class="token comment" spellcheck="true">/// - Parameter gestureRecognizer: 手势处理</span>    <span class="token comment" spellcheck="true">/// - Returns: 是否开始处理该手势</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">gestureRecognizerShouldBegin</span><span class="token punctuation">(</span><span class="token number">_</span> gestureRecognizer<span class="token punctuation">:</span> <span class="token builtin">UIGestureRecognizer</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token function">identifyFootprintsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">appendFingerCellMethod</span><span class="token punctuation">(</span>cell<span class="token punctuation">:</span> cell<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 辨识足迹 根据Point 进行相对应的数据处理</span>    <span class="token comment" spellcheck="true">///</span>    <span class="token comment" spellcheck="true">/// - Returns: 当前的足迹 是否涉及到了某个 Cell</span>    <span class="token keyword">func</span> <span class="token function">identifyFootprintsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">FingerPasswordCollectionCell</span><span class="token operator">?</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> localPoint <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fingerPasswordPan<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> fingerPasswordPan<span class="token punctuation">.</span>view<span class="token punctuation">)</span>        <span class="token keyword">for</span> _cell <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>collectionView<span class="token punctuation">.</span>visibleCells <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_cell <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">FingerPasswordCollectionCell</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> cell <span class="token operator">=</span> _cell <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">FingerPasswordCollectionCell</span>            <span class="token keyword">let</span> frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>spotView<span class="token punctuation">.</span>frame<span class="token punctuation">,</span> from<span class="token punctuation">:</span> cell<span class="token punctuation">)</span>            <span class="token keyword">if</span> frame<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>localPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> cell            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token constant">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 经过点新增 一个 Cell</span>    <span class="token comment" spellcheck="true">///</span>    <span class="token comment" spellcheck="true">/// - Parameter cell: Cell</span>    <span class="token keyword">func</span> <span class="token function">appendFingerCellMethod</span><span class="token punctuation">(</span>cell<span class="token punctuation">:</span><span class="token builtin">FingerPasswordCollectionCell</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">guard</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">}</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>collectionView<span class="token punctuation">.</span><span class="token function">selectItem</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>collectionView<span class="token punctuation">.</span><span class="token function">indexPath</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> cell<span class="token punctuation">)</span><span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> scrollPosition<span class="token punctuation">:</span> <span class="token builtin">UICollectionViewScrollPosition</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token punctuation">.</span><span class="token builtin">UIGestureRecognizerSubclass</span><span class="token comment" spellcheck="true">/// UIPanGestureRecognizer do something immediately when touched</span><span class="token comment" spellcheck="true">/// Is there a way to increase the size of a puzzle piece once the finger has touched the puzzle piece and then continue with the pan gesture.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// source: https://stackoverflow.com/a/19145354/4242817</span><span class="token comment" spellcheck="true">/// Make appropriate modifications</span><span class="token keyword">class</span> <span class="token class-name">FingerPasswordPanGestureRecognizer</span><span class="token punctuation">:</span> <span class="token builtin">UIPanGestureRecognizer</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">touchesBegan</span><span class="token punctuation">(</span><span class="token number">_</span> touches<span class="token punctuation">:</span> <span class="token builtin">Set</span><span class="token operator">&lt;</span><span class="token builtin">UITouch</span><span class="token operator">></span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token builtin">UIEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token builtin">UIGestureRecognizerState</span><span class="token punctuation">.</span>began<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">touchesBegan</span><span class="token punctuation">(</span>touches<span class="token punctuation">,</span> with<span class="token punctuation">:</span> event<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token builtin">UIGestureRecognizerState</span><span class="token punctuation">.</span>began    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// SubView</span><span class="token keyword">class</span> <span class="token class-name">FingerPasswordCollectionCell</span><span class="token punctuation">:</span> <span class="token builtin">UICollectionViewCell</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> spotView <span class="token operator">=</span> <span class="token function">UIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> apertureView <span class="token operator">=</span> <span class="token function">UIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> lable <span class="token operator">=</span> <span class="token function">UILabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token builtin">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> frame<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>apertureView<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>spotView<span class="token punctuation">)</span>        spotView<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">.</span><span class="token function">addConstraints</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> spotView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerX<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerX<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> spotView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerY<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerY<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> spotView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>width<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>notAnAttribute<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> spotView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>height<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>notAnAttribute<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        apertureView<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">.</span><span class="token function">addConstraints</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> apertureView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerX<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerX<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> apertureView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerY<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contentView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>centerY<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> apertureView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>width<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>notAnAttribute<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">NSLayoutConstraint</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> apertureView<span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>height<span class="token punctuation">,</span> relatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">equal</span><span class="token punctuation">,</span> toItem<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> attribute<span class="token punctuation">:</span> <span class="token punctuation">.</span>notAnAttribute<span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> constant<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        spotView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>cornerRadius <span class="token operator">=</span> <span class="token number">10</span>        apertureView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>cornerRadius <span class="token operator">=</span> <span class="token number">20</span>        spotView<span class="token punctuation">.</span>clipsToBounds <span class="token operator">=</span> <span class="token boolean">true</span>        apertureView<span class="token punctuation">.</span>clipsToBounds <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>isSelected <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder aDecoder<span class="token punctuation">:</span> <span class="token builtin">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string">"init(coder:) has not been implemented"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> isSelected<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">{</span>        <span class="token keyword">didSet</span><span class="token punctuation">{</span>            <span class="token builtin">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>isSelected <span class="token punctuation">{</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>spotView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">FingerPasswordColor</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>apertureView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">FingerPasswordColor</span><span class="token punctuation">.</span><span class="token function">withAlphaComponent</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>spotView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">withAlphaComponent</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>apertureView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span>clear                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="创建一个-九宫格" style="display: inline;"><a href="#创建一个-九宫格" class="headerlink" title="创建一个 九宫格"></a>创建一个 九宫格</h2><p>本来打算使用九个UIView去创建一个九宫格视图，但是最后还是打算使用UICollectionView来创建，主要在于他针对于后期的一些维护会很方便，比如当想要选中展示错误的时候，我们可以根据选中的Cell处理如下：</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span>forEach <span class="token punctuation">{</span> <span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token comment" spellcheck="true">// .. cell configure method</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// - OR</span><span class="token keyword">self</span><span class="token punctuation">.</span>throughPanCell<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">{</span> cell <span class="token keyword">as</span><span class="token operator">?</span> <span class="token constant">CUSTOMCELL</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">!=</span> <span class="token constant">nil</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">{</span> cell <span class="token keyword">as</span><span class="token operator">!</span> <span class="token constant">CUSTOMCELL</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>forEach<span class="token punctuation">{</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token comment" spellcheck="true">// .. cell.wrong()</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们其实还可以抽象一个配置对象,将这些代码发布出去，但是主要还是不知道如何处理，自定义cell和 注册 identifier的问题。总觉得每一个自定义的视图都注册的话，会觉的很麻烦。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="使用-UICollectionView的好处" style="display: inline;"><a href="#使用-UICollectionView的好处" class="headerlink" title="使用 UICollectionView的好处"></a>使用 UICollectionView的好处</h2><p>因为 ColletionViewCell 本身就存在 Selected 状态，所以不需要额外配置很多方法。</p><p>只需要创建如下方法就可以实现</p><pre class="line-numbers language-`swift g-mb-30"><code class="language-`swift">override var isSelected: Bool{    didSet{        UIView.animate(withDuration: 0.3) {            if self.isSelected {                  self.spotView.backgroundColor = FingerPasswordColor                      self.apertureView.backgroundColor = FingerPasswordColor.withAlphaComponent(0.3)            }else{                self.spotView.backgroundColor = UIColor.gray.withAlphaComponent(0.3)                self.apertureView.backgroundColor = UIColor.clear            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    <p hidden id="CurrentFileName">手势密码解锁界面.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;休陪产假了，在家里实在是没什么事儿干了。每天都是洗尿布… 不过每天早上都是6.7点起床。哇。。。每一天的时间被拉长了呢&lt;/p&gt;
&lt;p&gt;在家里的时候偶然想要创建一个 锁屏界面，下面就是我创建的额手势密码的一个例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/publicFiles/images/手势密码/Kapture 2018-06-14 at 14.22.15.gif&quot; alt=&quot;&quot; title=&quot;手势密码预览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ios" scheme="http://blog.msiter.com/categories/ios/"/>
    
    
      <category term="ios" scheme="http://blog.msiter.com/tags/ios/"/>
    
      <category term="手势密码" scheme="http://blog.msiter.com/tags/%E6%89%8B%E5%8A%BF%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>创建自己的Cocoapods 源</title>
    <link href="http://blog.msiter.com/cjzjdCocoapodsy-20180518.html"/>
    <id>http://blog.msiter.com/cjzjdCocoapodsy-20180518.html</id>
    <published>2018-05-18T11:14:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题和Maven的自己的本地源一样，就是想向 Cocoapods Spac 一样的工作。那么接下来我们就来结合一个我现实中遇到的实例来实现这个问题</p><p>最近公司需要引入百度的人脸识别，以及身份证等文字识别两个sdk，但是百度这种大公司，根本不会让你很舒服的引入，只能手动引入，但是我不是很喜欢，所以我就使用本地 Cocoapods 来完成这个事情。</p><p>在使用的时候，遇到了一些问题，特此记录一下</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="本地设置文字识别Frameworks" style="display: inline;"><a href="#本地设置文字识别Frameworks" class="headerlink" title="本地设置文字识别Frameworks"></a>本地设置文字识别Frameworks</h2><p>最开始，我第一个制作的是 文字识别</p><p>我们只需要创建一个 PodSpec文件</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby"><span class="token constant">Pod</span><span class="token punctuation">:</span><span class="token symbol">:Spec</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">do</span> <span class="token operator">|</span>spec<span class="token operator">|</span>  spec<span class="token punctuation">.</span>name         <span class="token operator">=</span> <span class="token string">'AipOcr'</span>  spec<span class="token punctuation">.</span>version      <span class="token operator">=</span> <span class="token string">'0.0.1'</span>  spec<span class="token punctuation">.</span>license      <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token symbol">:type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'MIT'</span> <span class="token punctuation">}</span>  spec<span class="token punctuation">.</span>homepage     <span class="token operator">=</span> <span class="token string">'https://ai.baidu.com/sdk#ocr'</span>  spec<span class="token punctuation">.</span>authors      <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'baidu .Inc'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'https://baidu.com'</span> <span class="token punctuation">}</span>  spec<span class="token punctuation">.</span>summary      <span class="token operator">=</span> <span class="token string">'Baidu ocr [idcard,bankcard...].'</span>  spec<span class="token punctuation">.</span>source       <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token symbol">:git</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'git@github.com:aimobier/AipOcr.git'</span><span class="token punctuation">,</span> <span class="token symbol">:tag</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'0.0.1'</span> <span class="token punctuation">}</span>  spec<span class="token punctuation">.</span>vendored_frameworks <span class="token operator">=</span> <span class="token string">'AipBase.framework'</span><span class="token punctuation">,</span><span class="token string">'AipOcrSdk.framework'</span><span class="token punctuation">,</span> <span class="token string">'IdcardQuality.framework'</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将该文件，放置在本地的文件夹中,一般放置在根目录。<br>比如在根目录下，创建一个 AipOcr 文件夹</p><p>将需要的</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">spec.vendored_frameworks = &#39;AipBase.framework&#39;,&#39;AipOcrSdk.framework&#39;, &#39;IdcardQuality.framework&#39;</code></pre><p>三个文件，放置在 AipOcr 下，在 <a href="https://guides.cocoapods.org/syntax/podfile.html#pod" target="_blank" rel="noopener">pod</a> 文件中使用</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby">pod <span class="token string">'AipOcr'</span><span class="token punctuation">,</span> <span class="token symbol">:path</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'AipOcr'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="人脸识别-SDK-引入" style="display: inline;"><a href="#人脸识别-SDK-引入" class="headerlink" title="人脸识别 SDK 引入"></a>人脸识别 SDK 引入</h2><p>但是在这里，我出现了问题，最主要的问题就是。人脸识别包含两个库，一个简单来说就是 FaceSDK，一个是 FaceUISdk</p><p>其中 FaeUISDK需要 FaceSDK。</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby">spec<span class="token punctuation">.</span>vendored_frameworks <span class="token operator">=</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最开始使用这个方式，来进行导入依赖。但是，编译中发现， 系统认为 FaceUISDK 是 FaceSDK的，所以不对外公开</p><p>我们只能使用</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby">    spec<span class="token punctuation">.</span>dependency <span class="token string">'FaceSDK'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 但是这里出现的问题就是，我并不想提交 FaceSDK到实际的 Spce仓库中，只希望自己用用。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="私人源" style="display: inline;"><a href="#私人源" class="headerlink" title="私人源"></a>私人源</h2><p>其实私人源，特别简单，就是在pod install，你需要告诉Cocoapods，要在哪里查找这些依赖的第三方插件。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="直接在-Podfile文件中增加源" style="display: inline;"><a href="#直接在-Podfile文件中增加源" class="headerlink" title="直接在 Podfile文件中增加源"></a>直接在 Podfile文件中增加源</h3><p>我们在 Podfile 文件中，增加源的配置方法。</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby">source <span class="token string">'https://github.com/CocoaPods/Specs.git'</span>source <span class="token string">'https://github.com/aimobier/Specs.git'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="使用命令增加源" style="display: inline;"><a href="#使用命令增加源" class="headerlink" title="使用命令增加源"></a>使用命令增加源</h3><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby">pod repo add master https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>git<span class="token punctuation">.</span>coding<span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token constant">CocoaPods</span><span class="token operator">/</span><span class="token constant">Specs</span><span class="token punctuation">.</span>gitpod repo update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一劳永逸，但是没测试，不清楚</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="配置仓库内容" style="display: inline;"><a href="#配置仓库内容" class="headerlink" title="配置仓库内容"></a>配置仓库内容</h3><p>这时候你在你的仓库，直接放置类似于</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">.├── AipOcr│   └── 0.0.1│       └── AipOcr.podspec├── FaceSDK│   └── 0.0.2│       └── FaceSDK.podspec├── LICENSE└── README.md</code></pre><p>目录就可以了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="使用" style="display: inline;"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用 pod update ，就可以使用了</p>    <p hidden id="CurrentFileName">创建自己的Cocoapods源.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题和Maven的自己的本地源一样，就是想向 Cocoapods Spac 一样的工作。那么接下来我们就来结合一个我现实中遇到的实例来实现这个问题&lt;/p&gt;
&lt;p&gt;最近公司需要引入百度的人脸识别，以及身份证等文字识别两个sdk，但是百度这种大公司，根本不会让你很舒服的引入，只能手动引入，但是我不是很喜欢，所以我就使用本地 Cocoapods 来完成这个事情。&lt;/p&gt;
&lt;p&gt;在使用的时候，遇到了一些问题，特此记录一下&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://blog.msiter.com/categories/IOS/"/>
    
    
      <category term="IOS" scheme="http://blog.msiter.com/tags/IOS/"/>
    
      <category term="cocoapods" scheme="http://blog.msiter.com/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>使用DataTable来展示修改历史</title>
    <link href="http://blog.msiter.com/sydataTablelzsxglszl-20180424.html"/>
    <id>http://blog.msiter.com/sydataTablelzsxglszl-20180424.html</id>
    <published>2018-04-24T10:41:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在整理博客的时候，发现还是存在一些问题的，比如搜素时候貌似中文搜索不出来？还有就是我的修改历史存在如果修改历史过多，内容会过于向下，导致内容出现乱掉的情况。</p><p>今天我就打算使用DataTable修复这个问题，当然是通过分页的方式，你可以使用任意一种分页的方式解决这个问题。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="DataTables" style="display: inline;"><a href="#DataTables" class="headerlink" title="DataTables"></a>DataTables</h2><p>DataTables 是一个非常好的插件，包含非常多的功能，并且官方的教程非常的完备，让你学习起来不会有太大的阻碍。</p><p>哎哟…. 我发觉的 Datatable 主页改版了…. <a href="https://www.datatables.net/" target="_blank" rel="noopener">DataTables | Table plug-in for jQuery</a></p><p>这比以前的那个样子好看多了… 以前让人觉的是真的技术人员写的网页，现在看起来就大气多了…</p><p>好了，废话不多说，这里我也不想多多介绍Datatables .. 具体的话 我会考虑会面出一篇文章来讲解一下这个插件</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="修复-UI-层面的问题" style="display: inline;"><a href="#修复-UI-层面的问题" class="headerlink" title="修复 UI 层面的问题"></a>修复 UI 层面的问题</h2><p>接下来，我们会一步步的记录我所遇到的问题以及解决方法。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="创建Datatable" style="display: inline;"><a href="#创建Datatable" class="headerlink" title="创建Datatable"></a>创建Datatable</h3><p>首先，我是用的是 <a href="https://www.datatables.net/examples/data_sources/dom.html" target="_blank" rel="noopener">HTML (DOM) sourced data</a>方式，直接创建的table,这种方式是说，首先创建一个完善的 Table ，之后在使用 DataTable 方法进行一些配置。</p><p>在我们上一篇讲解到如何请求 commit ，我们请求完成之后，生成了的是 li 标签，这里我们把他们包围在 <code>tr td</code> 中，之后填充到 <code>tbody</code> 中，再调用 Datatable 就可以看到效果了。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#commit-history-new-body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>liRes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#commit-history-new'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，我们已经可以看到，我们的内容展示在Datatable了。但是我们也发现又很多我们不需要的内容。比如 选择器，分页，搜索，信息之类的。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="隐藏一些内容" style="display: inline;"><a href="#隐藏一些内容" class="headerlink" title="隐藏一些内容"></a>隐藏一些内容</h3><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#commit-history-new-body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>liRes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#commit-history-new'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  autoWidth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  ordering<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  searching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  lengthChange<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  pageLength<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改配置，我们可以看到，我们的排序，搜索，每页展示2个，结果信息也隐藏了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="配置-pager" style="display: inline;"><a href="#配置-pager" class="headerlink" title="配置 pager"></a>配置 pager</h3><p>接下来我们来进行分页的配置</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#commit-history-new'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> datas<span class="token punctuation">,</span>  autoWidth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  ordering<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  searching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  lengthChange<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  pageLength<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  pagingType<span class="token punctuation">:</span> <span class="token string">"cutsomPage"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们之前的配置，放上之后，发现了一个问题，我们的搜索和修改内容却出现了冲突，接下来我们修改分页器</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="点击分页器置顶问题" style="display: inline;"><a href="#点击分页器置顶问题" class="headerlink" title="点击分页器置顶问题"></a>点击分页器置顶问题</h4><p>我们之前的分页器，使用的<code>&lt;a&gt;</code>标签的 <code>href</code> 为 <code>#</code> ，这样带来的问题会导致我们点击超链接的时候，会跳转到顶部。有两种方法可以解决这个问题。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">function</span> <span class="token function">NextConMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> resString <span class="token operator">=</span> <span class="token string">'\                &lt;li class="list-inline-item float-sm-right">\                  &lt;a class="u-pagination-v1__item u-pagination-v1-4 g-rounded-50 g-pa-7-16" aria-label="Next">\                    &lt;span aria-hidden="true">\                      下一页\                      &lt;i class="fa fa-angle-right g-ml-5">&lt;/i>\                    &lt;/span>\                    &lt;span class="sr-only">Next&lt;/span>\                  &lt;/a>\                &lt;/li>\                '</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接删除 href 属性</span>    <span class="token keyword">return</span> resString<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">NormalNumberConMethod</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> resString <span class="token operator">=</span> <span class="token string">'\              &lt;li class="list-inline-item g-hidden-sm-down hidden-all-list-li-link-elment">\                &lt;a class="u-pagination-v1__item u-pagination-v1-4 g-rounded-50 g-pa-7-14" href="javascript:void(0)">'</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">'&lt;/a>\              &lt;/li>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  javascript:void(0) 解决该问题</span>  <span class="token keyword">return</span> resString<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>直接删除 href 属性</li><li>javascript:void(0) 解决该问题</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="分页器的扩展性" style="display: inline;"><a href="#分页器的扩展性" class="headerlink" title="分页器的扩展性"></a>分页器的扩展性</h4><p>在共同使用的时候，由于我们之前很多属性修改的选择器都是使用的ID，导致我们在进行两个视图同时存在的时候会出现问题。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">const</span> selectorStr <span class="token operator">=</span> oSettings<span class="token punctuation">.</span>oInstance<span class="token punctuation">.</span>selector<span class="token operator">+</span><span class="token string">'_paginate'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过该方法 可以获取到 分页器的id 并且完成获取Element 的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们通过  <code>oSettings.oInstance.selector</code> 可以获取到分页器所服务器的ID，我们通过选择器，添加 <code>_paginate</code>获取到分页器。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>oSettings<span class="token punctuation">.</span>_iCurrentPage <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">' a[aria-label="Previous"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"u-pagination-v1__item--disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">' a[aria-label="Previous"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"u-pagination-v1__item--disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oSettings<span class="token punctuation">.</span>_iTotalPages <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> oSettings<span class="token punctuation">.</span>_iCurrentPage <span class="token operator">===</span> oSettings<span class="token punctuation">.</span>_iTotalPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">' a[aria-label="Next"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"u-pagination-v1__item--disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">' a[aria-label="Next"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"u-pagination-v1__item--disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// OR ->>>>>>>>></span><span class="token keyword">var</span> i<span class="token punctuation">,</span> oNumber<span class="token punctuation">,</span> oNumbers <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">" ul[class='list-inline']"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>selectorStr<span class="token operator">+</span><span class="token string">" .hidden-all-list-li-link-elment"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="页码展示问题修复" style="display: inline;"><a href="#页码展示问题修复" class="headerlink" title="页码展示问题修复"></a>页码展示问题修复</h4><p>我们之前的分页器有默认配置的 <code>iShowPages</code> 为3</p><p>第三个问题， 配饰 <code>iShowPages</code> ，在之前我们设置了为三个，但是由于之前的代码为</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">var</span> iShowPages <span class="token operator">=</span> oSettings<span class="token punctuation">.</span>oInit<span class="token punctuation">.</span>iShowPages <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span>iShowPages<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导致即使我们想不显示页码也会不得不显示3个，所以我们作出一下修改</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">var</span> iShowPages <span class="token operator">=</span> oSettings<span class="token punctuation">.</span>oInit<span class="token punctuation">.</span>iShowPages<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且在下方生成 页码的方法中增加判断方法，不需要展示的时候直接返回。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oSettings<span class="token punctuation">.</span>_iShowPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="安全访问属性问题" style="display: inline;"><a href="#安全访问属性问题" class="headerlink" title="安全访问属性问题"></a>安全访问属性问题</h2><p>之前没有遇到过这个问题，现在遇到了js访问属性的空值问题。</p><p>比如 <code>a.b.c.d</code> 其中，b不存在，那么会报错。</p><p>这个在Swift中还是很好解决的 <code>a?.b?.c?.d</code> 就可以解决了。但是貌似js没有这个东西，目前好像还在开发中。</p><p>那么我们就是用如下方法</p><p>以下内容是 Twitter引用，需要翻墙查阅</p><center><br><blockquote handle="nohandle" class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">In case you need a idx function.<br>const idx = (p, o) =&gt; p.reduce((xs, x) =&gt; (xs &amp;&amp; xs[x]) ? xs[x] : null, o)<br>Access deeply nested values… <a href="https://t.co/lyoUIZudF7" target="_blank" rel="noopener">pic.twitter.com/lyoUIZudF7</a></p>&mdash; A. Sharif (@sharifsbeat) <a href="https://twitter.com/sharifsbeat/status/843187365367767046?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2017年3月18日</a></blockquote><br><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><br></center><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  p<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xs<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>xs <span class="token operator">&amp;&amp;</span> xs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> xs<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// const commit = safe(comm);</span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>commit<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>committer<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>commit_commit_message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'commit'</span><span class="token punctuation">,</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"no message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\n/g</span><span class="token punctuation">,</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span>commit_sha <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>commit_author_html_url <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">,</span><span class="token string">'html_url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>commit_author_avatar_url <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">,</span><span class="token string">'avatar_url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token punctuation">;</span>commit_html_url <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'html_url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>commit_author_login <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">,</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>commit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此所有问题就都解决了。</p><p>所有涉及到的代码，都可以在本篇文章提交的commit中查看。</p>    <p hidden id="CurrentFileName">使用dataTable来展示修改历史专栏.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在整理博客的时候，发现还是存在一些问题的，比如搜素时候貌似中文搜索不出来？还有就是我的修改历史存在如果修改历史过多，内容会过于向下，导致内容出现乱掉的情况。&lt;/p&gt;
&lt;p&gt;今天我就打算使用DataTable修复这个问题，当然是通过分页的方式，你可以使用任意一种分页的方式解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="博客历程" scheme="http://blog.msiter.com/categories/%E5%8D%9A%E5%AE%A2%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="博客美化" scheme="http://blog.msiter.com/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
      <category term="hexo" scheme="http://blog.msiter.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>给博客文章增加修改历史专栏</title>
    <link href="http://blog.msiter.com/g,jbkwzzjxglszl-20180423.html"/>
    <id>http://blog.msiter.com/g,jbkwzzjxglszl-20180423.html</id>
    <published>2018-04-23T15:11:00.000Z</published>
    <updated>2018-08-29T10:33:16.506Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有更新文章了，总想着最近要写点什么。</p><p>看着自己的博客，觉的修改历史还是比较帅气的，那么这次我们来谈一下如何实现修改历史吧。</p><p>修改历史，其实无非就是<code>git commit</code>历史，那么我们就来一步步的讲一讲我是如何实现，这个修改历史功能的吧。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="获取git-commit-历史" style="display: inline;"><a href="#获取git-commit-历史" class="headerlink" title="获取git commit 历史"></a>获取git commit 历史</h2><p>我目前的博客使用github pages 功能，所以获取git commit 功能是github api 提供的，我们可以这个样子获取到。</p><p>发起一个GET请求，请求地址为<code>https://api.github.com/repos/{仓库所有人名称}/{仓库名称}/commits</code><br>以我的博客仓库地址为例就是<code>https://api.github.com/repos/aimobier/aimobier.github.io/commits</code></p><p>这个请求需要</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">sha</td><td style="text-align:left">目标分支</td></tr><tr><td style="text-align:left">path</td><td style="text-align:left">目标文件路径</td></tr></tbody>                    </table>                </div>            </div><p>这个时候我们可以先尝试一下<code>https://api.github.com/repos/aimobier/aimobier.github.io/commits?sha=master&amp;path=404.html</code></p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"sha"</span><span class="token punctuation">:</span> <span class="token string">"72aa633b57313257e643e5b3d3216b34f22406f1"</span><span class="token punctuation">,</span>    <span class="token string">"commit"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aimobier"</span><span class="token punctuation">,</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"200739491@qq.com"</span><span class="token punctuation">,</span>        <span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token string">"2018-04-17T06:37:07Z"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"committer"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aimobier"</span><span class="token punctuation">,</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"200739491@qq.com"</span><span class="token punctuation">,</span>        <span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token string">"2018-04-17T06:37:07Z"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Site updated: 2018-04-17 06:36:56"</span><span class="token punctuation">,</span>      <span class="token string">"tree"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"sha"</span><span class="token punctuation">:</span> <span class="token string">"7eb0a9f414c576382bf0aae5f375829e79383758"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/repos/aimobier/aimobier.github.io/git/trees/7eb0a9f414c576382bf0aae5f375829e79383758"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/repos/aimobier/aimobier.github.io/git/commits/72aa633b57313257e643e5b3d3216b34f22406f1"</span><span class="token punctuation">,</span>      <span class="token string">"comment_count"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string">"verification"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"verified"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"reason"</span><span class="token punctuation">:</span> <span class="token string">"unsigned"</span><span class="token punctuation">,</span>        <span class="token string">"signature"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token string">"payload"</span><span class="token punctuation">:</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/repos/aimobier/aimobier.github.io/commits/72aa633b57313257e643e5b3d3216b34f22406f1"</span><span class="token punctuation">,</span>    <span class="token string">"html_url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aimobier/aimobier.github.io/commit/72aa633b57313257e643e5b3d3216b34f22406f1"</span><span class="token punctuation">,</span>    <span class="token string">"comments_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/repos/aimobier/aimobier.github.io/commits/72aa633b57313257e643e5b3d3216b34f22406f1/comments"</span><span class="token punctuation">,</span>    <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">6121524</span><span class="token punctuation">,</span>      <span class="token string">"avatar_url"</span><span class="token punctuation">:</span> <span class="token string">"https://avatars2.githubusercontent.com/u/6121524?v=4"</span><span class="token punctuation">,</span>      <span class="token string">"gravatar_id"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"html_url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"followers_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/followers"</span><span class="token punctuation">,</span>      <span class="token string">"following_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/following{/other_user}"</span><span class="token punctuation">,</span>      <span class="token string">"gists_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/gists{/gist_id}"</span><span class="token punctuation">,</span>      <span class="token string">"starred_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/starred{/owner}{/repo}"</span><span class="token punctuation">,</span>      <span class="token string">"subscriptions_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/subscriptions"</span><span class="token punctuation">,</span>      <span class="token string">"organizations_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/orgs"</span><span class="token punctuation">,</span>      <span class="token string">"repos_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/repos"</span><span class="token punctuation">,</span>      <span class="token string">"events_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/events{/privacy}"</span><span class="token punctuation">,</span>      <span class="token string">"received_events_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/received_events"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"User"</span><span class="token punctuation">,</span>      <span class="token string">"site_admin"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"committer"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">6121524</span><span class="token punctuation">,</span>      <span class="token string">"avatar_url"</span><span class="token punctuation">:</span> <span class="token string">"https://avatars2.githubusercontent.com/u/6121524?v=4"</span><span class="token punctuation">,</span>      <span class="token string">"gravatar_id"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"html_url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aimobier"</span><span class="token punctuation">,</span>      <span class="token string">"followers_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/followers"</span><span class="token punctuation">,</span>      <span class="token string">"following_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/following{/other_user}"</span><span class="token punctuation">,</span>      <span class="token string">"gists_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/gists{/gist_id}"</span><span class="token punctuation">,</span>      <span class="token string">"starred_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/starred{/owner}{/repo}"</span><span class="token punctuation">,</span>      <span class="token string">"subscriptions_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/subscriptions"</span><span class="token punctuation">,</span>      <span class="token string">"organizations_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/orgs"</span><span class="token punctuation">,</span>      <span class="token string">"repos_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/repos"</span><span class="token punctuation">,</span>      <span class="token string">"events_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/events{/privacy}"</span><span class="token punctuation">,</span>      <span class="token string">"received_events_url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/users/aimobier/received_events"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"User"</span><span class="token punctuation">,</span>      <span class="token string">"site_admin"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"parents"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string">"sha"</span><span class="token punctuation">:</span> <span class="token string">"191f968e43f2685925cba24cfa49fe7465fc99d3"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://api.github.com/repos/aimobier/aimobier.github.io/commits/191f968e43f2685925cba24cfa49fe7465fc99d3"</span><span class="token punctuation">,</span>        <span class="token string">"html_url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aimobier/aimobier.github.io/commit/191f968e43f2685925cba24cfa49fe7465fc99d3"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们已经可以获取到自己的commit日志了，那么接下来的问题就是，如何知道文件的名称了</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="获取文件的路径" style="display: inline;"><a href="#获取文件的路径" class="headerlink" title="获取文件的路径"></a>获取文件的路径</h2><p>我们的每一篇文章，文件名称和标题是不一定存在的。当然我们可以将标题和文件名称自己去约束自己完成这个操作，这样子我们直接使用标题拼接字符串就可以完成路径的获取了，但是这种需要人为配置的方式，我不是很喜欢，要是写错了，那还得配置很久呢。</p><p>所以我们来试用一下方式来完成该操作。</p><p>首先我们创建一个脚本拦截文章配置之后的事件儿<code>after_post_render</code></p><p>我们之前的文章筛选代码如下</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token comment" spellcheck="true">/** * Created by jingwenzheng on 2018/3/8. */</span><span class="token keyword">var</span> cheerio<span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cheerio<span class="token punctuation">)</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ulliHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">codeHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imageHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">blockquoteHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleTable</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>content <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们接下来需要增加一个 hidden 标签，让它来存储我们需要的路径字段</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token comment" spellcheck="true">/** * Created by jingwenzheng on 2018/3/8. */</span><span class="token keyword">var</span> cheerio<span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> appendHtmlString <span class="token operator">=</span> <span class="token string">'\  &lt;p hidden id="CurrentFileName">'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>full_source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/p>\  '</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>content <span class="token operator">+</span><span class="token operator">=</span> appendHtmlString<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cheerio<span class="token punctuation">)</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ulliHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">codeHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imageHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">blockquoteHandle</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleTable</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>content <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子我们就可以使用 <code>$(&quot;#CurrentFileName&quot;)</code>获取到我们的额路径地址了</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="最终完成" style="display: inline;"><a href="#最终完成" class="headerlink" title="最终完成"></a>最终完成</h2><p>好了，现在我们万事俱备让我们来书写我们的最终代码吧。</p><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token keyword">const</span> GitHubHistoryReq <span class="token operator">=</span> <span class="token punctuation">{</span>  requestBodyParams<span class="token punctuation">:</span> <span class="token punctuation">{</span>    sha<span class="token punctuation">:</span> <span class="token string">"make-blog"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分支名称</span>    path<span class="token punctuation">:</span> <span class="token string">"source/_posts/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文章存储路径</span>    paramF<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 返回请求的参数对象</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        sha<span class="token punctuation">:</span> <span class="token string">"make-blog"</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">"source/_posts/"</span> <span class="token operator">+</span> fn<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  requestUrlParams<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token string">"aimobier"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名称</span>    repos<span class="token punctuation">:</span> <span class="token string">"aimobier.github.io"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 仓库名称</span>    urlF<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 返回完整的请求链接地址</span>      <span class="token keyword">return</span> <span class="token string">"https://api.github.com/repos/"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repos <span class="token operator">+</span> <span class="token string">"/commits"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  Request<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#CurrentFileName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fileName <span class="token operator">!==</span> undefined <span class="token operator">||</span> fileName <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestUrlParams<span class="token punctuation">.</span><span class="token function">urlF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestBodyParams<span class="token punctuation">.</span><span class="token function">paramF</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestSuccess<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  timeSince<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> interval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds <span class="token operator">/</span> <span class="token number">31536000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interval <span class="token operator">+</span> <span class="token string">" years ago"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    interval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds <span class="token operator">/</span> <span class="token number">2592000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interval <span class="token operator">+</span> <span class="token string">" months ago"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    interval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds <span class="token operator">/</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interval <span class="token operator">+</span> <span class="token string">" days ago"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    interval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interval <span class="token operator">+</span> <span class="token string">" hours ago"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    interval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interval <span class="token operator">+</span> <span class="token string">" minutes ago"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" seconds ago"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  returnHtmlElment<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>commit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>commit<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>committer<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    commit<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>message <span class="token operator">=</span> commit<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\n/g</span><span class="token punctuation">,</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'\    &lt;li class="media g-brd-around g-brd-gray-light-v4 g-pa-20 g-mb-minus-1">\      &lt;div class="d-flex g-mt-2 g-mr-15">\        &lt;a target="_blank" href="'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>author<span class="token punctuation">.</span>html_url <span class="token operator">+</span> <span class="token string">'">&lt;img class="g-width-30 g-height-30 rounded-circle" src="'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>author<span class="token punctuation">.</span>avatar_url <span class="token operator">+</span> <span class="token string">'" alt="Image Description">&lt;/a>\      &lt;/div>\      &lt;div class="media-body">\        &lt;div class="d-flex justify-content-between">\          &lt;a target="_blank" href="'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>author<span class="token punctuation">.</span>html_url <span class="token operator">+</span> <span class="token string">'">&lt;strong class="g-font-size-9">'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>author<span class="token punctuation">.</span>login <span class="token operator">+</span> <span class="token string">'&lt;/strong>&lt;/a>\          &lt;a target="_blank" href="'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>html_url <span class="token operator">+</span> <span class="token string">'">&lt;span class="align-self-center g-font-size-9 text-nowrap">'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>commit<span class="token punctuation">.</span>sha<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;/a>\        &lt;/div>\        &lt;span class="align-self-center g-font-size-9 text-nowrap g-color-gray-dark-v4">'</span><span class="token operator">+</span><span class="token function">timeago</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/span>\        &lt;span class="d-block g-font-size-11">'</span> <span class="token operator">+</span> commit<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">'&lt;/span>\      &lt;/div>\    &lt;/li>\    '</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  requestSuccess<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> liRes <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">returnHtmlElment</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#commit-history"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>liRes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  editHtmlMethod<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#CurrentFileName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> urlString <span class="token operator">=</span> <span class="token string">"https://github.com/aimobier/aimobier.github.io/tree/make-blog/source/_posts/"</span><span class="token operator">+</span>fileName<span class="token punctuation">;</span>    <span class="token keyword">const</span> editHtml <span class="token operator">=</span> <span class="token string">'\    &lt;li class="list-inline-item g-mx-10">/&lt;/li>\    &lt;li class="list-inline-item g-mr-10">\      &lt;a target="_blank" class="u-link-v5 g-color-deeporange g-color-orange--hover" href="'</span><span class="token operator">+</span>urlString<span class="token operator">+</span><span class="token string">'">\              &lt;i class="align-middle mr-2 fa fa-edit u-line-icon-pro">&lt;/i>发现错误，编辑本页\            &lt;/a>\    &lt;/li>\    '</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#editHtmlElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>editHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  GitHubHistoryReq<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  GitHubHistoryReq<span class="token punctuation">.</span><span class="token function">editHtmlMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们最终在 <code>editHtmlMethod</code> 方法中，完成了历史的植入。另外的布局不在这里展开了。</p><p>可以查阅 <a href="https://github.com/aimobier/aimobier.github.io/commit/c7b07a2a730b77620e012e22d7e6d5daec25fdd4" target="_blank" rel="noopener">c7b07a2a730b77620e012e22d7e6d5daec25fdd4</a> 来具体查看我的代码。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="增加编辑本页" style="display: inline;"><a href="#增加编辑本页" class="headerlink" title="增加编辑本页"></a>增加编辑本页</h2><p>其实我们已经做到这一步了，这个就很简单了，无非就是增加一个链接的事儿了。增加链接的目的就是让用户点击可以到用户所查看的文章的源文件。</p><p>把我们的本篇文章的链接，贴到页面，用户可以提交修改内容，我们只需要进行审批就好了。</p>    <p hidden id="CurrentFileName">给博客文章增加修改历史专栏.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没有更新文章了，总想着最近要写点什么。&lt;/p&gt;
&lt;p&gt;看着自己的博客，觉的修改历史还是比较帅气的，那么这次我们来谈一下如何实现修改历史吧。&lt;/p&gt;
&lt;p&gt;修改历史，其实无非就是&lt;code&gt;git commit&lt;/code&gt;历史，那么我们就来一步步的讲一讲我是如何实现，这个修改历史功能的吧。&lt;/p&gt;
    
    </summary>
    
      <category term="博客历程" scheme="http://blog.msiter.com/categories/%E5%8D%9A%E5%AE%A2%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="博客美化" scheme="http://blog.msiter.com/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
      <category term="hexo" scheme="http://blog.msiter.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>隔离见证 闪电网络 理解</title>
    <link href="http://blog.msiter.com/btbglj,xzhsdwllj,x-20180416.html"/>
    <id>http://blog.msiter.com/btbglj,xzhsdwllj,x-20180416.html</id>
    <published>2018-04-16T17:25:00.000Z</published>
    <updated>2018-08-29T10:33:16.506Z</updated>
    
    <content type="html"><![CDATA[<p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/ShanwangpingKarst_EN-AU5360258756_1920x1080.jpg" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/ShanwangpingKarst_EN-AU5360258756_1920x1080.jpg" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">要是可以回到5年前。一定要买比特币。</figcaption></figure></p><p>bitcoin也许是有这样那样的问题，但是它是划时代的，面向未来的一次实验。        如今反对bitcoin的人的观点都是使用现今经济模式理论的，但他们有严重的逻辑缺陷——显然bitcoin是用来破坏这一模式的。        比如很多人阐述的bitecoin没有政府信用担保。事实上政府的存在也是依靠大众的信用。政府的信用只不过是大众赋予的。bitcoin本身就是大众（目前来说还是少数人）对政府控制铸币权的挑战。</p><a id="more"></a><p>接下来我们会从以下这几个方面完成一些讨论。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="隔离见证" style="display: inline;"><a href="#隔离见证" class="headerlink" title="隔离见证"></a>隔离见证</h2>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>Segregated Witness, or SegWit, is the name used for an implemented soft fork change in the transaction format of the cryptocurrency bitcoin, which has also been implemented on currencies such as Litecoin, DigiByte, Vertcoin and Feathercoin</p></em>                                </div>        <p>在<a href="https://en.wikipedia.org/wiki/SegWit" target="_blank" rel="noopener">SegWit Wikipedia</a>中，我们可以看到，主要是为了防止延展性。所以接下来我们先来看看，如果没有隔离见证会发生什么样的问题呢？</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="为什么需要隔离见证" style="display: inline;"><a href="#为什么需要隔离见证" class="headerlink" title="为什么需要隔离见证"></a>为什么需要隔离见证</h3><p>久负盛名的比特币交易所 MT.Gox 莫名其妙就破产了，MT.Gox 在比特币的发展史上作用巨大，一直作为比特币价格的风向标。直到上周它宣布破产，先前的“谣言”得到证实，人们才敢相信 MT.Gox 真的是倒闭了。</p><p>MT.Gox 在 2010 年就开始了比特币交易，比特币象征着自由、民主，具备改变世界金融秩序的潜力，MT.Gox 作为交易所也因此印上了离经叛道的光环。MT.Gox 尽管对比特币的发展贡献巨大，但作为一个交易所，一个商业机构，本身却做得一团糟，尤其是内部管理混乱、缺乏经验。</p><p>这种混乱的结果是，MT.Gox 逐渐积重难返，最后被黑客轻易得手，偷走了 4.6 亿美元的资产，MT.Gox 就此终结。<br>连线记者讲述了这段离奇的故事，MT.Gox 最早是美国企业家 Jed McCaleb 在 2010 年 7 月创办，域名注册于 2007 年，并在 2010 年底转为比特币交换平台。McCaleb 想法很简单，当时一个比特币已经可兑换数美元，而且挖矿机正在源源不断地产出新的比特币，他想建立一个交易所连接买家和卖家。</p><p>很快，这个交易所花光了 McCaleb 所有的积蓄，他意识到自己玩不下去了，于是出售给另一位比特币爱好者，网名叫 Magicaltux。</p><p>Magicaltux 正是 Mark Karpeles 的网名，他在法国出生，出生后在以色列呆了很长时间，最后定居日本、结婚，成为一名父亲。Karpeles 的生活可谓用悠闲来形容，除了照顾孩子，闲时还喜欢发一些猫咪的视频。当然，他喜欢比特币，2011 年，他将 MT.Gox 收购。</p><p>Karpeles 将网站的后端软件重写，改进了用户体验，加上他在比特币社区的活跃，越来越多的人在这里交易比特币，最终它变成了最流行的交易平台，承担着全球 70% 的交易。</p><p>这次收购促成 MT.Gox 一跃成为市场的领头羊，事实证明，Karpeles 对于技术的精通在网站发展初期十分有效，但是在后期，Karpeles 在商业管理的不足逐渐凸现出来，但 MT.Gox 并未因此做出改变。</p><p>比特币价格的飞涨给参与进来的人巨大的回报，MT.Gox 处理的流水越来越多，通过手续费累积的比特币也越来越多，数量达到了 10 万级别，总价值数千万美元。Karpeles 的身价也水涨船高，他拥有 MT.Gox 88% 的股权，前任拥有者 McCaleb 拥有剩余的 12%。</p><p>比特币的交易是建立在信用基础上，作为一名比特币爱好者，Karpeles 很注重外界对他的评价，这种想法甚至高于 MT.Gox 在商业上的成功。根据内部员工透露，他总是跟人说起自己是门萨俱乐部的一员，拥有高于常人的 IQ，这名员工说道：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/mt-gox-bitcoin.jpg" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/mt-gox-bitcoin.jpg" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Mark Karpeles</figcaption></figure></p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>“他喜欢被赞扬的感觉，喜欢被叫做比特币之王。”</p></em>                                </div>        <p>Karpeles 花费 5000 个比特币建立比特币基金会，在其中出任董事会成员，这是一个非盈利性组织，这将给他在比特币世界里带来威望。</p><p>但这些光环却掩盖不了 MT.Gox 在业务上的问题，MT.Gox 就像是在等待灾难来临，却从不去解决问题。</p><p>问题主要还是出在产品上，MT.Gox 很长一段时间都不使用控制软件来制定专业的开发环境，这意味着两个同事在同一个文件夹下工作，很有可能覆盖掉对方的代码。他们甚至把许多不经测试的软件推送到用户手机上，要知道他们是做金融服务的，这样做很容易引发问题。</p><p>在 MT.Gox 里，只有一个人有权限修改网站的源代码，即 Karpeles，这意味着源代码出问题的时候，需要 Karpeles 亲手来解决，但 CEO 通常都很忙，许多问题会拖好几周。糟糕的是，据员工透露，源代码的问题很多，bug 不断。</p><p>这些问题引发大商业客户的不满，去年他们被 CoinLab 起诉，要求赔偿 7500 万美元，原因是这家客户提现的时间居然被延迟了数月之久。彼时，许多其他交易网站逐渐崛起，MT.Gox 的交易数量额已经从第一掉到了第三名。</p><p>Karpeles 不重视产品简直到了无以复加的地步，2011 年 6 月，MT.Gox 首次遭遇黑客攻击，比特币爱好者 Jesse Powell 从旧金山赶过来，与好友 Roger Ver 一起帮 MT.Gox 解决问题，他们还没来得及放下行李就去办公室工作。当时受此影响，MT.Gox 比特币的价格暴跌，从 30 美元跌至 0.01 美元，比特币市场遭遇重创。</p><p>Powell、Ver 和 Karpeles 工作了一整周来修复问题，回答用户的咨询等，但是直到周末，问题还没解决。Powell、Ver 准备周末接着干，但意外的是，Karpeles 却决定周末放假休息，让两个志愿者大跌眼镜，他们感到十分泄气。</p><p>Karpeles 并未真正重视这个问题，等到周一开工，他却花时间在整理信封，把问题丢在一边。</p><p>接触他的人认为，Karpeles 逐渐厌倦做 CEO 了，对于问题采用消极的态度，他更喜欢花时间修理服务器、安装一些小工具等。</p><p>MT.Gox 新的大楼在建的时候，他还迷恋上新的项目：比特币咖啡馆。游人可以在里面休息，喝咖啡，但是付账只能使用比特币，这是 Karpeles 破解收银机的成果，Karpeles 很以此得意。当时 MT.Gox 已经处在下坡路上，这些周边的事物花去了 Karpeles 太多的精力。</p><p>“咖啡馆可能是 Karpeles 每天与银行、客户打交道这些暗无天日的日子里，唯一可以让他轻松的地方。”Powell 说道。可惜的是，咖啡馆终究没能开业。</p><p>随着 2 月份到来，危机终于降临，黑客利用比特币“可锻性”，将 MT.Gox 中的比特币洗劫一空，MT.Gox 也“暂停”提现比特币。在沉默了多天之后，示威者开始出现在办公室外面，谣言四起，但纸包不住火…</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>以上文字 引自<a href="https://www.ifanr.com/405596" target="_blank" rel="noopener">MT.Gox 倒闭内幕：不负责任的领导者葬送一切</a></p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="什么是交易延展性" style="display: inline;"><a href="#什么是交易延展性" class="headerlink" title="什么是交易延展性"></a>什么是交易延展性</h3><p>什么叫做 延展性，说是延展性，也可以理解为可塑性。举个例子来说《龙门镖局》中的白敬祺为了藏私房钱，将银锭打成了银夜壶，而银夜壶和银锭的价值是相当的，这就是金属“可锻性”的物理表现。<br>比特币的一个“交易”是一段指令，这段指令告诉整个网络：我作为一些比特币的拥有者，要把他们的所有权转移到目标地址。这样，谁拥有目标地址，我就把钱打给谁了。<br>这段指令本质上是一个hash字符串，就像这样：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">01000000017a06ea98cd40ba2e3288262b28638cec5337c1456aaf5eedc8e9e5a20f062bdf000000008b48304502202ef6483a2509394551eadf333afe2a749dbe77729a7b729ad79bf2f2246483b0022100ce8a3f1801e32e95aeceac4ab400713b783120930f436774d27ca85c27428bfa014104e0ba531dc5d2ad13e2178<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，你对这个字符串提取一个所谓的哈希，可以理解为用摘要的方式获得一个比较短的字符串，像这样的：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">0735353e82b8496eb87fc910d8cf814384028d0a853926c6acfd7b01190ea0b4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将这一个字符串进行解码之后，我们格式化出以下这一段JSON。</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript"><span class="token punctuation">{</span>   <span class="token string">"ver"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>   <span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>         <span class="token string">"sequence"</span><span class="token punctuation">:</span><span class="token number">4294967295</span><span class="token punctuation">,</span>         <span class="token string">"witness"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"prev_out"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">"spent"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token string">"tx_index"</span><span class="token punctuation">:</span><span class="token number">52155217</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token string">"1DAtxVrwDDofiSwBqqiz4fkfPv1dCvt2Lx"</span><span class="token punctuation">,</span>            <span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">5020000</span><span class="token punctuation">,</span>            <span class="token string">"n"</span><span class="token punctuation">:</span><span class="token number">1554</span><span class="token punctuation">,</span>            <span class="token string">"script"</span><span class="token punctuation">:</span><span class="token string">"76a91485809fdc9c4cfebe73793cf1c4ddb328806737fd88ac"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"script”:”483045022100efe12e2584bbd346bccfe67fd50a54191e4f45f……"</span>      <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">"weight"</span><span class="token punctuation">:</span><span class="token number">768</span><span class="token punctuation">,</span>   <span class="token string">"block_height"</span><span class="token punctuation">:</span><span class="token number">290000</span><span class="token punctuation">,</span>   <span class="token string">"relayed_by"</span><span class="token punctuation">:</span><span class="token string">"24.13.82.77"</span><span class="token punctuation">,</span>   <span class="token string">"out"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>         <span class="token string">"spent"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token string">"tx_index"</span><span class="token punctuation">:</span><span class="token number">52159814</span><span class="token punctuation">,</span>         <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>         <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token string">"1JKygTtQjrY1mzMHLGuSdTEgi4P75vnjbG"</span><span class="token punctuation">,</span>         <span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">5010000</span><span class="token punctuation">,</span>         <span class="token string">"n"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>         <span class="token string">"script"</span><span class="token punctuation">:</span><span class="token string">"76a914be10f0a78f5ac63e8746f7f2e62a5663eed0578888ac"</span>      <span class="token punctuation">}</span>   <span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">// .... 更多</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在结构体中 input 第一个结构中 script “483045022100efe12e2584bbd346bccfe67fd50a54191e4f45f……” 就是咱们的输入脚本，这种格式下很难去辨认，所以格式化输出可以得到以下的结果。</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript"><span class="token comment" spellcheck="true">// 输入 脚本结构</span><span class="token comment" spellcheck="true">// 其中 asm 为 签名 一起 公钥</span><span class="token punctuation">{</span>    <span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"asm"</span><span class="token punctuation">:</span> <span class="token string">"3045022100efe12e2584bbd346bccfe67fd50a54191e4f45f945e3853658284358d9c062ad02200121e00b6297c0874650d00b786971f5b4601e32b3f81afa9f9f8108e93c752201 038b29d4fbbd12619d45c84c83cb4330337ab1b1a3737250f29cec679d7551148a"</span><span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"nonstandard"</span><span class="token punctuation">,</span>        <span class="token string">"p2sh"</span><span class="token punctuation">:</span> <span class="token string">"3C7mDUFw5MLBw37bbsAN79mKuHi7oyjKwb"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，我们可以得到输出的格式化结构</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"asm"</span><span class="token punctuation">:</span> <span class="token string">"OP_DUP OP_HASH160 be10f0a78f5ac63e8746f7f2e62a5663eed05788 OP_EQUALVERIFY OP_CHECKSIG"</span><span class="token punctuation">,</span>        <span class="token string">"reqSigs"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"pubkeyhash"</span><span class="token punctuation">,</span>        <span class="token string">"addresses"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"1JKygTtQjrY1mzMHLGuSdTEgi4P75vnjbG"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"p2sh"</span><span class="token punctuation">:</span> <span class="token string">"3PDv3dAkEp7B57ReMs64grHiaEwTr3YEmb"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已经得到脚本的结构了。接下来看看脚本到底是如何做到检验脚本的</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="逆波兰表达式" style="display: inline;"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h4>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>逆波兰结构由弗里德里希·鲍尔（Friedrich L. Bauer）和艾兹格·迪科斯彻在1960年代早期提议用于表达式求值，以利用堆栈结构减少计算机内存访问。逆波兰记法和相应的算法由澳大利亚哲学家、计算机学家查尔斯·汉布林（Charles Hamblin）在1960年代中期扩充<br>— 摘自 <a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener">维基百科</a></p></em>                                </div>        <p>大概的意思，它是基于堆栈的，先进后出 FILO(First-In-Last-Out)。就比如说，正常来说，我们实现一个加法操作。本来应该是</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照 逆波兰 表达式来看的话，就是。</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript"><span class="token number">1</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先 <code>1</code> <code>2</code> 进栈。接着 运行到<code>+</code>，这个时候 <code>1</code> <code>2</code> 出栈，计算结果并入栈。 之后运行到 <code>=</code> 将结果出栈。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="运行脚本" style="display: inline;"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><p>我们的bitCoin的脚本也是使用的这种堆栈式执行的方式。我们来运行以下看看如何。(关于脚本的解释，引自<a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="noopener">BitCoin Wiki Script</a>)</p><ol><li>运行输入脚本</li><li>输入的 签名进栈 ，公钥进栈</li><li>运行输出脚本</li><li>运行 OP_DUP 它的含义是 复制栈顶元素 -&gt; 复制公钥</li><li>运行 OP_HASH160 含义是 将栈顶元素做 先SHA-256，在做 RIPEMD-160 -&gt; 得到 公钥的HASH值</li><li>之后 运行到 一段Hash 值，我们把它压栈</li><li>运行到 OP_EQUALVERIFY 含义是 将栈顶前两个元素出栈 并判断是否相等 如果相等 就继续 否则就跳出并返回false</li><li>运行到 OP_CHECKSIG 含义是检验 私钥和签名是否为真 结果同上</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="OP-CHECKSIG-细节" style="display: inline;"><a href="#OP-CHECKSIG-细节" class="headerlink" title="OP_CHECKSIG 细节"></a>OP_CHECKSIG 细节</h4><!-- Reverse Border Black Blockquotes --><p><blockquote handle="nohandle" class="blockquote blockquote-reverse g-brd-2 g-brd-black g-font-size-16 g-mb-30"><br>  <footer class="blockquote-footer text-right"> 摘自 <a href="https://www.liaoxuefeng.com/article/001482718603696a6b6eb2bebc74211ab967146a952ae0c000" target="_blank" rel="noopener">&lt;廖雪峰的官方网站 - 深入理解比特币交易的脚本&gt;</a><br>    <cite title="Source Title">廖雪峰</cite><br>  </footer><br></blockquote><br><!-- End Reverse Border Black Blockquotes --></p><p>把当前Transaction的所有TxIn的scriptSig去掉（红色部分），并把当前TxIn的scriptSig替换为UTXO的script（蓝色部分），调整长度字段（绿色部分）：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/l.jpg" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/l.jpg" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">签名检验部分</figcaption></figure></p><p>最后加上小端序4字节的签名类型0x01（灰色部分），计算两次SHA256，我们得到：</p><pre class="line-numbers language-javascript g-mb-30"><code class="language-javascript">c2d48f45<span class="token operator">...</span><span class="token number">2669</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，使用ECDSA算法对签名进行验证：</p><pre class="line-numbers language-c++ g-mb-30"><code class="language-c++">boolean ecdsa_verify_signature(byte[] message, byte[] signature, byte[] pubkey)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>我们讲完了，执行过程，我们来看一下，如何完成交易延展性攻击。比特币区块链上每笔交易记录里都包含有见证信息，交易的唯一标识（交易的哈希值）也是包括了见证信息计算出来的。由于见证算法的数学特性，任何人在拿到一个交易记录后，拿到其中的见证信息，然后可以在不需要知道私钥的情况下，很容易的拼凑出另外一个有效的见证信息。这样，他可以用拼凑出来的另外那个见证信息，拼凑上交易记录中的其他交易信息，制造出一个另外一个交易记录（哈希值不同）。如果可以让拼凑出来的交易记录先被写入区块链，那么，之前那个原始交易记录会被认为是无效的交易而失败。这不会造成双花，也不会对区块链造成破坏，但是对原始交易记录的发起者会造成困扰，因为如果拿着原始交易记录的哈希值找不到交易的成功记录。尤其是对于一些交易所，如果没有完整的内部日志，可能无法追溯交易记录，导致攻击者利用拼凑的交易记录先成功提币，再申诉说没有提到币，要求再次提币。隔离见证后，见证信息不再是交易记录的一部分，也就不参与交易记录哈希的计算，无法再通过修改见证信息来拼凑另外一个交易记录。</p><p>作者：blockchain<br>链接：<a href="https://www.zhihu.com/question/58567061/answer/301418337" target="_blank" rel="noopener">https://www.zhihu.com/question/58567061/answer/301418337</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="MT-Gox-攻击模拟" style="display: inline;"><a href="#MT-Gox-攻击模拟" class="headerlink" title="MT.Gox 攻击模拟"></a>MT.Gox 攻击模拟</h4><p>当交易发送到比特币网络中后，网络中的各个结点会根据之前生成的签名来验证交易的真实性，这些做法都是很正确很理所当然的，MT就是这么做的，当你提现的时候，它就发出一个交易，然后记录下这个ID。当有人提现出问题要求重发时，他们就用这个ID去比特币网络检查这个ID有没有被确认，如果没有的话就重发。而问题就出现在签名算法中，由于现在大部分使用的签名算法都是基于OpenSSL的ECDSA（椭圆曲线数字签名），这个签名算法的一个问题就是，修改签名的某个字节能够使得签名依然校验成功，这样伪造签名之后交易依然能成功进行。如果单在比特币网络中这似乎没什么大不了的，顶多可以捣捣乱，因为你能使用的输出就那一个，你其中一笔交易使用了输出，第二笔自然就不会成功。但是对于第三方交易系统就不同了</p><ol><li>你像交易所发起交易请求，交易所向比特币网络广播交易</li><li>你通过矿机获取到交易，利用交易延展性，修改Txid</li><li>假如你的交易率先完成了写入区块，攻击完成，你首先得到自己伪造交易的比特币</li><li>你想交易所，申请，自己没有提到钱，申请在此提取</li><li>交易所再次发起交易 你会得到两份比特币</li></ol><p>大家还会有一个疑问，就是我们伪造的交易请求是在正常交易请求之后发出的，如果正常交易被采纳了，那我们伪造的交易如何能够奏效呢？这里就要说到比特币网络的一个特性，发出一个比特币交易请求后不会立刻返回交易成功与否，在比特币网络中会有一个处理延时，而比特币网络由于自身的特性，所有交易请求是以网状形式随机处理的，两次交易请求并不会以队列形式依次处理。这就给攻击者提供了可乘之机，专业的讲叫做时间条件竞争，通俗的讲就是拼人品。我们伪造的交易和正常的交易都在比特币网络中，如果伪造的交易先被处理，那么攻击成功。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="闪电网络" style="display: inline;"><a href="#闪电网络" class="headerlink" title="闪电网络"></a>闪电网络</h2><p><strong>Transactions for the Future</strong></p><p><strong>Instant Payments</strong>. Lightning-fast blockchain payments without worrying about block confirmation times. Security is enforced by blockchain smart-contracts without creating a on-blockchain transaction for individual payments. Payment speed measured in milliseconds to seconds.</p><p><strong>Scalability</strong>. Capable of millions to billions of transactions per second across the network. Capacity blows away legacy payment rails by many orders of magnitude. Attaching payment per action/click is now possible without custodians.</p><p><strong>Low Cost</strong>. By transacting and settling off-blockchain, the Lightning Network allows for exceptionally low fees, which allows for emerging use cases such as instant micropayments.</p><p><strong>Cross Blockchains</strong>. Cross-chain atomic swaps can occur off-chain instantly with heterogeneous blockchain consensus rules. So long as the chains can support the same cryptographic hash function, it is possible to make transactions across blockchains without trust in 3rd party custodians.</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>引自 <a href="https://lightning.network/" target="_blank" rel="noopener">Lightning Network 首页</a></p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="为什么需要闪电网络" style="display: inline;"><a href="#为什么需要闪电网络" class="headerlink" title="为什么需要闪电网络"></a>为什么需要闪电网络</h3><p>首先我们来说一下，现在比特币网络中存在的问题</p><ol><li>处理能力<br>在最理想状态下，平均每笔交易225 字节。在1M区块限制下，一般平均10分钟可以打包大约 4400 笔交易。每秒大约7.3笔交易，实际交易平均大小是这个的一倍，那么容量减半，也就是每秒大约 3.6 笔交易。<br>与当今的金融系统相比，Visa在标准的节假日每秒处理4.5万笔交易，通常的一个营业日则为数亿次交易。支付宝的每秒可以处理10万笔交易。而2017年的双11，支付峰值每秒25.6万笔。，然而比特币现在每秒约能支持7笔交易，同时还会受到区块链大小的限制。</li><li>时间延迟<br>每一笔交易发起的时候，会出现10分钟的延迟，才会有可能被矿工确认。并且目前的交易量上升之后，你被确认的等待时间和你的手续费成反比，也就是说你的手续费越低，你被处理的顺序就越靠后。</li><li>交易最终性<br>由于算哈希是随机的，加上网络有延迟，是有同时挖出两个区块的可能，然后不同的矿工根据他们收到的区块不同继续挖，然后还是有可能再出现分叉，但是几率会越来越小。<br>一般认为一个区块在最长链上后面跟了五个区块，就不可能被分叉了。随着区块数量的增加，再次产生分叉的几率是呈指数下降的。到了6的区块的时候，就已经下降到不太可能分叉的情况</li><li>容量<br>比特币，区块目前已经到51W多个区块。这么多的区块产生的容量是巨大的,而且以后只增不减</li><li>交易费<br>中本聪最开始确定bitcoin一共有2100万个，当全部挖掘出来之后，矿工将不再获得奖励，到那个时候，矿工所有的收益都来自交易中的手续费。就目前为止，待确认交易堆积的这么多，也和交易费有关系，如果你想矿工早点确认你的交易，那么你就需要提高你的手续费，否则就没人处理。但是这个引起的来问题，也很明显，我就想买杯咖啡，就需要支付手续费吗？</li></ol><p>闪电网络就是为了这解决这些的。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="闪电网络-RSMC" style="display: inline;"><a href="#闪电网络-RSMC" class="headerlink" title="闪电网络 - RSMC"></a>闪电网络 - RSMC</h4><p>闪电网络的基础是交易双方之间的双向微支付通道，RSMC（Recoverable Sequence Maturity Contract）定义了该双向微支付通道的最基本工作方式。</p><p>微支付通道中沉淀了一部分资金，通道也记录有双方对资金的分配方案。通道刚设立时，初值可能是{Alice: 0.4, Bob: 0.6}，意味着打入通道的资金共有1.0 BTC，其中Alice拥有0.4 BTC，Bob拥有0.6 BTC。通道的设立会记录在比特币区块链上。</p><p>假设稍后Bob决定向Alice支付0.1 BTC。双方在链下对最新余额分配方案{Alice:0.5, Bob:0.5} 签字认可，并签字同意作废前一版本的余额分配方案{Alice:0.4, Bob:0.6}，Alice就实际获得了0.5 BTC的控制权。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/Snip20160612_90.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/Snip20160612_90.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">前后两个版本的余额分配方案</figcaption></figure></p><p>如果Alice暂时不需要将通道中现在属于她的0.5 BTC用作支付，她可以无需及时更新区块链上记录的通道余额分配方案，因为很可能一分钟后Alice又需要反过来向Bob支付0.1 BTC，此时他们仍然只需在链下对新的余额分配方案达成一致，并设法作废前一版本的余额分配方案就行了。</p><p>如果Alice打算终止通道并动用她的那份资金，她可以向区块链出示双方签字的余额分配方案。如果一段时间之内Bob不提出异议，区块链会终止通道并将资金按协议转入各自预先设立的提现地址。如果Bob能在这段时间内提交证据证明Alice企图使用的是一个双方已同意作废的余额分配方案，则Alice的资金将被罚没并给到Bob。</p><p>实际上，前面所说的“作废前一版本的余额分配”，正是通过构建适当的“举证”证据并结合罚没机制实现的。</p><p>为了鼓励双方尽可能久地利用通道进行交易，RSMC对主动终止通道方给予了一定的惩罚：主动提出方其资金到账将比对方晚，因此谁发起谁吃亏。这个设计虽然增加了技术复杂度，但应该说是合理的。</p><p>通道余额分配方案的本质是结算准备金。在此安排下，因为要完全控制资金交收风险，每笔交易都不能突破当前结算准备金所施限制。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="闪电网络-HTLC" style="display: inline;"><a href="#闪电网络-HTLC" class="headerlink" title="闪电网络 - HTLC"></a>闪电网络 - HTLC</h4><p>RSMC只支持最简单的无条件资金支付，HTLC（Hashed Timelock Contract）进一步实现了有条件的资金支付，通道余额的分配方式也因此变得更为复杂。</p><p>通过HTLC，Alice和Bob可以达成这样一个协议：协议将锁定Alice的0.1 BTC，在时刻T到来之前（T以未来的某个区块链高度表述），如果Bob能够向Alice出示一个适当的R（称为秘密），使得R的哈希值等于事先约定的值H(R)，Bob就能获得这0.1 BTC；如果直到时刻T过去Bob仍然未能提供一个正确的R，这0.1 BTC将自动解冻并归还Alice。</p><p>由于到期时间T、提款条件H(R)、支付金额、支付方向的不同，同一个通道上可以同时存在多个活动的HTLC合约，加上唯一的通过RSMC协议商定的无条件资金余额，余额分配方式会变得相当复杂。假设双方初始各存入0.5 BTC，一段时间后余额分配可能这样：</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/Snip20160612_91.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/Snip20160612_91.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">一段时间后的余额分配方案</figcaption></figure></p><p>余额分配方案是一种快照，只能整体刷新。接上表，如果Alice下一刻决定无条件向Bob支付0.1 BTC，或者Alice在T1前向Bob出示了符合H(R1)的秘密，双方将在链下交换并共同签字认定新的快照，然后构建适当的“举证”证据，结合罚没机制作废前一版本的快照。这些动作完全不出现在区块链上。<br>引入HTLC后，任何一方仍然能通过在区块链上公开最终余额快照的方式终止通道。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="闪电网络-1" style="display: inline;"><a href="#闪电网络-1" class="headerlink" title="闪电网络"></a>闪电网络</h4><p>基于HTLC可以实现终极目标“闪电网络”。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/Snip20160612_92.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/Snip20160612_92.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">闪电网络的支付路径</figcaption></figure></p><p>如上图所示，Alice想给Dave发送0.05 BTC，但Alice和Dave之间并没有微支付通道。但这没关系，Alice找到了一条经过Bob、Carol到达Dave的支付路径，该路径由Alice/Bob, Bob/Carol和Carol/Dave这样三个微支付通道串接而成。</p><p>Dave生成一个秘密R并将Hash(R)发送给Alice，Alice不需要知道R。R和Hash(R)的作用就像是古代调兵用的一对虎符。</p><p>Alice和Bob商定一个HTLC合约：只要Bob能在3天内向Alice出示哈希正确的R，Alice会支付Bob 0.052 BTC；如果Bob做不到这点，这笔钱3天后自动退还Alice。</p><p>同样地，Bob和Carol商定一个HTLC合约：只要Carol能在2天内向Bob出示哈希正确的R，Bob会支付Carol 0.051 BTC；如果Carol做不到这点，这笔钱到期自动退还Bob。</p><p>最后，Carol和Dave商定一个HTLC合约：只要Dave能在1天内向Carol出示哈希正确的R，Carol会支付Dave 0.05 BTC；如果Dave做不到这点，这笔钱到期自动退还Carol。</p><p>一切就绪后，Dave及时向Carol披露R并拿到0.05 BTC；现在Carol知道了R，她可以向Bob出示密码R并拿到0.051 BTC（差额部分的0.001 BTC成了Carol的佣金）；Bob知道R后当然会向Alice出示并拿到他的那份0.052 BTC，差额部分的0.001 BTC成了Bob的佣金。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/Snip20160612_93.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/Snip20160612_93.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">闪电网络逐级提款</figcaption></figure></p><p>整个过程很容易理解。最终效果是Alice支付了0.052 BTC，Dave安全地拿到0.05 BTC，整个闪电支付网络为此收取的佣金成本是0.002 BTC。上述过程中的全部动作都发生在比特币区块链之外。</p><p>尽管闪电网络本身可以基于任何合适的传统技术构建，闪电网络的支付通道也可能逐渐向少数大型中介集中，变成若干大型中介彼此互联、普通用户直连大型中介的形式，但这种方案仍然具有传统中心化方案不可比拟的优势，因为用户现在并不需要信任中介，不需要在中介处存钱才能转移支付，资金安全受到比特币区块链的充分保护。</p><p>比特币闪电网络的实现方式非常复杂，不拟在此展开讲解，有兴趣的读者可以在附录一中找到详细的技术剖析。</p><!-- Reverse Border Black Blockquotes --><p><blockquote handle="nohandle" class="blockquote blockquote-reverse g-brd-2 g-brd-black g-font-size-16 g-mb-30"><br>  <footer class="blockquote-footer text-right"> 闪电网络学习自 <a href="http://www.8btc.com/ln-rn-corda" target="_blank" rel="noopener">详解最近大热的闪电网络、雷电网络和CORDA</a><br>    <cite title="Source Title">上交所朱立</cite><br>  </footer><br></blockquote><br><!-- End Reverse Border Black Blockquotes --></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="吐槽百度" style="display: inline;"><a href="#吐槽百度" class="headerlink" title="吐槽百度"></a>吐槽百度</h4><p>真的不得不吐槽下百度哈….. 都是搜索文章标题，为什么差距有些大</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/WX20180417-110420.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/WX20180417-110420.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">百度搜索结果</figcaption></figure><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/隔离见证闪电网络/WX20180417-110442.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/隔离见证闪电网络/WX20180417-110442.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Google搜索结果</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="原子交易" style="display: inline;"><a href="#原子交易" class="headerlink" title="原子交易"></a>原子交易</h2><p>A picks a random number x</p><p>A creates TX1: “Pay w BTC to &lt;B’s public key&gt; if (x for H(x) known and signed by B) or (signed by A &amp; B)”</p><p>A creates TX2: “Pay w BTC from TX1 to &lt;A’s public key&gt;, locked 48 hours in the future, signed by A”</p><p>A sends TX2 to B</p><p>B signs TX2 and returns to A</p><p>1) A submits TX1 to the network</p><p>B creates TX3: “Pay v alt-coins to <a-public-key> if (x for H(x) known and signed by A) or (signed by A &amp; B)”</a-public-key></p><p>B creates TX4: “Pay v alt-coins from TX3 to &lt;B’s public key&gt;, locked 24 hours in the future, signed by B”</p><p>B sends TX4 to A</p><p>A signs TX4 and sends back to B</p><p>2) B submits TX3 to the network</p><p>3) A spends TX3, revealing x</p><p>4) B spends TX1 using x</p><p>This is atomic (with timeout).  If the process is halted, it can be reversed no matter when it is stopped.</p><p>Before 1: Nothing public has been broadcast, so nothing happens<br>Between 1 &amp; 2: A can use refund transaction after 72 hours to get his money back<br>Between 2 &amp; 3: B can get refund after 24 hours.  A has 24 more hours to get his refund<br>After 3: Transaction is completed by 2</p><ul class="g-list-style-circle"><li>A must spend his new coin within 24 hours or B can claim the refund and keep his coins</li><li>B must spend his new coin within 72 hours or A can claim the refund and keep his coins</li></ul><p>For safety, both should complete the process with lots of time until the deadlines.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="原子交易-闪电网络" style="display: inline;"><a href="#原子交易-闪电网络" class="headerlink" title="原子交易 闪电网络"></a>原子交易 闪电网络</h2><p><blockquote handle="nohandle" class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">Special thanks to <a href="https://twitter.com/bitconner?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@bitconner</a> for his super hard work on this! 🙌<br><br>And <a href="https://twitter.com/roasbeef?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@roasbeef</a> and <a href="https://twitter.com/SatoshiLite?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@SatoshiLite</a> for the help and feedback!</p>&mdash; Lightning Labs⚡️ (@lightning) <a href="https://twitter.com/lightning/status/931277482359005184?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2017年11月16日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="动画演示" style="display: inline;"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h2><p>更多详解 可以查看 <a href="http://7xt8nx.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E9%92%B1%E5%8C%85%E8%B0%83%E7%A0%94%20%E6%9C%80%E7%BB%88%E7%89%88%E6%9C%AC.key" target="_blank" rel="noopener">Pages</a> 以及 它的<a href="/publicFiles/images/隔离见证闪电网络/PPT 文稿.md">描述文件</a></p>    <p hidden id="CurrentFileName">比特币隔离见证和闪电网络理解.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/publicFiles/images/隔离见证闪电网络/ShanwangpingKarst_EN-AU5360258756_1920x1080.jpg&quot; alt=&quot;&quot; title=&quot;要是可以回到5年前。一定要买比特币。&quot;&gt;&lt;/p&gt;
&lt;p&gt;bitcoin也许是有这样那样的问题，但是它是划时代的，面向未来的一次实验。        如今反对bitcoin的人的观点都是使用现今经济模式理论的，但他们有严重的逻辑缺陷——显然bitcoin是用来破坏这一模式的。        比如很多人阐述的bitecoin没有政府信用担保。事实上政府的存在也是依靠大众的信用。政府的信用只不过是大众赋予的。bitcoin本身就是大众（目前来说还是少数人）对政府控制铸币权的挑战。&lt;/p&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://blog.msiter.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Segwit" scheme="http://blog.msiter.com/tags/Segwit/"/>
    
      <category term="Lightning Network" scheme="http://blog.msiter.com/tags/Lightning-Network/"/>
    
      <category term="Atomic Transaction" scheme="http://blog.msiter.com/tags/Atomic-Transaction/"/>
    
  </entry>
  
  <entry>
    <title>bitcoin hierarchical deterministic wallets</title>
    <link href="http://blog.msiter.com/BIP32-39-43-44-20180323.html"/>
    <id>http://blog.msiter.com/BIP32-39-43-44-20180323.html</id>
    <published>2018-03-23T17:25:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="私钥-公钥-比特币地址" style="display: inline;"><a href="#私钥-公钥-比特币地址" class="headerlink" title="私钥 公钥 比特币地址"></a>私钥 公钥 比特币地址</h2><p>一个比特币钱包中包含一系列的密钥对，每个密钥对包括一个私钥和一个公钥。私钥（k）是一个数字，通常是随机选出的。<br>有了私钥，我们就可以使用椭圆曲线乘法这个单向加密函数产生一个公钥（K）。<br>有了公钥（K），我们就可以使用一个单向加密哈希函数生成比特币地址（A）。<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig401.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig401.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">公私钥单向关系示意图</figcaption></figure></p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="私钥" style="display: inline;"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h3><p>私钥就是一个随机选出的数字而已。一个比特币地址中的所有资金的控制取决于相应私钥的所有权和控制权。在比特币交易中，私钥用于生成支付比特币所必需的签名以证明资金的所有权。私钥必须始终保持机密，因为一旦被泄露给第三方，相当于该私钥保护之下的比特币也拱手相让了。私钥还必须进行备份，以防意外丢失，因为私钥一旦丢失就难以复原，其所保护的比特币也将永远丢失。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>比特币私钥只是一个数字。你可以用硬币、铅笔和纸来随机生成你的私钥：掷硬币256次，用纸和笔记录正反面并转换为0和1，随机得到的256位二进制数字可作为比特币钱包的私钥。该私钥可进一步生成公钥。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="公钥" style="display: inline;"><a href="#公钥" class="headerlink" title="公钥"></a>公钥</h3><p>通过椭圆曲线算法可以从私钥计算得到公钥，这是不可逆转的过程：<code>K = k * G</code> 。其中<code>k</code>是私钥，<code>G</code>是被称为生成点的常数点，而K是所得公钥。其反向运算，被称为“寻找离散对数”——已知公钥<code>K</code>来求出私钥<code>k</code>——是非常困难的，就像去试验所有可能的<code>k</code>值，即暴力搜索。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="比特币地址" style="display: inline;"><a href="#比特币地址" class="headerlink" title="比特币地址"></a>比特币地址</h3><p>比特币地址是一个由数字和字母组成的字符串，可以与任何想给你比特币的人分享。由公钥（一个同样由数字和字母组成的字符串）生成的比特币地址以数字“1”开头。下面是一个比特币地址的例子：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">1J7mdg5rbQyUHENYdx39WVWK7fsLpEoXZy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在交易中，比特币地址通常以收款方出现。如果把比特币交易比作一张支票，比特币地址就是收款人，也就是我们要写入收款人一栏的内容。一张支票的收款人可能是某个银行账户，也可能是某个公司、机构，甚至是现金支票。支票不需要指定一个特定的账户，而是用一个普通的名字作为收款人，这使它成为一种相当灵活的支付工具。与此类似，比特币地址的使用也使比特币交易变得很灵活。比特币地址可以代表一对公钥和私钥的所有者，也可以代表其它东西，比如“P2SH (Pay-to-Script-Hash)”付款脚本。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="如何生成比特币地址" style="display: inline;"><a href="#如何生成比特币地址" class="headerlink" title="如何生成比特币地址"></a>如何生成比特币地址</h4><p>比特币地址可由公钥经过单向的加密哈希算法得到。哈希算法是一种单向函数，接收任意长度的输入产生指纹摘要。加密哈希函数在比特币中被广泛使用：比特币地址、脚本地址以及在挖矿中的工作量证明算法。由公钥生成比特币地址时使用的算法是Secure Hash Algorithm (SHA)和the RACE Integrity Primitives Evaluation Message Digest (RIPEMD)，特别是SHA256和RIPEMD160。</p><p>以公钥 K 为输入，计算其SHA256哈希值，并以此结果计算RIPEMD160 哈希值，得到一个长度为160比特（20字节）的数字：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token comment" spellcheck="true">/// K是公钥，A是生成的比特币地址。</span>A <span class="token operator">=</span> <span class="token function">RIPEMD160</span><span class="token punctuation">(</span><span class="token function">SHA256</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>比特币地址与公钥不同。比特币地址是由公钥经过单向的哈希函数生成的。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="私钥-公钥-格式" style="display: inline;"><a href="#私钥-公钥-格式" class="headerlink" title="私钥 公钥 格式"></a>私钥 公钥 格式</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="公钥的格式" style="display: inline;"><a href="#公钥的格式" class="headerlink" title="公钥的格式"></a>公钥的格式</h3><p>公钥也可以用多种不同格式来表示，最重要的是它们分为非压缩格式或压缩格式公钥这两种形式。</p><p>我们从前文可知，公钥是在椭圆曲线上的一个点，由一对坐标（x，y）组成。公钥通常表示为前缀04紧接着两个256比特的数字。其中一个256比特数字是公钥的x坐标，另一个256比特数字是y坐标。前缀04是用来区分非压缩格式公钥，压缩格式公钥是以02或者03开头。</p><p>下面是由前文中的私钥所生成的公钥，其坐标x和y如下：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">x <span class="token operator">=</span> F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341Ay <span class="token operator">=</span> 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面是同样的公钥以520比特的数字（130个十六进制数字）来表达。这个520比特的数字以前缀04开头，紧接着是x及y坐标，组成格式为04 x y</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">K <span class="token operator">=</span> 04F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="压缩格式化公钥" style="display: inline;"><a href="#压缩格式化公钥" class="headerlink" title="压缩格式化公钥"></a>压缩格式化公钥</h4><p>引入压缩格式公钥是为了减少比特币交易的字节数，从而可以节省那些运行区块链数据库的节点磁盘空间。大部分比特币交易包含了公钥，用于验证用户的凭据和支付比特币。每个公钥有520比特（包括前缀，x坐标，y坐标）。如果每个区块有数百个交易，每天有成千上万的交易发生，区块链里就会被写入大量的数据。</p><p>一个公钥是一个椭圆曲线上的点(x, y)。而椭圆曲线实际是一个数学方程，曲线上的点实际是该方程的一个解。因此，如果我们知道了公钥的x坐标，就可以通过解方程y2 mod p = (x3 + 7) mod p得到y坐标。这种方案可以让我们只存储公钥的x坐标，略去y坐标，从而将公钥的大小和存储空间减少了256比特。每个交易所需要的字节数减少了近一半，随着时间推移，就大大节省了很多数据传输和存储。</p><p>未压缩格式公钥使用04作为前缀，而压缩格式公钥是以02或03作为前缀。需要这两种不同前缀的原因是：因为椭圆曲线加密的公式的左边是y2 ，也就是说y的解是来自于一个平方根，可能是正值也可能是负值。更形象地说，y坐标可能在x坐标轴的上面或者下面。从椭圆曲线图中可以看出，曲线是对称的，从x轴看就像对称的镜子两面。因此，如果我们略去y坐标，就必须储存y的符号（正值或者负值）。换句话说，对于给定的x值，我们需要知道y值在x轴的上面还是下面，因为它们代表椭圆曲线上不同的点，即不同的公钥。当我们在素数p阶的有限域上使用二进制算术计算椭圆曲线的时候，y坐标可能是奇数或者偶数，分别对应前面所讲的y值的正负符号。因此，为了区分y坐标的两种可能值，我们在生成压缩格式公钥时，如果y是偶数，则使用02作为前缀；如果y是奇数，则使用03作为前缀。这样就可以根据公钥中给定的x值，正确推导出对应的y坐标，从而将公钥解压缩为在椭圆曲线上的完整的点坐标。下图阐释了公钥压缩：<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig407.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig407.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">公钥压缩</figcaption></figure><br>下面是前述章节所生成的公钥，使用了264比特（66个十六进制数字）的压缩格式公钥格式，其中前缀03表示y坐标是一个奇数</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">K <span class="token operator">=</span> 03F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>带来的问题：</p><p>这个压缩格式公钥对应着同样的一个私钥，这意味它是由同样的私钥所生成。但是压缩格式公钥和非压缩格式公钥差别很大。更重要的是，如果我们使用双哈希函数(RIPEMD160(SHA256(K)))将压缩格式公钥转化成比特币地址，得到的地址将会不同于由非压缩格式公钥产生的地址。这种结果会让人迷惑，因为一个私钥可以生成两种不同格式的公钥——压缩格式和非压缩格式，而这两种格式的公钥可以生成两个不同的比特币地址。但是，这两个不同的比特币地址的私钥是一样的。</p><p>压缩格式公钥渐渐成为了各种不同的比特币客户端的默认格式，它可以大大减少交易所需的字节数，同时也让存储区块链所需的磁盘空间变小。然而，并非所有的客户端都支持压缩格式公钥，于是那些较新的支持压缩格式公钥的客户端就不得不考虑如何处理那些来自较老的不支持压缩格式公钥的客户端的交易。这在钱包应用导入另一个钱包应用的私钥的时候就会变得尤其重要，因为新钱包需要扫描区块链并找到所有与这些被导入私钥相关的交易。比特币钱包应该扫描哪个比特币地址呢？新客户端不知道应该使用哪个公钥：因为不论是通过压缩的公钥产生的比特币地址，还是通过非压缩的公钥产生的地址，两个都是合法的比特币地址，都可以被私钥正确签名，但是他们是完全不同的比特币地址。</p><p>为了解决这个问题，当私钥从钱包中被导出时，较新的比特币客户端将使用一种不同的钱包导入格式（Wallet Import Format）。这种新的钱包导入格式可以用来表明该私钥已经被用来生成压缩的公钥，同时生成的比特币地址也是基于该压缩的公钥。这个方案可以解决导入私钥来自于老钱包还是新钱包的问题，同时也解决了通过公钥生成的比特币地址是来自于压缩格式公钥还是非压缩格式公钥的问题。最后新钱包在扫描区块链时，就可以使用对应的比特币地址去查找该比特币地址在区块链里所发生的交易。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="私钥的格式化" style="display: inline;"><a href="#私钥的格式化" class="headerlink" title="私钥的格式化"></a>私钥的格式化</h3><p>实际上“压缩格式私钥”是一种名称上的误导，因为当一个私钥被使用WIF压缩格式导出时，不但没有压缩，而且比“非压缩格式”私钥长出一个字节。这个多出来的一个字节是私钥被加了后缀01，用以表明该私钥是来自于一个较新的钱包，只能被用来生成压缩的公钥。私钥是非压缩的，也不能被压缩。“压缩的私钥”实际上只是表示“用于生成压缩格式公钥的私钥”，而“非压缩格式私钥”用来表明“用于生成非压缩格式公钥的私钥”。为避免更多误解，应该只可以说导出格式是“WIF压缩格式”或者“WIF”，而不能说这个私钥是“压缩”的。</p><p>要注意的是，这些格式并不是可互换使用的。在较新的实现了压缩格式公钥的钱包中，私钥只能且永远被导出为WIF压缩格式（以K或L为前缀）。对于较老的没有实现压缩格式公钥的钱包，私钥将只能被导出为WIF格式（以5为前缀）导出。这样做的目的就是为了给导入这些私钥的钱包一个信号：到底是使用压缩格式公钥和比特币地址去扫描区块链，还是使用非压缩格式公钥和比特币地址。</p><p>如果一个比特币钱包实现了压缩格式公钥，那么它将会在所有交易中使用该压格式缩公钥。钱包中的私钥将会被用来生成压缩格式公钥，压缩格式公钥然后被用来生成交易中的比特币地址。当从一个实现了压缩格式公钥的比特币钱包导出私钥时，钱包导入格式（WIF）将会被修改为WIF压缩格式，该格式将会在私钥的后面附加一个字节大小的后缀01。最终的Base58Check编码格式的私钥被称作WIF（“压缩”）私钥，以字母“K”或“L”开头。而以“5”开头的是从较老的钱包中以WIF（非压缩）格式导出的私钥。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="比特币地址格式" style="display: inline;"><a href="#比特币地址格式" class="headerlink" title="比特币地址格式"></a>比特币地址格式</h3><p>通常用户见到的比特币地址是经过“Base58Check”编码的，这种编码使用了58个字符（一种Base58数字系统）和校验码，提高了可读性、避免歧义并有效防止了在地址转录和输入中产生的错误。Base58Check编码也被用于比特币的其它地方，例如比特币地址、私钥、加密的密钥和脚本哈希中，用来提高可读性和录入的正确性。<br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig405.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig405.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">比特币地址生成流程</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Base58和Base58Check编码" style="display: inline;"><a href="#Base58和Base58Check编码" class="headerlink" title="Base58和Base58Check编码"></a>Base58和Base58Check编码</h4><p>为了更简洁方便地表示长串的数字，许多计算机系统会使用一种以数字和字母组成的大于十进制的表示法。例如，传统的十进制计数系统使用0-9十个数字，而十六进制系统使用了额外的 A-F 六个字母。一个同样的数字，它的十六进制表示就会比十进制表示更短。更进一步，Base64使用了26个小写字母、26个大写字母、10个数字以及两个符号（例如“+”和“/”），用于在电子邮件这样的基于文本的媒介中传输二进制数据。Base64通常用于编码邮件中的附件。Base58是一种基于文本的二进制编码格式，用在比特币和其它的加密货币中。这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。Base58是Base64编码格式的子集，同样使用大小写字母和10个数字，但舍弃了一些容易错读和在特定字体中容易混淆的字符。具体地，Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母L）、I（大写字母i），以及“+”和“/”两个字符。简而言之，Base58就是由不包括（0，O，l，I）的大小写字母和数字组成。</p><p>比特币的Base58字母表</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Base58Check是一种常用在比特币中的Base58编码格式，增加了错误校验码来检查数据在转录中出现的错误。校验码长4个字节，添加到需要编码的数据之后。校验码是从需要编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。使用Base58check编码格式时，编码软件会计算原始数据的校验码并和结果数据中自带的校验码进行对比。二者不匹配则表明有错误产生，那么这个Base58Check格式的数据就是无效的。例如，一个错误比特币地址就不会被钱包认为是有效的地址，否则这种错误会造成资金的丢失。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Base58编码生成流程" style="display: inline;"><a href="#Base58编码生成流程" class="headerlink" title="Base58编码生成流程"></a>Base58编码生成流程</h4><p>为了使用Base58Check编码格式对数据（数字）进行编码，首先我们要对数据添加一个称作“版本字节”的前缀，这个前缀用来明确需要编码的数据的类型。例如，比特币地址的前缀是0（十六进制是0x00），而对私钥编码时前缀是128（十六进制是0x80）。</p><p>接下来，我们计算“双哈希”校验码，意味着要对之前的结果（前缀和数据）运行两次SHA256哈希算法：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">checksum <span class="token operator">=</span> <span class="token function">SHA256</span><span class="token punctuation">(</span><span class="token function">SHA256</span><span class="token punctuation">(</span>prefix<span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在产生的长32个字节的哈希值（两次哈希运算）中，我们只取前4个字节。这4个字节就作为校验码。校验码会添加到数据之后。</p><p>结果由三部分组成：前缀、数据和校验码。这个结果采用之前描述的Base58字母表编码。下图描述了Base58Check编码的过程。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig406.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig406.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">Base58 编码流程</figcaption></figure></p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">种类</th><th style="text-align:left">版本前缀 (hex)</th><th style="text-align:left">Base58格式</th></tr></thead><tbody><tr><td style="text-align:left">Bitcoin Address</td><td style="text-align:left">0x00</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">Pay-to-Script-Hash Address</td><td style="text-align:left">0x05</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">Bitcoin Testnet Address</td><td style="text-align:left">0x6F</td><td style="text-align:left">m or n</td></tr><tr><td style="text-align:left">Private Key WIF</td><td style="text-align:left">0x80</td><td style="text-align:left">5, K or L</td></tr><tr><td style="text-align:left">BIP38 Encrypted Private Key</td><td style="text-align:left">0x0142</td><td style="text-align:left">6P</td></tr><tr><td style="text-align:left">BIP32 Extended Public Key</td><td style="text-align:left">0x0488B21E</td><td style="text-align:left">xpub</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="比特币钱包" style="display: inline;"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h2><p>钱包是私钥的容器，通常通过有序文件或者简单的数据库实现。另外一种制作私钥的途径是 确定性密钥生成。在这里你可以用原先的私钥，通过单向哈希函数来生成每一个新的私钥，并将新生成的密钥按顺序连接。只要你可以重新创建这个序列，你只需要第一个私钥（称作种子、主私钥）来生成它们。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>比特币钱包只包含私钥而不是比特币。每一个用户有一个包含多个私钥的钱包。钱包中包含成对的私钥和公钥。用户用这些私钥来签名交易，从而证明它们拥有交易的输出（也就是其中的比特币）。比特币是以交易输出的形式来储存在区块链中（通常记为vout或txout）。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="非确定性（随机）钱包" style="display: inline;"><a href="#非确定性（随机）钱包" class="headerlink" title="非确定性（随机）钱包"></a>非确定性（随机）钱包</h3><p>在最早的一批比特币客户端中，钱包只是随机生成的私钥集合。这种类型的钱包被称作零型非确定钱包。举个例子，比特币核心客户端预先生成100个随机私钥，从最开始就生成足够多的私钥并且每把钥匙只使用一次。这种类型的钱包有一个昵称“Just a Bunch Of Keys（一堆私钥）”简称JBOK。这种钱包现在正在被确定性钱包替换，因为它们难以管理、备份以及导入。随机钥匙的缺点就是如果你生成很多，你必须保存它们所有的副本。这就意味着这个钱包必须被经常性地备份。每一把钥匙都必须备份，否则一旦钱包不可访问时，钱包所控制的资金就付之东流。这种情况直接与避免地址重复使用的原则相冲突——每个比特币地址只能用一次交易。地址通过关联多重交易和对方的地址重复使用会减少隐私。0型非确定性钱包并不是钱包的好选择，尤其是当你不想重复使用地址而创造过多的私钥并且要保存它们。虽然比特币核心客户包含0型钱包，但比特币的核心开发者并不想鼓励大家使用。下图表示包含有松散结构的随机钥匙的集合的非确定性钱包。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig408.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig408.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">非确定性（随机）钱包</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="确定性（种子）钱包" style="display: inline;"><a href="#确定性（种子）钱包" class="headerlink" title="确定性（种子）钱包"></a>确定性（种子）钱包</h3><p>确定性，或者“种子”钱包包含通过使用单项离散方程而可从公共的种子生成的私钥。种子是随机生成的数字。这个数字也含有比如索引号码或者可生成私钥的“链码”。在确定性钱包中，种子足够收回所有的已经产生的私钥，所以只用在初始创建时的一个简单备份就足以搞定。并且种子也足够让钱包输入或者输出。这就很容易允许使用者的私钥在钱包之间轻松转移输入。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="助记码词汇" style="display: inline;"><a href="#助记码词汇" class="headerlink" title="助记码词汇"></a>助记码词汇</h3><p>助记码词汇是英文单词序列代表（编码）用作种子对应所确定性钱包的随机数。单词的序列足以重新创建种子，并且从种子那里重新创造钱包以及所有私钥。在首次创建钱包时，带有助记码的，运行确定性钱包的钱包的应用程序将会向使用者展示一个12至24个词的顺序。单词的顺序就是钱包的备份。它也可以被用来恢复以及重新创造应用程序相同或者兼容的钱包的钥匙。助记码代码可以让使用者复制钱包更容易一些，因为它们相比较随机数字顺序来说，可以很容易地被读出来并且正确抄写。</p><p>建议使用若干个助记词来替换之前直接生成随机数的方式，通过助记词推导出随机的Master Seed。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="助记词列表" style="display: inline;"><a href="#助记词列表" class="headerlink" title="助记词列表"></a>助记词列表</h4><p>其中WordList，是存在<a href="https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md" target="_blank" rel="noopener">这里</a>的。<br>包含以下语言,每种语言都存在2048个单词，来成为助记词备选者。</p><p>每一种语言都提供对了对应的2048个词。其中都包含了，英文，日文，汉语，西班牙语，简体中文，繁体中文，法语，意大利。</p><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby"><span class="token constant">English</span><span class="token constant">Japanese</span><span class="token constant">Korean</span><span class="token constant">Spanish</span><span class="token function">Chinese</span> <span class="token punctuation">(</span><span class="token constant">Simplified</span><span class="token punctuation">)</span><span class="token function">Chinese</span> <span class="token punctuation">(</span><span class="token constant">Traditional</span><span class="token punctuation">)</span><span class="token constant">French</span><span class="token constant">Italian</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这些词语是通过随机的 128-256bits随机种子产生的助记词。所以，这些词是随机的，并且不可修改</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H5   </span><h5 id="这些词是不是安全的？" style="display: inline;"><a href="#这些词是不是安全的？" class="headerlink" title="这些词是不是安全的？"></a>这些词是不是安全的？</h5><p>好吧，我觉得 随机的东西… 主要有足够的时间，<strong>无限猴子理论</strong>。我只要重复实验下去，绝对会有这么一天，到时候，我会和另一个人拥有同样的Master Seed！！！</p><p>当然….几率有多小呢。。。通过 以下公式，我们可以得出在m个数据中，抽取n个数据的组合方式个数。</p><p>$$A^{m}_{n}=n\left( n-1\right) \ldots \left( n-m+1\right) =\dfrac {n!}{\left( n-m\right) !}$$</p><p>假设使用的是 128为的随机种子，产生了12个助记词。也就是在2048个数据中提取12个，总数为：</p><p>$$\dfrac {2048!}{\left( 2048-12\right) !}$$</p><p>这个还只是，没有排列顺序的方式，他抽取的助记词，顺序也是一种随机因素。所以只会比这个还大。</p><p>好吧，还是不好理解，那么我们来说一下我们熟知的双色球红球概率。</p><p>$$\dfrac {33!}{\left( 33-6\right) !}$$</p><p>有797 448 960个组合方式，这个几率就已经很少有人中奖了… 何况这么大…</p><p>emmmmm… 至少，我算不出来他的几率是多少。。。因为光是<a href="https://zh.numberempire.com/factorialcalculator.php" target="_blank" rel="noopener">2048 的阶乘</a>,,,就写满了一页纸。。。。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="生成的方式" style="display: inline;"><a href="#生成的方式" class="headerlink" title="生成的方式"></a>生成的方式</h4><p>接下来会说明下，生成助记词和通过助记词生成 Master Seed 的原理</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="生成助记词的过程" style="display: inline;"><a href="#生成助记词的过程" class="headerlink" title="生成助记词的过程"></a>生成助记词的过程</h4><ol><li>规定熵的位数必须是 32 的整数倍，所以熵的长度取值位 128 到 256 之间取 32 的整数倍的值，分别为 128, 160, 192, 224, 256；</li><li>校验和的长度为熵的长度/32 位, 所以校验和长度可为 4，5，6，7，8 位</li><li>助记词库有 2048 个词，用 11 位可全部定位词库中所有的词，作为词的索引，故一个词用 11 位表示，助记词的个数可为 (熵+校验和)/11，值为 12，15，18，21，24</li></ol>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>熵(bits)</th><th style="text-align:center">校验和(bits)</th><th style="text-align:right">熵+校验和(bits)</th><th style="text-align:right">助记词</th></tr></thead><tbody><tr><td>128</td><td style="text-align:center">(128/32)4</td><td style="text-align:right">132</td><td style="text-align:right">(132/11) -&gt; 12</td></tr><tr><td>160</td><td style="text-align:center">(160/32)4</td><td style="text-align:right">165</td><td style="text-align:right">(132/11) -&gt; 15</td></tr><tr><td>192</td><td style="text-align:center">(192/32)4</td><td style="text-align:right">198</td><td style="text-align:right">(132/11) -&gt; 18</td></tr><tr><td>224</td><td style="text-align:center">(224/32)4</td><td style="text-align:right">231</td><td style="text-align:right">(132/11) -&gt; 21</td></tr><tr><td>256</td><td style="text-align:center">(256/32)4</td><td style="text-align:right">264</td><td style="text-align:right">(132/11) -&gt; 24</td></tr></tbody>                    </table>                </div>            </div><pre class="line-numbers language-ruby g-mb-30"><code class="language-ruby"><span class="token comment" spellcheck="true">## CS 为 校验和的长度</span><span class="token constant">CS</span> <span class="token operator">=</span> <span class="token constant">ENT</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token comment" spellcheck="true">## MS 为 助记词的个数</span><span class="token constant">MS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">ENT</span> <span class="token operator">+</span> <span class="token constant">CS</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">11</span><span class="token operator">|</span>  <span class="token constant">ENT</span>  <span class="token operator">|</span> <span class="token constant">CS</span> <span class="token operator">|</span> <span class="token constant">ENT</span><span class="token operator">+</span><span class="token constant">CS</span> <span class="token operator">|</span>  <span class="token constant">MS</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">128</span>  <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span>   <span class="token number">132</span>  <span class="token operator">|</span>  <span class="token number">12</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">160</span>  <span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">165</span>  <span class="token operator">|</span>  <span class="token number">15</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">192</span>  <span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span>   <span class="token number">198</span>  <span class="token operator">|</span>  <span class="token number">18</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">224</span>  <span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span>   <span class="token number">231</span>  <span class="token operator">|</span>  <span class="token number">21</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">256</span>  <span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span>   <span class="token number">264</span>  <span class="token operator">|</span>  <span class="token number">24</span>  <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤如下：</strong></p><ol><li>生成一个长度为 128~256 位 (bits) 的随机序列(熵)</li><li>取熵哈希后的前 n 位作为校验和 (n= 熵长度/32)</li><li>随机序列 + 校验和 -&gt; 拼接起来</li><li>把步骤三得到的结果每 11 位切割</li><li>步骤四得到的每 11 位字节(二进制转为-&gt;十进制)通过Index获取匹配词库的一个词</li><li>步骤五得到的结果就是助记词串</li></ol><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/BIP32-39-43-44/18473-2b7a5a54bfb9b0e7.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/BIP32-39-43-44/18473-2b7a5a54bfb9b0e7.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">生成助记词过程</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="助记词生成-Master-Seed的过程" style="display: inline;"><a href="#助记词生成-Master-Seed的过程" class="headerlink" title="助记词生成 Master Seed的过程"></a>助记词生成 Master Seed的过程</h4><p>为了从助记词中生成二进制种子，BIP39 采用 <a href="https://en.wikipedia.org/wiki/PBKDF2" target="_blank" rel="noopener">PBKDF2</a> 函数推算种子，其参数如下：</p><ul class="g-list-style-circle"><li>助记词句子作为密码</li><li>“mnemonic” + passphrase 作为盐</li><li>2048 作为重复计算的次数</li><li>HMAC-SHA512 作为随机算法</li><li>512 位(64 字节)是期望得到的密钥长度</li></ul><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/BIP32-39-43-44/18473-1ca2010125693f37.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/BIP32-39-43-44/18473-1ca2010125693f37.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">助记词推出随机种子</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="分层确定性钱包" style="display: inline;"><a href="#分层确定性钱包" class="headerlink" title="分层确定性钱包"></a>分层确定性钱包</h3><p>确定性钱包被开发成更容易从单个“种子”中生成许多关键的钥匙。最高级的来自确定性钱包的形是通过BIP0032标准生成的 the hierarchical deterministic wallet or HD wallet defined。分层确定性钱包包含从数结构所生成的钥匙。这种母钥匙可以生成子钥匙的序列。这些子钥匙又可以衍生出孙钥匙，以此无穷类推。这个树结构表如下图所示。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig409.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig409.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">分层确定性钱包</figcaption></figure></p><p>HD钱包提供了随机（不确定性）钥匙有两个主要的优势。第一，树状结构可以被用来表达额外的组织含义。比如当一个特定分支的子密钥被用来接收交易收入并且有另一个分支的子密钥用来负责支付花费。不同分支的密钥都可以被用在企业环境中，这就可以支配不同的分支部门，子公司，具体功能以及会计类别。</p><p>HD钱包的第二个好处就是它可以允许让使用者去建立一个公共密钥的序列而不需要访问相对应的私钥。这可允许HD钱包在不安全的服务器中使用或者在每笔交易中发行不同的公共钥匙。公共钥匙不需要被预先加载或者提前衍生，但是在服务器中不具有可用来支付的私钥。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="从种子中创造HD钱包" style="display: inline;"><a href="#从种子中创造HD钱包" class="headerlink" title="从种子中创造HD钱包"></a>从种子中创造HD钱包</h4><p>HD钱包从单个root seed中创建，为128到256位的随机数。HD钱包的所有的确定性都衍生自这个根种子。任何兼容HD钱包的根种子也可重新创造整个HD钱包。所以简单的转移HD钱包的根种子就让HD钱包中所包含的成千上百万的密钥被复制，储存导出以及导入。根种子一般总是被表示为a mnemonic word sequence，助记码词汇可以让人们更容易地抄写和储存。</p><p>创建主密钥以及HD钱包地主链代码的过程如下图所示。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig410.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig410.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">创建主密钥以及HD钱包地主链代码的过程</figcaption></figure></p><p>根种子输入到HMAC-SHA512算法中就可以得到一个可用来创造master private key(m) 和 a master chain code的哈希。主私钥（m）之后可以通过使用我们在本章先前看到的那个普通椭圆曲线<code>m * G</code>过程生来成相对应的主公钥（M）。链代码可以给从母密钥中创造子密钥的那个方程中引入的熵。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="私有子秘钥的衍生" style="display: inline;"><a href="#私有子秘钥的衍生" class="headerlink" title="私有子秘钥的衍生"></a>私有子秘钥的衍生</h4><p>分层确定性钱包使用CKD（child key derivation)方程去从母密钥衍生出子密钥。</p><p>子密钥衍生方程是基于单项哈希方程。这个方程结合了：</p><ul class="g-list-style-circle"><li>一个母私钥或者公共钥匙（ECDSA未压缩键）</li><li>一个叫做链码（256 bits）的种子</li><li>一个索引号（32 bits）</li></ul><p>链码是用来给这个过程引入看似的随机数据的，使得索引不能充分衍生其他的子密钥。因此，有了子密钥并不能让它发现自己的相似子密钥，除非你已经有了链码。最初的链码种子（在密码树的根部）是用随机数据构成的，随后链码从各自的母链码中衍生出来。</p><p>这三个项目相结合并散列可以生成子密钥，如下。</p><p>母公共钥匙——链码——以及索引号合并在一起并且用HMAC-SHA512方程散列之后可以产生512位的散列。所得的散列可被拆分为两部分。散列右半部分的256位产出可以给子链当链码。左半部分256位散列以及索引码被加载在母私钥上来衍生子私钥。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig411.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig411.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">延长母私钥去创造子私钥</figcaption></figure></p><p>改变索引可以让我们延长母密钥以及创造序列中的其他子密钥。比如子0，子1，子2等等。每一个母密钥可以右20亿个子密钥。</p><p>向密码树下一层重复这个过程，每个子密钥可以依次成为母密钥继续创造它自己的子密钥，直到无限代。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="使用衍生的子密钥" style="display: inline;"><a href="#使用衍生的子密钥" class="headerlink" title="使用衍生的子密钥"></a>使用衍生的子密钥</h4><p>子私钥不能从非确定性（随机）密钥中被区分出来。因为衍生方程是单向方程，所以子密钥不能被用来发现他们的母密钥。子密钥也不能用来发现他们的相同层级的姊妹密钥。如果你有第n个子密钥，你不能发现它前面的（第n－1）或者后面的子密钥（n＋1）或者在同一顺序中的其他子密钥。只有母密钥以及链码才能得到所有的子密钥。没有子链码的话，子密钥也不能用来衍生出任何孙密钥。你需要同时有子密钥以及对应的链码才能创建一个新的分支来衍生出孙密钥。</p><p>那子私钥自己可被用做什么呢？它可以用来做公共钥匙和比特币地址。之后它就可以被用那个地址来签署交易和支付任何东西。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>子密钥、对应的公共钥匙以及比特币地址都不能从随机创造的密钥和地址中被区分出来。事实是它们所在的序列，在创造他们的HD钱包方程之外是不可见的。一旦被创造出来，它们就和“正常”钥匙一样运行了。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="扩展秘钥" style="display: inline;"><a href="#扩展秘钥" class="headerlink" title="扩展秘钥"></a>扩展秘钥</h4><p>正如我们之前看到的，密钥衍生方程可以被用来创造钥匙树上任何层级的子密钥。这只需要三个输入量：一个密钥，一个链码以及想要的子密钥的索引。密钥以及链码这两个重要的部分被结合之后，就叫做extended key。术语“extended key”也被认为是“可扩展的密钥”是因为这种密钥可以用来衍生子密钥。</p><p>扩展密钥可以简单地被储存并且表示为简单的将256位密钥与256位链码所并联的512位序列。有两种扩展密钥。扩展的私钥是私钥以及链码的结合。它可被用来衍生子私钥（子私钥可以衍生子公共密钥）公共钥匙以及链码组成扩展公共钥匙。</p><p>想象一个扩展密钥作为HD钱包中钥匙树结构的一个分支的根。你可以衍生出这个分支的剩下所有部分。扩展私人钥匙可以创建一个完整的分支而扩展公共钥匙只能够创造一个公共钥匙的分支</p><p>扩展密钥通过Base58Check来编码，从而能轻易地在不同的BIP0032-兼容钱包之间导入导出。扩展密钥编码用的Base58Check使用特殊的版本号，这导致在Base58编码字符中，出现前缀“xprv”和“xpub”。这种前缀可以让编码更易被识别。因为扩展密钥是512或者513位，所以它比我们之前所看到的Base58Check-encoded串更长一些。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="公共子钥匙推导" style="display: inline;"><a href="#公共子钥匙推导" class="headerlink" title="公共子钥匙推导"></a>公共子钥匙推导</h4><p>正如之前提到的，分层确定性钱包的一个很有用的特点就是可以不通过私钥而直接从公共母钥匙派生出公共子钥匙的能力。这就给了我们两种去衍生子公共钥匙的方法：或者通过子私钥，再或者就是直接通过母公共钥匙。</p><p>因此，扩展的公共钥匙可以再HD钱包结构的分支中，被用来衍生所有的公钥（且只有公共钥匙）。</p><p>这种快捷方式可以用来创造非常保密的public-key-only配置。在配置中，服务器或者应用程序不管有没有私钥，都可以有扩展公共钥匙的副本。这种配置可以创造出无限数量的公共钥匙以及比特币地址。但是不可以花送到这个地址里的任何比特币。与此同时，在另一种更保险的服务器上，扩展私钥可以衍生出所有的对应的可签署交易以及花钱的私钥。</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig412.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig412.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">扩展母公共钥匙来创造一个子公共钥匙</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="硬化子密钥的衍生" style="display: inline;"><a href="#硬化子密钥的衍生" class="headerlink" title="硬化子密钥的衍生"></a>硬化子密钥的衍生</h4><p>从扩展公共钥匙衍生一个分支公共钥匙的能力是很重要的，但牵扯一些风险。访问扩展公共钥匙并不能得到访问子私人密钥的途径。但是，因为扩展公共钥匙包含有链码，如果子私钥被知道或者被泄漏的话，链码就可以被用来衍生所有的其他子私钥。一个简单地泄露的私钥以及一个母链码，可以暴露所有的子密钥。更糟糕的是，子私钥与母链码可以用来推断母私钥。</p><p>为了应对这种风险，HD钱包使用一种叫做hardened derivation的替代衍生方程。这就“打破”了母公共钥匙以及子链码之间的关系。这个硬化衍生方程使用了母私钥去推到子链码，而不是母公共钥匙。这就在母/子顺序中创造了一道“防火墙”——有链码但并不能够用来推算子链码或者姊妹私钥。强化的衍生方程看起来几乎与一般的衍生的子私钥相同，不同的是是母私钥被用来输入散列方程中而不是母公共钥</p><p>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig413.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig413.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">子密钥的强化衍生；忽略了母公共密钥</figcaption></figure></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="正常衍生和强化衍生的索引号码" style="display: inline;"><a href="#正常衍生和强化衍生的索引号码" class="headerlink" title="正常衍生和强化衍生的索引号码"></a>正常衍生和强化衍生的索引号码</h4><p>用在衍生方程中的索引号码是32位的整数。为了区分密钥是从正常衍生方程中衍生出来还是从强化衍生方程中产出，这个索引号被分为两个范围。索引号在0和 \(2^{31}\) \(2^{31}–1\) (0x0 to 0x7FFFFFFF)之间的是只被用在常规衍生。索引号在\(2^{31}\)和\(2^{32}–1\)(0x80000000 to 0xFFFFFFFF)之间的只被用在强化衍生方程。因此，索引号小于231就意味着子密钥是常规的，而大于或者等于231的子密钥就是强化型的。</p><p>为了让索引号码更容易被阅读和展示，强化子密码的索引号码是从0开始展示的，但是右上角有一个小撇号。第一个常规子密钥因此被表述为0，但是第一个强化子密钥（索引号为0x80000000）就被表示为0’。第二个强化密钥依序有了索引号0x80000001，且被显示为1’，以此类推。当你看到HD钱包索引号i’，这就意味着 \(2^{31}+i\) 。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="HD钱包密钥识别符（路径）" style="display: inline;"><a href="#HD钱包密钥识别符（路径）" class="headerlink" title="HD钱包密钥识别符（路径）"></a>HD钱包密钥识别符（路径）</h4><p>HD钱包中的密钥是用“路径”命名的，且每个级别之间用斜杠（/）字符来表示（见表4-8）。由主私钥衍生出的私钥起始以“m”打头。因此，第一个母密钥生成的子私钥是m/0。第一个公共钥匙是M/0。第一个子密钥的子密钥就是m/0/1，以此类推。</p><p>密钥的“祖先”是从右向左读，直到你达到了衍生出的它的主密钥。举个例子，标识符m/x/y/z描述的是子密钥m/x/y的第z个子密钥。而子密钥m/x/y又是m/x的第y个子密钥。m/x又是m的第x个子密钥</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">HD path</th><th style="text-align:left">密钥描述</th></tr></thead><tbody><tr><td style="text-align:left">m/0</td><td style="text-align:left">从主私钥（m）衍生出的第一个（0）子密钥。</td></tr><tr><td style="text-align:left">m/0/0</td><td style="text-align:left">第一个私人子密钥（m/0）的子密钥。</td></tr><tr><td style="text-align:left">m/0’/0</td><td style="text-align:left">第一个子强化密钥first hardened child（m/0’）的第一个常规子密钥。</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="HD钱包树状结构的导航" style="display: inline;"><a href="#HD钱包树状结构的导航" class="headerlink" title="HD钱包树状结构的导航"></a>HD钱包树状结构的导航</h4><p>HD钱包树状结构提供了极大的灵活性。每一个母扩展密钥有40已个子密钥：20亿个常规子密钥和20亿个强化子密钥。而每个子密钥又会有40亿个子密钥并且以此类推。只要你愿意，这个树结构可以无限类推到无穷代。但是，又由于有了这个灵活性，对无限的树状结构进行导航就变得异常困难。尤其是对于在不同的HD钱包之间进行转移交易，因为内部组织到内部分支以及亚分支的可能性是无穷的。</p><p>两个比特币改进建议（BIPs）提供了这个复杂问的解决办法——通过创建几个HD钱包树的提议标准。BIP0043提出使用第一个强化子索引作为特殊的标识符表示树状结构的“purpose”。基于BIP0043，HD钱包应该使用且只用第一层级的树的分支，而且有索引号码去识别结构并且有命名空间来定义剩余的树的目的地。举个例子，HD钱包只使用分支m/i’/是为了表明那个被索引号“i”定义的特殊为目地。</p><p>在BIP0043标准下，为了延长的那个特殊规范，BIP0044提议了多账户结构作为“purpose”。所有遵循BIP0044的HD钱包依据只使用树的第一个分支的要求而被定义：m/44’/。</p><p>BIP0044指定了包含5个预定义树状层级的结构：</p><pre class="line-numbers language-python g-mb-30"><code class="language-python">m <span class="token operator">/</span> purpose<span class="token string">' / coin_type'</span> <span class="token operator">/</span> account' <span class="token operator">/</span> change <span class="token operator">/</span> address_index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一层的目的地总是被设定为44’。</p><p>第二层的“coin_type”特指密码货币硬币的种类并且允许多元货币HD钱包中的货币在第二个层级下有自己的亚树状结构。目前有三种货币被定义：Bitcoin is m/44’/0’、Bitcoin Testnet is m/44’/1’，以及Litecoin is m/44’/2’。  <a href="https://github.com/satoshilabs/slips/blob/master/slip-0044.md" target="_blank" rel="noopener">更多的币种</a></p><p>树的第三层级是“account”，这可以允许使用者为了会计或者组织目的，而去再细分他们的钱包到独立的逻辑性亚账户。举个例子，一个HD钱包可能包含两个比特币“账户”：m/44’/0’/0’ 和 m/44’/0’/1’。每个账户都是它自己亚树的根。</p><p>第四层级就是“change”。每一个HD钱包有两个亚树，一个是用来接收地址一个是用来创造找零地址。注意无论先前的层级是否使用是否使用强化衍生，这一层级使用的都是常规衍生。这是为了允许这一层级的树可以在可供不安全环境下，输出扩展的公共钥匙。被HD钱包衍生的可用的地址是第四层级的子级，就是第五层级的树的“address_index”。比如，第三个层级的主账户收到比特币支付的地址就是 M/44’/0’/0’/0/2。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">HD 路径</th><th style="text-align:left">主要描述</th></tr></thead><tbody><tr><td style="text-align:left">M/44’/0’/0’/0/2</td><td style="text-align:left">第三个收到公共钥匙的主比特币账户</td></tr><tr><td style="text-align:left">M/44’/0’/3’/1/14</td><td style="text-align:left">第十五改变地址公钥的第四个比特币账户</td></tr><tr><td style="text-align:left">m/44’/2’/0’/0/1</td><td style="text-align:left">为了签署交易的在莱特币主账户的第二个私钥</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="扩展知识-高级密钥和地址" style="display: inline;"><a href="#扩展知识-高级密钥和地址" class="headerlink" title="扩展知识 高级密钥和地址"></a>扩展知识 高级密钥和地址</h2><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="加密私钥（BIP0038）" style="display: inline;"><a href="#加密私钥（BIP0038）" class="headerlink" title="加密私钥（BIP0038）"></a>加密私钥（BIP0038）</h3><p>私钥必须保密。私钥的机密性需求事实情况是，在实践中相当难以实现，因为该需求与同样重要的安全对象可用性相互矛盾。当你需要为了避免私钥丢失而存储备份时，会发现维护私钥私密性是一件相当困难的事情。通过密码加密内有私钥的钱包可能要安全一点，但那个钱包也需要备份。有时，例如用户因为要升级或重装钱包软件，而需要把密钥从一个钱包转移到另一个。私钥备份也可能需要存储在纸张上或者外部存储介质里，比如U盘。但如果一旦备份文件失窃或丢失呢？这些矛盾的安全目标推进了便携、方便、可以被众多不同钱包和比特币客户端理解的加密私钥标准BIP0038的出台。</p><p>BIP0038提出了一个通用标准，使用一个口令加密私钥并使用Base58Check对加密的私钥进行编码，这样加密的私钥就可以安全地保存在备份介质里，安全地在钱包间传输，保持密钥在任何可能被暴露情况下的安全性。这个加密标准使用了AES，这个标准由NIST建立，并广泛应用于商业和军事应用的数据加密。</p><p>BIP0038加密方案是：输入一个比特币私钥，通常使用WIF编码过，base58chek字符串的前缀“5”。此外BIP0038加密方案需要一个长密码作为口令，通常由多个单词或一段复杂的数字字母字符串组成。BIP0038加密方案的结果是一个由base58check编码过的加密私钥，前缀为6P。如果你看到一个6P开头的的密钥，这就意味着该密钥是被加密过，并需要一个口令来转换（解码）该密钥回到可被用在任何钱包WIF格式的私钥（前缀为5）。许多钱包APP现在能够识别BIP0038加密过的私钥，会要求用户提供口令解码并导入密钥。第三方APP，诸如非常好用基于浏览器的Bit Address，可以被用来解码BIP00038的密钥。</p><p>最通常使用BIP0038加密的密钥用例是纸钱包——一张纸张上备份私钥。只要用户选择了强口令，使用BIP0038加密的私钥的纸钱包就无比的安全，这也是一种很棒的比特币离线存储方式（也被称作“冷存储”）。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">私钥（WIF）</th><th style="text-align:left">5J3mBbAH58CpQ3Y5RNJpUKPE62SQ5tfcvU2JpbnkeyhfsYB1Jcn</th></tr></thead><tbody><tr><td style="text-align:left">密码</td><td style="text-align:left">MyTestPassphrase</td></tr><tr><td style="text-align:left">加密私钥（BIP0038）</td><td style="text-align:left">6PRTHL6mWa48xSopbU1cKrVjpKbBZxcLRRCdctLJ3z5yxE87MobKoXdTsJ</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="P2SH-Pay-to-Script-Hash-和多重签名地址" style="display: inline;"><a href="#P2SH-Pay-to-Script-Hash-和多重签名地址" class="headerlink" title="P2SH (Pay-to-Script Hash)和多重签名地址"></a>P2SH (Pay-to-Script Hash)和多重签名地址</h3><p>正如我们所知，传统的比特币地址从数字1开头，来源于公钥，而公钥来源于私钥。虽然任何人都可以将比特币发送到一个1开头的地址，但比特币只能在通过相应的私钥签名和公钥哈希值后才能消费。</p><p>以数字3开头的比特币地址是P2SH地址，有时被错误的称谓多重签名或多重签名地址。他们指定比特币交易中受益人作为哈希的脚本，而不是公钥的所有者。这个特性在2012年1月由BIP0016引进，目前因为BIP0016提供了增加功能到地址本身的机会而被广泛的采纳。不同于P2PKH交易发送资金到传统1开头的比特币地址，资金被发送到3开头的地址时，需要的不仅仅是一个公钥的哈希值，同时也需要一个私钥签名作为所有者证明。在创建地址的时候，这些要求会被定义在脚本中，所有对地址的输入都会被这些要求阻隔。</p><p>一个P2SH地址从事务脚本中创建，它定义谁能消耗这个事务输出。编码一个P2SH地址涉及使用一个在创建比特币地址用到过的双重哈希函数，并且只能应用在脚本而不是公钥：</p><pre class="line-numbers language-java g-mb-30"><code class="language-java">script hash <span class="token operator">=</span> <span class="token function">RIPEMD160</span><span class="token punctuation">(</span><span class="token function">SHA256</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本哈希的结果是由Base58Check编码前缀为5的版本、编码后得到开头为3的编码地址。一个P2SH地址例子是32M8ednmuyZ2zVbes4puqe44NZumgG92sM。</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>P2SH 不一定是多重签名的交易。虽然P2SH地址通常都是代表多重签名，但也可能是其他类型的交易脚本。</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="多重签名地址和P2SH" style="display: inline;"><a href="#多重签名地址和P2SH" class="headerlink" title="多重签名地址和P2SH"></a>多重签名地址和P2SH</h4><p>目前，P2SH函数最常见的实现是用于多重签名地址脚本。顾名思义，底层脚本需要多个签名来证明所有权，此后才能消费资金。设计比特币多重签名特性是需要从总共N个密钥中需要M个签名（也被称为“阈值”），被称为M-N多签名，其中M是等于或小于N。例如，第一章中提到的咖啡店主鲍勃使用多重签名地址需要1-2签名，一个是属于他的密钥和一个属于他同伴的密钥，以确保其中一方可以签署度过一个事务锁定输出到这个地址。这类似于传统的银行中的一个“联合账户”，其中任何一方配偶可以凭借单一签名消费。或Gopesh， Bob雇佣的网页设计师创立一个网站，可能为他的业务需要一个2-3的多签名地址，确保没有资金会被花费除非至少两个业务合作伙伴签署这笔交易。</p><p>我们将会在第五章节探索如何使用P2SH地址创建事务用来消费资金。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="比特币靓号地址" style="display: inline;"><a href="#比特币靓号地址" class="headerlink" title="比特币靓号地址"></a>比特币靓号地址</h3><p>靓号地址包含了可读信息的有效比特币地址。例如，1LoveBPzzD72PUXLzCkYAtGFYmK5vYNR33就是包含了Base-58字母love的。靓号地址需要生成并通过数十亿的候选私钥测试，直到一个私钥能生成具有所需图案的比特币地址。虽然有一些优化过的靓号生成算法，该方法必须涉及随机上选择一个私钥，生成公钥，再生成比特币地址，并检查是否与所要的靓号图案相匹配，重复数十亿次，直到找到一个匹配。</p><p>一旦找到一个匹配所要图案的靓号地址，来自这个靓号地址的私钥可以和其他地址相同的方式被拥有者消费比特币。靓号地址不比其他地址具有更多安全性。它们依靠和其他地址相同的ECC和SHA。你无法比任何别的地址更容易的获得一个靓号图案开头的私钥。</p><p>例如：我们介绍了Eugenia，一位在菲律宾工作的儿童慈善总监。我们假设Eugenia组织了一场比特币募捐活动，并希望使用靓号比特币地址来宣布这个募捐活动。Eugenia将会创造一个以1Kids开头的靓号地址来促进儿童慈善募捐的活动。让我们看看这个靓号地址如何被创建，这个靓号地址对Eugenia慈善募捐的安全性又意味着什么。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="生成靓号地址" style="display: inline;"><a href="#生成靓号地址" class="headerlink" title="生成靓号地址"></a>生成靓号地址</h4><p>我们必须认识到使用来自Base58字母表中简单符号来代表比特币地址是非常重要的。搜索“1kids”开头的图案我们会发现从1Kids11111111111111111111111111111到1Kidszzzzzzzzzzzzzzzzzzzzzzzzzzzzz的地址。这些以“1kid”开头的地址范围中大约有58的29次方地址</p><p>我们把“1Kids”这个前缀当作数字，我们可以看看比特币地址中这个前缀出现的频率。如果是一台普通性能的桌面电脑，没有任何特殊的硬件，可以每秒发现大约10万个密钥。</p>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th style="text-align:left">长度</th><th style="text-align:left">地址前缀</th><th>概率</th><th>平均生成时间</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">1K</td><td>\(\dfrac {1}{58}\)</td><td>&lt; 1毫秒</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">1Ki</td><td>\(\dfrac {1}{3364}\)</td><td>50毫秒</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">1Kid</td><td>\(\dfrac {1}{195\times 10^{3}}\)</td><td>&lt; 2秒</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">1Kids</td><td>\(\dfrac {1}{11\times 10^{6}}\)</td><td>1分钟</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">1KidsC</td><td>\(\dfrac {1}{656\times 10^{6}}\)</td><td>1小时</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">1KidsCh</td><td>\(\dfrac {1}{38\times 10^{9}}\)</td><td>2天</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">1KidsCha</td><td>\(\dfrac {1}{2.2\times 10^{12}}\)</td><td>3–4 月</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">1KidsChar</td><td>\(\dfrac {1}{128\times 10^{12}}\)</td><td>13–18年</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">1KidsChari</td><td>\(\dfrac {1}{7\times 10^{15}}\)</td><td>800年</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">1KidsCharit</td><td>\(\dfrac {1}{400\times 10^{15}}\)</td><td>46,000年</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">1KidsCharity</td><td>\(\dfrac {1}{23\times 10^{18}}\)</td><td>250万年</td></tr></tbody>                    </table>                </div>            </div><p>正如你所见，Eugenia将不会很快地创建出以“1KidsCharity”开头的靓号地址，即使她有数千台的电脑同时进行运算。每增加一个字符就会增加58倍的计算难度。超过七个字符的搜索模式通常需要专用的硬件才能被找出，譬如用户定制的具有多图形处理单元（GPU）的桌面级设备。那些通常是无法继续在比特币挖矿中盈利的钻机，被重新赋予了寻找靓号地址的任务。用GPU系统搜索靓号的速度比用通用CPU要快很多个量级。</p><p>另一种寻找靓号地址的方法是将工作外包给一个矿池里的靓号矿工们，如靓号矿池中的矿池。一个矿池是一种允许那些GPU硬件通过为他人寻找靓号地址来获得比特币的服务。对小额的账单，Eugenia可以外包搜索模式为7个字符靓号地址寻找工作，在几个小时内就可以得到结果，而不必用一个CPU搜索上几个月才得到结果。</p><p>生成一个靓号地址是一项通过蛮力的过程：尝试一个随机密钥，检查结果地址是否和所需的图案相匹配，重复这个过程直到成功找到为止</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H5   </span><h5 id="靓号挖掘程序" style="display: inline;"><a href="#靓号挖掘程序" class="headerlink" title="靓号挖掘程序"></a>靓号挖掘程序</h5><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bitcoin/bitcoin.hpp></span></span><span class="token comment" spellcheck="true">// The string we are searching for</span><span class="token keyword">const</span> std<span class="token operator">::</span>string search <span class="token operator">=</span> <span class="token string">"1kid"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Generate a random secret key. A random 32 bytes.</span>bc<span class="token operator">::</span>ec_secret <span class="token function">random_secret</span><span class="token punctuation">(</span>std<span class="token operator">::</span>default_random_engine<span class="token operator">&amp;</span> engine<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Extract the Bitcoin address from an EC secret.</span>std<span class="token operator">::</span>string <span class="token function">bitcoin_address</span><span class="token punctuation">(</span><span class="token keyword">const</span> bc<span class="token operator">::</span>ec_secret<span class="token operator">&amp;</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Case insensitive comparison with the search string.</span><span class="token keyword">bool</span> <span class="token function">match_found</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>random_device random<span class="token punctuation">;</span>    std<span class="token operator">::</span>default_random_engine <span class="token function">engine</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Loop continuously...</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Generate a random secret.</span>        bc<span class="token operator">::</span>ec_secret secret <span class="token operator">=</span> <span class="token function">random_secret</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get the address.</span>        std<span class="token operator">::</span>string address <span class="token operator">=</span> <span class="token function">bitcoin_address</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Does it match our search string? (1kid)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match_found</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Success!</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found vanity address! "</span> <span class="token operator">&lt;&lt;</span> address <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Secret: "</span> <span class="token operator">&lt;&lt;</span> bc<span class="token operator">::</span><span class="token function">encode_hex</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Should never reach here!</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bc<span class="token operator">::</span>ec_secret <span class="token function">random_secret</span><span class="token punctuation">(</span>std<span class="token operator">::</span>default_random_engine<span class="token operator">&amp;</span> engine<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Create new secret...</span>    bc<span class="token operator">::</span>ec_secret secret<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Iterate through every byte setting a random value... for (uint8_t&amp; byte: secret)</span>        byte <span class="token operator">=</span> <span class="token function">engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> std<span class="token operator">::</span>numeric_limits<span class="token operator">&lt;</span>uint8_t<span class="token operator">></span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return result.</span>    <span class="token keyword">return</span> secret<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">bitcoin_address</span><span class="token punctuation">(</span><span class="token keyword">const</span> bc<span class="token operator">::</span>ec_secret<span class="token operator">&amp;</span> secret<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Convert secret to pubkey...</span>    bc<span class="token operator">::</span>ec_point pubkey <span class="token operator">=</span> bc<span class="token operator">::</span><span class="token function">secret_to_public_key</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Finally create address.</span>    bc<span class="token operator">::</span>payment_address payaddr<span class="token punctuation">;</span> bc<span class="token operator">::</span><span class="token function">set_public_key</span><span class="token punctuation">(</span>payaddr<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return encoded form.</span>    <span class="token keyword">return</span> payaddr<span class="token punctuation">.</span><span class="token function">encoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">match_found</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> address<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> addr_it <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Loop through the search string comparing it to the lower case</span>    <span class="token comment" spellcheck="true">// character of the supplied address.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> search<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">,</span> <span class="token operator">++</span>addr_it<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">!=</span> std<span class="token operator">::</span><span class="token function">tolower</span><span class="token punctuation">(</span><span class="token operator">*</span>addr_it<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Reached end of search string, so address matches.</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例程序需要用C编译器链接libbitcoin库（此库需要提前装入该系统）进行编译。直接执行vanity-miner的可执行文件,它就会尝试碰撞以“1kid”开头的比特币地址。</p><pre class="line-numbers language-shell g-mb-30"><code class="language-shell">$ # Compile the code with g++$ g++ -o vanity-miner vanity-miner.cpp $(pkg-config --cflags --libs libbitcoin) $ # Run the example$ ./vanity-minerFound vanity address! 1KiDzkG4MxmovZryZRj8tK81oQRhbZ46YTSecret: 57cc268a05f83a23ac9d930bc8565bac4e277055f4794cbd1a39e5e71c038f3f$ # Run it again for a different result$ ./vanity-minerFound vanity address! 1Kidxr3wsmMzzouwXibKfwTYs5Pau8TUFnSecret: 7f65bbbbe6d8caae74a0c6a0d2d7b5c6663d71b60337299a1a2cf34c04b2a623# Use "time" to see how long it takes to find a result$ time ./vanity-minerFound vanity address! 1KidPWhKgGRQWD5PP5TAnGfDyfWp5yceXMSecret: 2a802e7a53d8aa237cd059377b616d2bfcfa4b0140bc85fa008f2d3d4b225349real    0m8.868suser    0m8.828ssys     0m0.035s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如我们运行Unix命令time所测出的运行时间所示，示例代码要花几秒钟来找出匹配“kid”三个字符模板的结果。读者们可以在源代码中改变search这一搜索模板，看一看如果是四个字符或者五个字符的搜索模板需要花多久时间！</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="靓号地址安全性" style="display: inline;"><a href="#靓号地址安全性" class="headerlink" title="靓号地址安全性"></a>靓号地址安全性</h4><p>靓号地址既可以增加、也可以削弱安全措施，它们着实是一把双刃剑。用于改善安全性时，一个独特的地址使对手难以使用他们自己的地址替代你的地址，以欺骗你的顾客支付他们的账单。不幸的是，靓号地址也可能使得任何人都能创建一个类似于随机地址的地址，甚至另一个靓号地址，从而欺骗你的客户。</p><p>Eugenia可以让捐款人捐款到她宣布的一个随机生成地址（例如：1J7mdg5rbQyUHENYdx39WVWK7fsLpEoXZy）。或者她可以生成一个以“1Kids”开头的靓号地址以显得更独特。</p><p>在这两种情况下，使用单一固定地址（而不是每比捐款用一个独立的动态地址）的风险之一是小偷有可能会黑进你的网站，用他自己的网址取代你的网址，从而将捐赠转移给自己。如果你在不同的地方公布了你的捐款地址，你的用户可以在付款之前直观地检查以确保这个地址跟在你的网站、邮件和传单上看到的地址是同一个。在随机地址1j7mdg5rbqyuhenydx39wvwk7fslpeoxzy的情况下，普通用户可能会只检查头几个字符“1j7mdg”，就认为地址匹配。使用靓号地址生成器，那些想通过替换类似地址来盗窃的人可以快速生成与前几个字符相匹配的地址</p><p>那靓号地址会不会增加安全性？如果Eugenia生成1Kids33q44erFfpeXrmDSz7zEqG2FesZEN的靓号地址，用户可能看到靓号图案的字母和一些字符在上面，例如在地址部分中注明了1Kids33。这样就会迫使攻击者生成至少6个字母相匹配的的靓号地址（比之前多2个字符），就要花费比Eugenia多3364倍的靓号图案。本质上，Eugenia付出的努力（或者靓号池付出的）迫使攻击者不得不生成更长的靓号图案。如果Eugenia花钱请矿池生成8个字符的靓号地址，攻击者将会被逼迫到10字符的境地，那将是个人电脑，甚至昂贵自定义靓号挖掘机或靓号池也无法生成。对Eugenia来说可承担的起支出，对攻击者来说则变成了无法承担支出，特别是如果欺诈的回报不足以支付生成靓号地址所需的费用。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="纸钱包" style="display: inline;"><a href="#纸钱包" class="headerlink" title="纸钱包"></a>纸钱包</h3><p>纸钱包是打印在纸张上的比特币私钥。有时纸钱包为了方便起见也包括对应的比特币地址，但这并不是必要的，因为地址可以从私钥中导出。纸钱包是一个非常有效的建立备份或者线下存储比特币（即冷钱包）的方式。作为备份机制，一个纸钱包可以提供安全性，以防在电脑硬盘损坏、失窃或意外删除的情况下造成密钥的的丢失。作为一个冷存储的机制，如果纸钱包密钥在线下生成并永久不在电脑系统中存储，他们在应对黑客攻击，键盘记录器，或其他在线电脑欺骗更有安全性。</p><p>纸钱包有许多不同的形状，大小，和外观设计，但非常基本的原则是一个密钥和一个地址打印在纸张上。</p>    <p hidden id="CurrentFileName">BIP32-39-43-44.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;私钥-公钥-比特币地址&quot;&gt;&lt;a href=&quot;#私钥-公钥-比特币地址&quot; class=&quot;headerlink&quot; title=&quot;私钥 公钥 比特币地址&quot;&gt;&lt;/a&gt;私钥 公钥 比特币地址&lt;/h2&gt;&lt;p&gt;一个比特币钱包中包含一系列的密钥对，每个密钥对包括一个私钥和一个公钥。私钥（k）是一个数字，通常是随机选出的。&lt;br&gt;有了私钥，我们就可以使用椭圆曲线乘法这个单向加密函数产生一个公钥（K）。&lt;br&gt;有了公钥（K），我们就可以使用一个单向加密哈希函数生成比特币地址（A）。&lt;br&gt;&lt;img src=&quot;/publicFiles/images/bitcoin hierarchical deterministic wallets/Fig401.png&quot; alt=&quot;&quot; title=&quot;公私钥单向关系示意图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://blog.msiter.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="HD Wallet" scheme="http://blog.msiter.com/tags/HD-Wallet/"/>
    
      <category term="BIP32-44" scheme="http://blog.msiter.com/tags/BIP32-44/"/>
    
      <category term="Block chain" scheme="http://blog.msiter.com/tags/Block-chain/"/>
    
  </entry>
  
  <entry>
    <title>球在矩形内弹射的题目思考</title>
    <link href="http://blog.msiter.com/gyd,ts,ymstdsk-20180306.html"/>
    <id>http://blog.msiter.com/gyd,ts,ymstdsk-20180306.html</id>
    <published>2018-03-06T11:33:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="题目" style="display: inline;"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/关于弹射面试题的思考/弹射.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/关于弹射面试题的思考/弹射.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">面试题 示意图</figcaption></figure><br></p><p>如图所示，在证书坐标系内有一个矩形（高M，宽N。M，N是随机整数值，大小不确定），现在从矩形内原点（0,0）以45° ，向上发射一个点（点的大小忽略），词典在矩形内做直线运动，碰到矩形边后完全弹性碰撞反弹，现假设此点在矩形内一直重复做碰撞运动，（即碰撞次数无限），请设计一个程序打印出这个点与矩形每次碰撞的坐标，精确到整数。PS：可使用伪代码或者任意编程语言实现。</p><a id="more"></a><p>今天上班的时候，同时给我发了一下这个题目，一开始觉的难点在于数学计算上，慢慢的发现并不是。接下来我们就来看看这道题的解题思路把。</p><p>以下代码，均为 Swift4 版本。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="解题思路" style="display: inline;"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>其实这个问题看着感觉无从下手，其实我们一步步地分析起来还是很简单的</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="设置点的类型" style="display: inline;"><a href="#设置点的类型" class="headerlink" title="设置点的类型"></a>设置点的类型</h3><p>首先我们来假设这个<code>Point</code>为一种类型，所以有以下代码,分别有X和Y点来假设球的坐标。</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token comment" spellcheck="true">/// 弹射的每一个点的类型抽象</span><span class="token keyword">struct</span> <span class="token builtin">Point</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> x<span class="token punctuation">:</span><span class="token builtin">Int</span>    <span class="token keyword">let</span> y<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="思考点的弹射方向" style="display: inline;"><a href="#思考点的弹射方向" class="headerlink" title="思考点的弹射方向"></a>思考点的弹射方向</h3><p>接下来我们来思考球都会有哪些行为。球可以向上弹射，也可以向下，也可以向右，也可以向左，总结来看就是球可以做四种方向的运动。分别为<br>上左，上右，下左，下右。由此设计以下枚举</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token comment" spellcheck="true">/// 球 弹射的方向</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// - topl: 上左</span><span class="token comment" spellcheck="true">/// - topr: 上右</span><span class="token comment" spellcheck="true">/// - bottoml: 下左</span><span class="token comment" spellcheck="true">/// - bottomr: 下右</span><span class="token keyword">enum</span> <span class="token builtin">Dir</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> topl    <span class="token keyword">case</span> topr    <span class="token keyword">case</span> bottoml    <span class="token keyword">case</span> bottomr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="思考球碰壁的几种情况" style="display: inline;"><a href="#思考球碰壁的几种情况" class="headerlink" title="思考球碰壁的几种情况"></a>思考球碰壁的几种情况</h3><p>这个时候，我们也会注意到，球碰壁的时候会有几种情况呢？ 其实就是球的X，因为X才是限制球的位置的根本，所以X的情况:</p><ol><li>正常的情况 0&gt;X&gt;N</li><li>非正常的晴空 X<0 以及="" x="">N</0></li><li>非常巧合的状况 X=0 以及 X=N</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="根据方向来得出点以及情况" style="display: inline;"><a href="#根据方向来得出点以及情况" class="headerlink" title="根据方向来得出点以及情况"></a>根据方向来得出点以及情况</h2><p>我们接下来，以第一次弹射（TopRight方向）来进行该题的实际解体。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="正常情况" style="display: inline;"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h3><p>如图所示</p><p><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/关于弹射面试题的思考/正常情况.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/关于弹射面试题的思考/正常情况.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">正常情况 示意图</figcaption></figure><br></p><p>在这种情况下，下一个点的记录为 <code>(x+n,y+m)</code>，并且我们可以预测到他的以下次碰撞的角度是 下右</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="超出范围的情况" style="display: inline;"><a href="#超出范围的情况" class="headerlink" title="超出范围的情况"></a>超出范围的情况</h3><p><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/关于弹射面试题的思考/超出范围的情况.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/关于弹射面试题的思考/超出范围的情况.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">超出范围的情况 示意图</figcaption></figure><br></p><p>我们根据图可以看到，我们想要的点在 <code>(n,y+(n-x))</code>。我们可以预测下一次发射角度为 上左</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="正好撞在角上" style="display: inline;"><a href="#正好撞在角上" class="headerlink" title="正好撞在角上"></a>正好撞在角上</h3><p><br>           <figure class="mb-4 text-center">              <a class="js-fancybox-thumbs" href="/publicFiles/images/关于弹射面试题的思考/撞在角上.png" title="Lightbox Gallery" data-fancybox-gallery="lightbox-gallery-2" data-fancybox-speed="500" data-fancybox-slide-speed="1000">                <br><img class="img-fluid g-brd-around g-brd-gray-light-v4 g-line-height-2" src="/publicFiles/images/关于弹射面试题的思考/撞在角上.png" alt="Image Description">              </a><figcaption class="figure-caption g-font-size-12 g-color-gray-dark-v4 g-mt-5 text-center">撞在角上 示意图</figcaption></figure><br></p><p>我们根据图中可以看出，下一次的点在 <code>(n,m)</code> 。下一次撞击方向为 下左</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="其他三种角度" style="display: inline;"><a href="#其他三种角度" class="headerlink" title="其他三种角度"></a>其他三种角度</h3><p>其他三种角度，这里就不一一赘述了，总是利用这个方法我们可以得以下4个方法</p><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Point</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 上右方向发射</span>    <span class="token keyword">func</span> <span class="token function">topr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">+</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">+</span> m        <span class="token keyword">if</span> x <span class="token operator">></span> n <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> n<span class="token punctuation">,</span> y<span class="token punctuation">:</span> n<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> n<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 上左方向发射</span>    <span class="token keyword">func</span> <span class="token function">topl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 下左方向发射</span>    <span class="token keyword">func</span> <span class="token function">bottoml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">-</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">-</span> m        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 下右方向发射</span>    <span class="token keyword">func</span> <span class="token function">bottomr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">+</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">-</span> m        <span class="token keyword">if</span> x <span class="token operator">></span> n <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> n<span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> n<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="完整例子" style="display: inline;"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h2><pre class="line-numbers language-swift g-mb-30"><code class="language-swift"><span class="token comment" spellcheck="true">//: Playground - noun: a place where people can play</span><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token comment" spellcheck="true">/// X - Y 的极限数值</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">/// 弹射次数</span><span class="token keyword">var</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">/// 弹射的每一个点的类型抽象</span><span class="token keyword">struct</span> <span class="token builtin">Point</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> x<span class="token punctuation">:</span><span class="token builtin">Int</span>    <span class="token keyword">let</span> y<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Point</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 上右方向发射</span>    <span class="token keyword">func</span> <span class="token function">topr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">+</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">+</span> m        <span class="token keyword">if</span> x <span class="token operator">></span> n <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> n<span class="token punctuation">,</span> y<span class="token punctuation">:</span> n<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> n<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 上左方向发射</span>    <span class="token keyword">func</span> <span class="token function">topl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 下左方向发射</span>    <span class="token keyword">func</span> <span class="token function">bottoml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">-</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">-</span> m        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottomr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 将此 Point 按照 下右方向发射</span>    <span class="token keyword">func</span> <span class="token function">bottomr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">+</span> m        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">-</span> m        <span class="token keyword">if</span> x <span class="token operator">></span> n <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> n<span class="token punctuation">,</span> y<span class="token punctuation">:</span> m<span class="token operator">-</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>bottoml<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> n<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topr<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>topl<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 球 弹射的方向</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// - topl: 上左</span><span class="token comment" spellcheck="true">/// - topr: 上右</span><span class="token comment" spellcheck="true">/// - bottoml: 下左</span><span class="token comment" spellcheck="true">/// - bottomr: 下右</span><span class="token keyword">enum</span> <span class="token builtin">Dir</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> topl    <span class="token keyword">case</span> topr    <span class="token keyword">case</span> bottoml    <span class="token keyword">case</span> bottomr<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span><span class="token builtin">Dir</span><span class="token punctuation">,</span>point<span class="token punctuation">:</span><span class="token builtin">Point</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> res<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">,</span><span class="token builtin">Dir</span><span class="token punctuation">)</span><span class="token operator">!</span>    <span class="token keyword">switch</span> d <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>topr<span class="token punctuation">:</span> res <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">topr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>topl<span class="token punctuation">:</span> res <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">topl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>bottoml<span class="token punctuation">:</span> res <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">bottoml</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>bottomr<span class="token punctuation">:</span> res <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">bottomr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token builtin">count</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token builtin">count</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x:"</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token string">",y:"</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> res<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> point<span class="token punctuation">:</span> res<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token punctuation">.</span>topl<span class="token punctuation">,</span> point<span class="token punctuation">:</span> point<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些就是全部的代码，包含了，次数的限制，否则无限递归，会陷入死循环。</p><p>运行上方代码结果为</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">x: 0 ,y: 0x: 10 ,y: 10x: 20 ,y: 0x: 24 ,y: 4x: 18 ,y: 10x: 8 ,y: 0x: 0 ,y: 8x: 10 ,y: 18x: 20 ,y: 8x: 24 ,y: 4</code></pre><p>结果我没有特别的演算过，主要是还是这个思路。如果有什么问题，告诉我，我会及时修改。</p>    <p hidden id="CurrentFileName">关于弹射面试题的思考.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;img src=&quot;/publicFiles/images/关于弹射面试题的思考/弹射.png&quot; alt=&quot;&quot; title=&quot;面试题 示意图&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在证书坐标系内有一个矩形（高M，宽N。M，N是随机整数值，大小不确定），现在从矩形内原点（0,0）以45° ，向上发射一个点（点的大小忽略），词典在矩形内做直线运动，碰到矩形边后完全弹性碰撞反弹，现假设此点在矩形内一直重复做碰撞运动，（即碰撞次数无限），请设计一个程序打印出这个点与矩形每次碰撞的坐标，精确到整数。PS：可使用伪代码或者任意编程语言实现。&lt;/p&gt;
    
    </summary>
    
      <category term="面试题目" scheme="http://blog.msiter.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    
    
      <category term="面试题目" scheme="http://blog.msiter.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    
      <category term="递归" scheme="http://blog.msiter.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>hexo 增加目录</title>
    <link href="http://blog.msiter.com/hexo%20zjml-20180301.html"/>
    <id>http://blog.msiter.com/hexo zjml-20180301.html</id>
    <published>2018-03-01T22:41:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>一直都想给自己的也看增加一个目录，默认的hexo是有默认的目录登记的</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="官方示例-toc" style="display: inline;"><a href="#官方示例-toc" class="headerlink" title="官方示例 - toc"></a>官方示例 - toc</h2><p>解析内容中的标题标签 (h1~h6) 并插入目录。</p><p>Hexo博客系统的核心支持生成目录（Table of Contents）,生成目录之后，由于没有配置的时候，如果文章目录结构很大的话会出现问题。所以我希望增加一个滑动的时候，展开和隐藏目录结构的方法。这样也会显的非常酷炫=</p><p>接下来的代码多半都是在 NEXT HEXO THEME中获得的，在这里非常感谢作者，毕竟我第一个博客主题就是用的NEXT，只是又一次作者的某个版本修改的非常多，导致我的博客挂掉了… 我就决定要自己写一个模版，至少不要因为主题升级版本博客死掉了。</p><a id="more"></a><pre class="line-numbers language-ejs g-mb-30"><code class="language-ejs"><%- toc(str,="" [options])="" %=""><span aria-hidden="true" class="line-numbers-rows"><span></span></span></%-></code></pre>             <div class="card g-brd-bluegray rounded-0 g-mb-30">                <strong class="card-header g-bg-linkedin g-brd-transparent g-color-white g-font-size-13 rounded-0 mb-0"><i class="fa fa-table g-mr-5"></i>我就一展示数据的表格 </strong>                <div class="table-responsive">                    <table class="table table-striped u-table--v1 mb-0"><thead><tr><th>参数</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">Class 名称</td><td style="text-align:center">toc</td></tr><tr><td>list_number</td><td style="text-align:center">显示编号</td><td style="text-align:center">true</td></tr></tbody>                    </table>                </div>            </div><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="示例" style="display: inline;"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-ejs g-mb-30"><code class="language-ejs"><%- toc(page.content)="" %=""><span aria-hidden="true" class="line-numbers-rows"><span></span></span></%-></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="自定义-自己的目录结构" style="display: inline;"><a href="#自定义-自己的目录结构" class="headerlink" title="自定义 自己的目录结构"></a>自定义 自己的目录结构</h2><p>接下来我们会一步步的完成咱们的目录结构以及动画</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="生成目录" style="display: inline;"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h3><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">  &lt;div class=&quot;g-mb-40&quot;&gt;    &lt;div class=&quot;g-mb-40 post-toc&quot;&gt;      &lt;div class=&quot;u-heading-v3-1 g-mb-30&quot;&gt;        &lt;h2 class=&quot;h5 u-heading-v3__title g-color-gray-dark-v1 text-uppercase g-brd-primary&quot;&gt;目录&lt;/h2&gt;      &lt;/div&gt;      &lt;%- toc(page.content,{&quot;class&quot;:&quot;post-nav&quot;})%&gt;    &lt;/div&gt;  &lt;/div&gt;</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="增加CSS" style="display: inline;"><a href="#增加CSS" class="headerlink" title="增加CSS"></a>增加CSS</h3><pre class="line-numbers language-css g-mb-30"><code class="language-css"><span class="token selector">&lt;style>  <span class="token class">.post-toc</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> ol </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> ol>ol </span><span class="token punctuation">{</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> ol a </span><span class="token punctuation">{</span>    <span class="token property">transition-duration</span><span class="token punctuation">:</span> <span class="token number">0.2</span>s<span class="token punctuation">;</span>    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span>    <span class="token property">transition-delay</span><span class="token punctuation">:</span> <span class="token number">0</span>s<span class="token punctuation">;</span>    <span class="token property">transition-property</span><span class="token punctuation">:</span> all<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#555</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> ol a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4f72c1</span><span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.8</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.post-nav-child</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active</span>><span class="token class">.post-nav-child</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active-current</span>><span class="token class">.post-nav-child</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active-current</span>><span class="token class">.post-nav-child</span>><span class="token class">.post-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active</span>>a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#6281c8</span><span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#87daff</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active-current</span>>a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#6281c8</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.post-toc</span> <span class="token class">.post-nav</span> <span class="token class">.active-current</span>>a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#87daff</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="增加js方法实现" style="display: inline;"><a href="#增加js方法实现" class="headerlink" title="增加js方法实现"></a>增加js方法实现</h3><pre class="line-numbers language-js g-mb-30"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">function</span> <span class="token function">escapeSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> selector<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">!</span>"$<span class="token operator">%</span><span class="token operator">&amp;</span><span class="token string">'()*+,.\/:;&lt;=>?@[\\\]^`{|}~]/g, '</span>\\$<span class="token operator">&amp;</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">+</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SCROLLSPY CLASS DEFINITION</span>    <span class="token comment" spellcheck="true">// ==========================</span>    <span class="token keyword">function</span> <span class="token function">ScrollSpy</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ScrollSpy<span class="token punctuation">.</span>DEFAULTS<span class="token punctuation">,</span> options<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>target <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' .post-nav li > a'</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>offsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>activeTarget <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>scrollHeight <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scroll.bs.scrollspy'</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>process<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>VERSION <span class="token operator">=</span> <span class="token string">'3.3.2'</span>    ScrollSpy<span class="token punctuation">.</span>DEFAULTS <span class="token operator">=</span> <span class="token punctuation">{</span>      offset<span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getScrollHeight <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollHeight <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>refresh <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">var</span> offsetMethod <span class="token operator">=</span> <span class="token string">'offset'</span>      <span class="token keyword">var</span> offsetBase <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>offsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>scrollHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScrollHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$<span class="token punctuation">.</span><span class="token function">isWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        offsetMethod <span class="token operator">=</span> <span class="token string">'position'</span>        offsetBase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$body        <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> $el <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>          <span class="token keyword">var</span> href <span class="token operator">=</span> $el<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">)</span> <span class="token operator">||</span> $el<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>          <span class="token keyword">var</span> $href <span class="token operator">=</span> <span class="token regex">/^#./</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token function">escapeSelector</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Need to escape selector.</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>$href <span class="token operator">&amp;&amp;</span>            $href<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>            $href<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">':visible'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>              <span class="token punctuation">[</span>$href<span class="token punctuation">[</span>offsetMethod<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> offsetBase<span class="token punctuation">,</span> href<span class="token punctuation">]</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span>offsets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          that<span class="token punctuation">.</span>targets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>process <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>offset      <span class="token keyword">var</span> scrollHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScrollHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> maxScroll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>offset <span class="token operator">+</span> scrollHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scrollElement<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> offsets <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsets      <span class="token keyword">var</span> targets <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targets      <span class="token keyword">var</span> activeTarget <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeTarget      <span class="token keyword">var</span> i      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollHeight <span class="token operator">!=</span> scrollHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">>=</span> maxScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> activeTarget <span class="token operator">!=</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> targets<span class="token punctuation">[</span>targets<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>activeTarget <span class="token operator">&amp;&amp;</span> scrollTop <span class="token operator">&lt;</span> offsets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'clear.bs.scrollspy'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Add a custom event.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activeTarget <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> offsets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        activeTarget <span class="token operator">!=</span> targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>          scrollTop <span class="token operator">>=</span> offsets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token operator">!</span>offsets<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> scrollTop <span class="token operator">&lt;=</span> offsets<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>activate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>activeTarget <span class="token operator">=</span> target      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> selector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">+</span>        <span class="token string">'[data-target="'</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">'"],'</span> <span class="token operator">+</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">+</span> <span class="token string">'[href="'</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">'"]'</span>      <span class="token keyword">var</span> active <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>active<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">'.dropdown-menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        active <span class="token operator">=</span> active          <span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'li.dropdown'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      active<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'activate.bs.scrollspy'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ScrollSpy<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">'.active'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// SCROLLSPY PLUGIN DEFINITION</span>    <span class="token comment" spellcheck="true">// ===========================</span>    <span class="token keyword">function</span> <span class="token function">Plugin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'bs.scrollspy'</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token keyword">typeof</span> option <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> option        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'bs.scrollspy'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollSpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> option <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> old <span class="token operator">=</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>scrollspy    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>scrollspy <span class="token operator">=</span> Plugin    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>scrollspy<span class="token punctuation">.</span>Constructor <span class="token operator">=</span> ScrollSpy    <span class="token comment" spellcheck="true">// SCROLLSPY NO CONFLICT</span>    <span class="token comment" spellcheck="true">// =====================</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>scrollspy<span class="token punctuation">.</span>noConflict <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>scrollspy <span class="token operator">=</span> old      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// SCROLLSPY DATA-API</span>    <span class="token comment" spellcheck="true">// ==================</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'load.bs.scrollspy.data-api'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[data-spy="scroll"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> $spy <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        Plugin<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>$spy<span class="token punctuation">,</span> $spy<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="完成" style="display: inline;"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这个时候我们已经完成了目录，多层目录，滑动时候就可以看到展开和合并效果了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="需要注意的问题" style="display: inline;"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><p>我们的目录结构，必须是大小嵌套的</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">这种方式是正确的#########这种发式就是错误的########</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="没有完成的问题" style="display: inline;"><a href="#没有完成的问题" class="headerlink" title="没有完成的问题"></a>没有完成的问题</h3><p>如果某个层级的目录过多，会导致目录视图超出视图范围，这个问题，暂时还没考虑好如何解决，只能以后写文章的时候注意不要过多的某个层级的目录</p><p>在移动模式的状态下，其实是不用展示的，但是现在因为技术能力问题，隐藏不了…先这样吧</p>    <p hidden id="CurrentFileName">hexo 增加目录.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直都想给自己的也看增加一个目录，默认的hexo是有默认的目录登记的&lt;/p&gt;
&lt;h2 id=&quot;官方示例-toc&quot;&gt;&lt;a href=&quot;#官方示例-toc&quot; class=&quot;headerlink&quot; title=&quot;官方示例 - toc&quot;&gt;&lt;/a&gt;官方示例 - toc&lt;/h2&gt;&lt;p&gt;解析内容中的标题标签 (h1~h6) 并插入目录。&lt;/p&gt;
&lt;p&gt;Hexo博客系统的核心支持生成目录（Table of Contents）,生成目录之后，由于没有配置的时候，如果文章目录结构很大的话会出现问题。所以我希望增加一个滑动的时候，展开和隐藏目录结构的方法。这样也会显的非常酷炫=&lt;/p&gt;
&lt;p&gt;接下来的代码多半都是在 NEXT HEXO THEME中获得的，在这里非常感谢作者，毕竟我第一个博客主题就是用的NEXT，只是又一次作者的某个版本修改的非常多，导致我的博客挂掉了… 我就决定要自己写一个模版，至少不要因为主题升级版本博客死掉了。&lt;/p&gt;
    
    </summary>
    
      <category term="博客历程" scheme="http://blog.msiter.com/categories/%E5%8D%9A%E5%AE%A2%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="博客美化" scheme="http://blog.msiter.com/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
      <category term="hexo" scheme="http://blog.msiter.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 服务器</title>
    <link href="http://blog.msiter.com/Spring%20boot%20fwq-20180301.html"/>
    <id>http://blog.msiter.com/Spring boot fwq-20180301.html</id>
    <published>2018-03-01T13:29:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<p>以前写过一篇文章，但是那个时候感觉是很茫然，不知道为什么garde配置文件为什么这样子，不明白为什么这样设置，虽然最后也连接到了数据库，完成了增删改查，但是和没学的区别也不会很大。今天我打算好好端正我的态度，一步一步的来学习。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="创建一个SpringBoot-项目" style="display: inline;"><a href="#创建一个SpringBoot-项目" class="headerlink" title="创建一个SpringBoot 项目"></a>创建一个SpringBoot 项目</h2><p>接下来我们要开始开发Springboot项目了。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="创建一个-Java-项目" style="display: inline;"><a href="#创建一个-Java-项目" class="headerlink" title="创建一个 Java 项目"></a>创建一个 Java 项目</h3><p>本项目使用的第三方包依赖管理插件是 maven，为什么不使用 grade，emmm… 随便吧。这次就想用maven。</p><p>赞很多的教程中，我能看到的都是使用maven来创建项目，比如idea，和eclipse都有相关的步骤，选择这个选择那个的….我真的是….如果放在以前，我真的就按照这些步骤来了，现在有可能真的开发时间久了，并且开发IOS的时候 Cocoapods第三方管理，所有的项目最开始都是一清二白的，什么都没有，一步步填充的，所以下意识的我想就一个单纯的文件夹开始完成接下来的教程。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="创建一个-空的文件夹" style="display: inline;"><a href="#创建一个-空的文件夹" class="headerlink" title="创建一个 空的文件夹"></a>创建一个 空的文件夹</h3><p>好吧，话接上边,我们创建一个文件夹，比如名字就叫做 ‘Study’,这个文件除了默认的 <code>.</code>和<code>..</code> 文件夹什么都没有，接下来，我们使用idea打开这个文件。之后出现了 <code>.idea</code> 文件夹，但是对我们并没有影响，好吧开始之前我们先来创建一个 <code>src</code> 接下来我就不赘述了。最后目录如下：</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">.├── StudyJava.iml├── src│   └── main│       ├── java│       ├── resources│       └── webapp└── target</code></pre><p>其中imi文件是idea默认的配置文件，所以没啥用处。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="创建-pom-xml" style="display: inline;"><a href="#创建-pom-xml" class="headerlink" title="创建 pom.xml"></a>创建 pom.xml</h3><p>说实话，咱们使用idea或者eclipse创建的maven，我们可以发现除了生成一个<code>pom.xml</code>，什么都没有产生了，所以其实所有的配置都在xml文件中，我们其实可以直接创建，这样子的好处，大概就是说任何一个项目都可以支持maven，没有必要必须新产生的项目才可以使用。</p><p>这些选择创建的项目其实使用了maven的命令，如下：</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">mvn archetype:generate -DgroupId={project-packaging} -DartifactId={project-name}-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code></pre><p>我们这里就是直接创建了一个pom.xml 里面添加了一些内容。所以最后我们的样子大概如下：</p><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mycompany.app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven Quick Start Archetype<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概的意思我不解释了，为什么呢？第一行那些我不是很明白，后面的这几行，我不想解释。</p><p>到这个时候我们的目录结构如下</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">.├── StudyJava.iml├── pom.xml├── src│   └── main│       ├── java│       ├── resources│       └── webapp└── target</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="配置Spring-boot" style="display: inline;"><a href="#配置Spring-boot" class="headerlink" title="配置Spring boot"></a>配置Spring boot</h3><p>接下来，咱们应该去<a href="http://projects.spring.io/spring-boot/#quick-start" target="_blank" rel="noopener">Spring boot官方网站</a>去学习了。我其实很希望咱们任何人在学习一个东西的时候，第一时间是去官方网站去看，毕竟人家开发的人家的文档才是最好的，我们这些学习完的人确实会有一些独特的见解或者经验可以帮助你快速而好的理解，但是因人而异，或者理解不对地方，所以第一时间应该是去官方网站而不要去搜索引擎搜索教程</p><p>来到官方网站，我们看到官方网站非常友好的教你如何快速的运行起来。</p><p>首先添加以下代码</p><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后使用maven刷新以下这个导入需要的框架，好吧，我不使用<a href="http://blog.csdn.net/yangcheng33/article/details/52368766" target="_blank" rel="noopener">maven命令</a>的，直接使用的idea自带的刷新…你有兴趣的话可以研究下外链内容。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第一个Hello-World" style="display: inline;"><a href="#第一个Hello-World" class="headerlink" title="第一个Hello World"></a>第一个Hello World</h3><p>等到maven将第三方内容导入之后，我们就可以开发了。我们创建以下目录</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">.├── StudyJava.iml├── pom.xml├── src│   └── main│       ├── java│       │   └── com│       │       └── study│       │           ├── controller│       │           │   └── SampleController.java│       ├── resources│       └── webapp</code></pre><p>在<code>SampleController.java</code> 复制粘贴 Spring Boot 文档的代码，当然我们的package 不是 hello，而是<br><code>package com.study.controller;</code></p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SampleController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候我们运行main方法，在好看的注释汇总，我们的服务器就运行起来了，打开 0.0.0.0:8080.</p><p>日。。。就好了….这样子下去，我都快忘记以前 SSH 配置文件 XML，各种配置的噩梦了…</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="Tomcat-可以配置" style="display: inline;"><a href="#Tomcat-可以配置" class="headerlink" title="Tomcat 可以配置"></a>Tomcat 可以配置</h3><p>好吧，其实也非常简单 创建一下文件</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">.├── StudyJava.iml├── pom.xml├── src│   └── main│       ├── java│       │   └── com│       │       └── study│       │           ├── StudyApplication.java│       │           ├── controller│       │           │   └── SampleController.java│       ├── resources│       └── webapp</code></pre><p>代码如下</p><p>目前为止来说的话我们已经可以运行起来了，接下来我们来运行到Tomcat</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="修改打包方式" style="display: inline;"><a href="#修改打包方式" class="headerlink" title="修改打包方式"></a>修改打包方式</h4><p>在pom.xml设置 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> 如果以前是 jar 也修改 war</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="添加-servlet-api依赖" style="display: inline;"><a href="#添加-servlet-api依赖" class="headerlink" title="添加 servlet-api依赖"></a>添加 servlet-api依赖</h4><p>下面两种方式都可以，任选其一</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">&lt;dependency&gt;  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;  &lt;version&gt;3.1.0&lt;/version&gt;  &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;  &lt;version&gt;8.0.36&lt;/version&gt;  &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="修改启动类，并重写初始化方法" style="display: inline;"><a href="#修改启动类，并重写初始化方法" class="headerlink" title="修改启动类，并重写初始化方法"></a>修改启动类，并重写初始化方法</h4><p>上面我们都是用的main方法来启动的服务器，接下俩我们来修改为以下 增加 <code>SpringBootServletInitializer</code> 继承。并重写方法</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>SpringApplicationBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>support<span class="token punctuation">.</span>SpringBootServletInitializer<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StudyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="maven-打包-并运行-tomcat" style="display: inline;"><a href="#maven-打包-并运行-tomcat" class="headerlink" title="maven 打包 并运行 tomcat"></a>maven 打包 并运行 tomcat</h4><p>将 maven 放置在 tomcat下的webapps目录下，并且启动tomcat，访问地址 localhost:8080/项目名称/接口地址</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p> 之前一直不明白package与  install的区别，今天测试了下。</p><p> 如果b项目依赖a项目，而a打了包(package),jar仅仅时打到了a项目的target下。这时编译b项目，还是会报错，找不到所依赖的a项目，说明b项目在本地仓库是没有找到它所依赖的a项目。然后，我install a项目这时，有以下日志,[INFO] Installing G:\projects\a\target\a-0.0.1-SNAPSHOT.jar to F:\repository\com\chenjun\a\0.0.1-SNAPSHOT\a-0.0.1-SNAPSHOT.jar<br>[INFO] Installing G:\projects\a\pom.xml to F:\repository\com\chenjun\a\0.0.1-SNAPSHOT\a-0.0.1-SNAPSHOT.pom,说明a项目已安装到本地仓库了,并且是jar和pom同时安装的.</p><p>这时候去compileb项目，编译通过.</p><p>总之，package是把jar打到本项目的target下，而install时把target下的jar安装到本地仓库，供其他项目使用.</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="集成JDBC" style="display: inline;"><a href="#集成JDBC" class="headerlink" title="集成JDBC"></a>集成JDBC</h2><p>这个时候我们已经看到一些想过了，但是服务器只是做到这个程度肯定是不行的，我们接下来来进行数据库的链接。本博文中的使用的数据库为mysql。</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">mysql  Ver 14.14 Distrib 5.7.19, for macos10.12 (x86_64) using  EditLine wrapper</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="maven添加依赖库" style="display: inline;"><a href="#maven添加依赖库" class="headerlink" title="maven添加依赖库"></a>maven添加依赖库</h3><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MYSQL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Spring Boot JDBC --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="数据库添加数据" style="display: inline;"><a href="#数据库添加数据" class="headerlink" title="数据库添加数据"></a>数据库添加数据</h3>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>MySQL默认是不区分大小写的</p></em>                                </div>        <p>随便创建一个数据库，并且增加一个表，我这里是创建了一个 Study 数据库并且创建了一个 Student 表。</p><p>我的代码如下</p><pre class="line-numbers language-sql g-mb-30"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>Student<span class="token punctuation">`</span><span class="token punctuation">(</span>    u_id <span class="token keyword">int</span> unsigned <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    u_last_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    u_first_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    u_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    u_age <span class="token keyword">int</span><span class="token punctuation">,</span>    u_sex <span class="token keyword">int</span><span class="token punctuation">,</span>    u_brithday <span class="token keyword">timestamp</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>u_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我在添加数据的时候，只添加了 id last first 这三个字段…测试嘛</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="增加-Spring-配置文件" style="display: inline;"><a href="#增加-Spring-配置文件" class="headerlink" title="增加 Spring 配置文件"></a>增加 Spring 配置文件</h3><p>我们 Resource文件夹下，随便哪里创建一个 <code>application.properties</code> 代码如下</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">spring.datasource.url=jdbc:mysql://localhost:3306/study#spring.datasource.name=studyspring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="实体类添加" style="display: inline;"><a href="#实体类添加" class="headerlink" title="实体类添加"></a>实体类添加</h3><p>我们来创建一个 Student 实体类用来接收从数据库中获取的数据</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ulastname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ufirstname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUid</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uid <span class="token operator">=</span> uid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUlastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ulastname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUlastname</span><span class="token punctuation">(</span>String ulastname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ulastname <span class="token operator">=</span> ulastname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUfirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ufirstname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUfirstname</span><span class="token punctuation">(</span>String ufirstname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ufirstname <span class="token operator">=</span> ufirstname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="数据库查询" style="display: inline;"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h3><p>具体我也不写了，我使用的是 JDBCTemplete 来查询的</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">@RequestMapping(&quot;/hello&quot;)@ResponseBodyList&lt;Student&gt; home() {    String sql = &quot;select u_Id,u_last_name,u_first_name from student&quot;;    return jdbcTemplate.query(sql, new RowMapper&lt;Student&gt;() {        @Override        public Student mapRow(ResultSet resultSet, int i) throws SQLException {            Student stu = new Student();            stu.setUid(resultSet.getInt(&quot;u_id&quot;));            stu.setUfirstname(resultSet.getString(&quot;u_first_name&quot;));            stu.setUlastname(resultSet.getString(&quot;u_last_name&quot;));            return stu;        }    });}</code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="完成" style="display: inline;"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>这个时候我们请求 hello这个接口的时候就会获取到数据库中的数据了</p><pre class="line-numbers language-json g-mb-30"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"uid"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"ulastname"</span><span class="token operator">:</span> <span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token property">"ufirstname"</span><span class="token operator">:</span> <span class="token string">"三"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="ROM-辅助框架" style="display: inline;"><a href="#ROM-辅助框架" class="headerlink" title="ROM 辅助框架"></a>ROM 辅助框架</h2><p>这里指的是 MyBitis，hibernate，jooq等，这种框架，这里由于我们公司使用的是 jooq，所以我研究也是这个东西。</p><p>以下是官方例子中的七步学习</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第一步：准备" style="display: inline;"><a href="#第一步：准备" class="headerlink" title="第一步：准备"></a>第一步：准备</h3><p>好吧，其实就是 maven 配置而已。。。</p><p>好多种</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Open-Source-Edition" style="display: inline;"><a href="#Open-Source-Edition" class="headerlink" title="Open Source Edition"></a>Open Source Edition</h4><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Commercial-Editions-Java-8" style="display: inline;"><a href="#Commercial-Editions-Java-8" class="headerlink" title="Commercial Editions (Java 8+)"></a>Commercial Editions (Java 8+)</h4><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Note: These aren't hosted on Maven Central. Import them manually from your distribution --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="ommercial-Editions-Java-6" style="display: inline;"><a href="#ommercial-Editions-Java-6" class="headerlink" title="ommercial Editions (Java 6+)"></a>ommercial Editions (Java 6+)</h4><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Note: These aren't hosted on Maven Central. Import them manually from your distribution --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro-java-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro-java-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.pro-java-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="Commercial-Editions-Free-Trial" style="display: inline;"><a href="#Commercial-Editions-Free-Trial" class="headerlink" title="Commercial Editions (Free Trial)"></a>Commercial Editions (Free Trial)</h4><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Note: These aren't hosted on Maven Central. Import them manually from your distribution --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.trial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.trial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq.trial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向资本主义低头… 自然选择第一个啊</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第二步：配置你的数据库" style="display: inline;"><a href="#第二步：配置你的数据库" class="headerlink" title="第二步：配置你的数据库"></a>第二步：配置你的数据库</h3><p>我这里是使用的是他官方文档中提供的sql文件，它是基于 oracle的所以修改为mysql为</p><pre class="line-numbers language-sql g-mb-30"><code class="language-sql"><span class="token keyword">use</span> jooq<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> language <span class="token punctuation">(</span>  id              <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  <span class="token number">cd</span>              CHAR<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  description     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> author <span class="token punctuation">(</span>  id              <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  first_name      <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  last_name       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  date_of_birth   <span class="token keyword">DATE</span><span class="token punctuation">,</span>  year_of_birth   <span class="token keyword">INT</span><span class="token punctuation">,</span>  distinguished   <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book <span class="token punctuation">(</span>  id              <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  author_id       <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  title           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  published_in    <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  language_id     <span class="token keyword">INT</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_book_author     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>author_id<span class="token punctuation">)</span>   <span class="token keyword">REFERENCES</span> author<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_book_language   <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>language_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> language<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book_store <span class="token punctuation">(</span>  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book_to_book_store <span class="token punctuation">(</span>  name            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  book_id         <span class="token keyword">INTEGER</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  stock           <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> book_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_b2bs_book_store <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">REFERENCES</span> book_store <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_b2bs_book       <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>book_id<span class="token punctuation">)</span>     <span class="token keyword">REFERENCES</span> book <span class="token punctuation">(</span>id<span class="token punctuation">)</span>         <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> language <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">cd</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'en'</span><span class="token punctuation">,</span> <span class="token string">'English'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> language <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">cd</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token string">'Deutsch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> language <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">cd</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'Français'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> language <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">cd</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'pt'</span><span class="token punctuation">,</span> <span class="token string">'Português'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> author <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> date_of_birth    <span class="token punctuation">,</span> year_of_birth<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>           <span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">'George'</span>  <span class="token punctuation">,</span> <span class="token string">'Orwell'</span> <span class="token punctuation">,</span> <span class="token keyword">DATE</span> <span class="token string">'1903-06-26'</span><span class="token punctuation">,</span> <span class="token number">1903</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> author <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> date_of_birth    <span class="token punctuation">,</span> year_of_birth<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>           <span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token string">'Paulo'</span>   <span class="token punctuation">,</span> <span class="token string">'Coelho'</span> <span class="token punctuation">,</span> <span class="token keyword">DATE</span> <span class="token string">'1947-08-24'</span><span class="token punctuation">,</span> <span class="token number">1947</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author_id<span class="token punctuation">,</span> title         <span class="token punctuation">,</span> published_in<span class="token punctuation">,</span> language_id<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>         <span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token punctuation">,</span> <span class="token string">'1984'</span>        <span class="token punctuation">,</span> <span class="token number">1948</span>        <span class="token punctuation">,</span> <span class="token number">1</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author_id<span class="token punctuation">,</span> title         <span class="token punctuation">,</span> published_in<span class="token punctuation">,</span> language_id<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>         <span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token punctuation">,</span> <span class="token string">'Animal Farm'</span> <span class="token punctuation">,</span> <span class="token number">1945</span>        <span class="token punctuation">,</span> <span class="token number">1</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author_id<span class="token punctuation">,</span> title         <span class="token punctuation">,</span> published_in<span class="token punctuation">,</span> language_id<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>         <span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">2</span>        <span class="token punctuation">,</span> <span class="token string">'O Alquimista'</span><span class="token punctuation">,</span> <span class="token number">1988</span>        <span class="token punctuation">,</span> <span class="token number">4</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author_id<span class="token punctuation">,</span> title         <span class="token punctuation">,</span> published_in<span class="token punctuation">,</span> language_id<span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>         <span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">2</span>        <span class="token punctuation">,</span> <span class="token string">'Brida'</span>       <span class="token punctuation">,</span> <span class="token number">1990</span>        <span class="token punctuation">,</span> <span class="token number">2</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Orell Füssli'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Ex Libris'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Buchhandlung im Volkshaus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Orell Füssli'</span>             <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Orell Füssli'</span>             <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Orell Füssli'</span>             <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Ex Libris'</span>                <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Ex Libris'</span>                <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book_to_book_store <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Buchhandlung im Volkshaus'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第三步：生成代码" style="display: inline;"><a href="#第三步：生成代码" class="headerlink" title="第三步：生成代码"></a>第三步：生成代码</h3><p>好吧这一步着实麻烦了些，来吧，看看官方文档如何说的</p><p>首先你需要准备三个文件！！！</p><p>有三个文件，可jooq，是从<a href="http://www.jooq.org/download或从中心下载Maven：" target="_blank" rel="noopener">http://www.jooq.org/download或从中心下载Maven：</a></p><ol><li>jooq-3.10.5.jar<br>你将在你的应用程序运行jooq主图书馆</li><li>jooq-meta-3.10.5.jar<br>您将在构建中包含的实用程序来导航您的数据库模式生成代码。这也可以用作模式爬虫。</li><li>jooq-codegen-3.10.5.jar<br>将包含在生成中以生成数据库模式的实用程序。</li></ol><p>好吧 就是咱们maven 引入的那三个</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="配置jooq的代码生成器" style="display: inline;"><a href="#配置jooq的代码生成器" class="headerlink" title="配置jooq的代码生成器"></a>配置jooq的代码生成器</h4><p>好吧，就是一个xml文件，这个文件理你需要告诉jooq，你都需要如何去转换文件</p><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Configure the database connection here --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>oracle.jdbc.OracleDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:oracle:thin:@[your jdbc connection parameters]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>[your database user]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>[your database password]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- You can also pass user/password and other JDBC properties in the optional properties tag: --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>[db-user]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>[db-password]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- The database dialect from jooq-meta. Available dialects are           named org.util.[database].[database]Database.           Natively supported values are:               org.jooq.util.ase.ASEDatabase               org.jooq.util.cubrid.CUBRIDDatabase               org.jooq.util.db2.DB2Database               org.jooq.util.derby.DerbyDatabase               org.jooq.util.firebird.FirebirdDatabase               org.jooq.util.h2.H2Database               org.jooq.util.hsqldb.HSQLDBDatabase               org.jooq.util.informix.InformixDatabase               org.jooq.util.ingres.IngresDatabase               org.jooq.util.mariadb.MariaDBDatabase               org.jooq.util.mysql.MySQLDatabase               org.jooq.util.oracle.OracleDatabase               org.jooq.util.postgres.PostgresDatabase               org.jooq.util.sqlite.SQLiteDatabase               org.jooq.util.sqlserver.SQLServerDatabase               org.jooq.util.sybase.SybaseDatabase           This value can be used to reverse-engineer generic JDBC DatabaseMetaData (e.g. for MS Access)               org.jooq.util.jdbc.JDBCDatabase           This value can be used to reverse-engineer standard jOOQ-meta XML formats               org.jooq.util.xml.XMLDatabase           You can also provide your own org.jooq.util.Database implementation           here, if your database is currently not supported --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.util.oracle.OracleDatabase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- All elements that are generated from your schema (A Java regular expression.           Use the pipe to separate several expressions) Watch out for           case-sensitivity. Depending on your database, this might be           important!           You can create case-insensitive regular expressions using this syntax: (?i:expr)           Whitespace is ignored and comments are possible.           --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- All elements that are excluded from your schema (A Java regular expression.           Use the pipe to separate several expressions). Excludes match before           includes, i.e. excludes have a higher priority --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>           UNUSED_TABLE                # This table (unqualified name) should not be generated         | PREFIX_.*                   # Objects with a given prefix should not be generated         | SECRET_SCHEMA\.SECRET_TABLE # This table (qualified name) should not be generated         | SECRET_ROUTINE              # This routine (unqualified name) ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- The schema that is used locally as a source for meta information.           This could be your development schema or the production schema, etc           This cannot be combined with the schemata element.           If left empty, jOOQ will generate all available schemata. See the           manual's next section to learn how to generate several schemata --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inputSchema</span><span class="token punctuation">></span></span>[your database schema / owner / name]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inputSchema</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generate</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Generation flags: See advanced configuration properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- The destination package of your generated classes (within the           destination directory)           jOOQ may append the schema name to this package if generating multiple schemas,           e.g. org.jooq.your.packagename.schema1                org.jooq.your.packagename.schema2 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">></span></span>[org.jooq.your.packagename]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- The destination directory of your generated classes --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>[/path/to/your/dir]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将他转换为中文大概是如下这样子的</p><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.jooq.org/xsd/jooq-codegen-3.8.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置jdbc驱动连接 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 代码生成器 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.util.JavaGenerator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 数据库类型 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.util.mysql.MySQLDatabase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 数据库名 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inputSchema</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inputSchema</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 生成包含，*表示包含所有内容 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!--剔除，此处未剔除 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 生成的代码所在的包结构 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">></span></span>org.test.jooq.generated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 生成的代码存放路径，默认会以src同目录开始 --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>There are also lots of advanced configuration parameters, which will be treated in the manual’s section about advanced code generation features Note, you can find the official XSD file for a formal specification at:<br><a href="http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd" target="_blank" rel="noopener">http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd</a></p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="运行jooq代码生成器" style="display: inline;"><a href="#运行jooq代码生成器" class="headerlink" title="运行jooq代码生成器"></a>运行jooq代码生成器</h4><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">org.jooq.util.GenerationTool /jooq-config.xml</code></pre><p>要确保以下文件放置在 classpath 下：</p><ul class="g-list-style-circle"><li>The XML configuration file</li><li>jooq-3.10.5.jar, jooq-meta-3.10.5.jar, jooq-codegen-3.10.5.jar</li><li>The JDBC driver you configured</li></ul><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="命令行生成" style="display: inline;"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h4><ol><li>把配置文件和jooq*.jar三个文件和JDBC Driver 文件放到同一个目录中</li><li>进入这个目录</li><li>运行 Run java -cp jooq-3.10.5.jar;jooq-meta-3.10.5.jar;jooq-codegen-3.10.5.jar;[JDBC-driver].jar;. org.jooq.util.GenerationTool /[XML file]</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="使用-maven-生成" style="display: inline;"><a href="#使用-maven-生成" class="headerlink" title="使用 maven 生成"></a>使用 maven 生成</h4><p>Using the official jOOQ-codegen-maven plugin, you can integrate source code generation in your Maven build process:</p><pre class="line-numbers language-xml g-mb-30"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Specify the maven code generator plugin --></span>  <span class="token comment" spellcheck="true">&lt;!-- Use org.jooq            for the Open Source Edition           org.jooq.pro        for commercial editions,           org.jooq.pro-java-6 for commercial editions with Java 6 support,           org.jooq.trial      for the free trial edition       Note: Only the Open Source Edition is hosted on Maven Central.             Import the others manually from your distribution --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- The plugin should hook into the generate goal --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL database --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.4.1212<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Specify the plugin configuration.       The configuration format is the same as for the standalone code generator --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JDBC connection parameters --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>org.postgresql.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:postgresql:postgres<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>postgres<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Generator parameters --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.util.postgres.PostgresDatabase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- In case your database supports catalogs, e.g. SQL Server:        &lt;inputCatalog>public&lt;/inputCatalog>          --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inputSchema</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inputSchema</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">></span></span>org.jooq.util.maven.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>target/generated-sources/jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第四步：获取链接" style="display: inline;"><a href="#第四步：获取链接" class="headerlink" title="第四步：获取链接"></a>第四步：获取链接</h3><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token comment" spellcheck="true">// For convenience, always static import your generated tables and jOOQ functions to decrease verbosity:</span><span class="token keyword">import</span> <span class="token keyword">static</span> test<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>Tables<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DSL<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>        String userName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/library"</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第五步：查询" style="display: inline;"><a href="#第五步：查询" class="headerlink" title="第五步：查询"></a>第五步：查询</h3><pre class="line-numbers language-java g-mb-30"><code class="language-java">DSLContext create <span class="token operator">=</span> DSL<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> SQLDialect<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>Result<span class="token operator">&lt;</span>Record<span class="token operator">></span> result <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先得到dslcontext实例我们可以写一个简单的选择查询。我们将MySQL连接的实例传递给DSL。请注意，dslcontext不关闭连接。我们必须自己做那件事。</p><p>然后我们使用DSL jooq查询返回结果的一个实例。我们将在下一步中使用这个结果。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="第六步：处理数据" style="display: inline;"><a href="#第六步：处理数据" class="headerlink" title="第六步：处理数据"></a>第六步：处理数据</h3><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Record r <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    String firstName <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    String lastName <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" first name: "</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token string">" last name: "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整的代码如下</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// For convenience, always static import your generated tables and</span><span class="token comment" spellcheck="true">// jOOQ functions to decrease verbosity:</span><span class="token keyword">import</span> <span class="token keyword">static</span> test<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>Tables<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DSL<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        String userName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/library"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Connection is the only JDBC resource that we need</span>        <span class="token comment" spellcheck="true">// PreparedStatement and ResultSet are handled by jOOQ, internally</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        DSLContext create <span class="token operator">=</span> DSL<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> SQLDialect<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Result<span class="token operator">&lt;</span>Record<span class="token operator">></span> result <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Record r <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            String firstName <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            String lastName <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" first name: "</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token string">" last name: "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是其实咱们已经配置完 Spring JDBC 之后，可以直接使用反射</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>DSLContext dsl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>差不多像这样子</p><pre class="line-numbers language-java g-mb-30"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>model<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>Author<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>DSLContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DSLContext dsl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">return</span> dsl<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Author<span class="token punctuation">.</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchAnyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="结语" style="display: inline;"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里 我们就结束了，因为我也是第一次使用 jooq，这些框架，很多东西不一定对，但是至少这是一个思路。</p><p>努力吧。</p>    <p hidden id="CurrentFileName">Spring boot 服务器.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前写过一篇文章，但是那个时候感觉是很茫然，不知道为什么garde配置文件为什么这样子，不明白为什么这样设置，虽然最后也连接到了数据库，完成了增删改查，但是和没学的区别也不会很大。今天我打算好好端正我的态度，一步一步的来学习。&lt;/p&gt;
&lt;h2 id=&quot;创建一个SpringBoot-项目&quot;&gt;&lt;a href=&quot;#创建一个SpringBoot-项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个SpringBoot 项目&quot;&gt;&lt;/a&gt;创建一个SpringBoot 项目&lt;/h2&gt;&lt;p&gt;接下来我们要开始开发Springboot项目了。&lt;/p&gt;
&lt;h3 id=&quot;创建一个-Java-项目&quot;&gt;&lt;a href=&quot;#创建一个-Java-项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个 Java 项目&quot;&gt;&lt;/a&gt;创建一个 Java 项目&lt;/h3&gt;&lt;p&gt;本项目使用的第三方包依赖管理插件是 maven，为什么不使用 grade，emmm… 随便吧。这次就想用maven。&lt;/p&gt;
&lt;p&gt;赞很多的教程中，我能看到的都是使用maven来创建项目，比如idea，和eclipse都有相关的步骤，选择这个选择那个的….我真的是….如果放在以前，我真的就按照这些步骤来了，现在有可能真的开发时间久了，并且开发IOS的时候 Cocoapods第三方管理，所有的项目最开始都是一清二白的，什么都没有，一步步填充的，所以下意识的我想就一个单纯的文件夹开始完成接下来的教程。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://blog.msiter.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="java" scheme="http://blog.msiter.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://blog.msiter.com/tags/spring-boot/"/>
    
      <category term="jooq" scheme="http://blog.msiter.com/tags/jooq/"/>
    
  </entry>
  
  <entry>
    <title>博客增加MathJax支持</title>
    <link href="http://blog.msiter.com/hexo%20zjMathjaxzc-20180222.html"/>
    <id>http://blog.msiter.com/hexo zjMathjaxzc-20180222.html</id>
    <published>2018-02-22T12:07:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>今天是上班的第一天，来到公司之后学习了RSA算法之后，就想好好的写一篇关于rsa的文章，但是遇到的第一个问题就是数据公式展示的问题。</p><p>在展示问题上无非就是MathJax和LaTex两种数学公式方法。</p><p>我们现在来说说如何在Hexo中展示数学公式吧。我们使用的Hexo的第三方框架 <a href="https://github.com/akfish/hexo-math" target="_blank" rel="noopener">Hexo-Math</a>.除了引入这个框架之外还需要引入</p><a id="more"></a><pre class="line-numbers language-json g-mb-30"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  ... more  <span class="token property">"hexo-inject"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"hexo-math"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"hexo-renderer-mathjax"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  ... more<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入完成这三个框架之后，参见 <a href="https://github.com/hexojs/hexo-math/issues/26" target="_blank" rel="noopener">How to config it to make it work? · Issue #26 · hexojs/hexo-math</a> 在 <code>config.yml</code>文件中配置</p><pre class="line-numbers language-yml g-mb-30"><code class="language-yml"># MathJS## Hexo Math JS LTXmath:  engine: 'mathjax' # or 'katex'  mathjax:    src: "//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"    config:      # MathJax config  katex:    css: #custom_css_source    js: #custom_js_source # not used    config:      # KaTeX config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以在实际的博客中使用公式了。<br>例子：</p><pre class="line-numbers language-html g-mb-30"><code class="language-html">/// 行内公式Simple inline \\(a = b + c\\)./// 块级公式$$\frac{\partial u}{\partial t}= h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2} +\frac{\partial^2 u}{\partial z^2}\right)$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/// 行内公式<br>Simple inline \(a = b + c\).</p><p>/// 块级公式<br>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p><p>ps:</p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>在实际使用中由于 hexo的markdown的解析的问题，我们可能需要使用</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">{%raw%}{%endraw%}或者{%math%}{%endmath%}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></em>                                </div>            <p hidden id="CurrentFileName">hexo 增加Mathjax支持.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是上班的第一天，来到公司之后学习了RSA算法之后，就想好好的写一篇关于rsa的文章，但是遇到的第一个问题就是数据公式展示的问题。&lt;/p&gt;
&lt;p&gt;在展示问题上无非就是MathJax和LaTex两种数学公式方法。&lt;/p&gt;
&lt;p&gt;我们现在来说说如何在Hexo中展示数学公式吧。我们使用的Hexo的第三方框架 &lt;a href=&quot;https://github.com/akfish/hexo-math&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-Math&lt;/a&gt;.除了引入这个框架之外还需要引入&lt;/p&gt;
    
    </summary>
    
      <category term="博客历程" scheme="http://blog.msiter.com/categories/%E5%8D%9A%E5%AE%A2%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="博客美化" scheme="http://blog.msiter.com/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
      <category term="hexo" scheme="http://blog.msiter.com/tags/hexo/"/>
    
      <category term="mathjax" scheme="http://blog.msiter.com/tags/mathjax/"/>
    
  </entry>
  
  <entry>
    <title>IOS 逆向学习</title>
    <link href="http://blog.msiter.com/IOSnxxx-20180129.html"/>
    <id>http://blog.msiter.com/IOSnxxx-20180129.html</id>
    <published>2018-01-29T14:25:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<p>一年之前学习过一次，但是当初很快就被忙碌的工作占据，并且当时学习的晕晕乎乎的。现在我打算重新学习一下。别的就不开始多说了，开始搭建theos环境吧。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="搭建Theos环境" style="display: inline;"><a href="#搭建Theos环境" class="headerlink" title="搭建Theos环境"></a>搭建Theos环境</h2><p>写作时间 2018-1-29<br>theos 版本 2.3<br>macos 10.13.3<br>xcode Version 9.2 (9C40b)         </p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="配置环境变量" style="display: inline;"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>因为我们需要让系统明白 theos放在哪里了，需要设置以下环境变量。有以下几种方式来设置，你可以根据自己喜欢来设置自己想要的。</p><p>配置环境变量的语法为</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">export [变量名称]="$PATH:<path 1=""></path>:<path 2=""></path>:<path 3=""></path>:...:<path n=""></path>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面无论哪种方都可以使用以下方法来实验是否设置完成</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">echo [变量名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="只在当前终端生效的方式" style="display: inline;"><a href="#只在当前终端生效的方式" class="headerlink" title="只在当前终端生效的方式"></a>只在当前终端生效的方式</h4><p>这种方式只在终端中生效，当你关闭了，就需要重新配置了.emmmmm…这种方式，具体看你喜好了。</p><p>就是直接在命令行中调用配置环境变量方法就可以了。如：</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">export THEOS = /opt/theos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H4   </span><h4 id="文件中保存的环境变量" style="display: inline;"><a href="#文件中保存的环境变量" class="headerlink" title="文件中保存的环境变量"></a>文件中保存的环境变量</h4><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">/etc/profile ## 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。/etc/paths  ##   全局变量~/.bash_profile ### 用户~/.bash_login ### 用户~/.profile ### 用户~/.bashrc ### 用户  我是在这里配置的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.<br>/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.<br>~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.<br>~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取.<br>~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.<br>所以<br>/home/oracle/.bash_profile  oracle用户的配置<br>/etc/skel/.bash_profile 默认配置<br>/root/.bash_profile root用户的配置             </p></em>                                </div>        <p>如果没有文件可以直接生成</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">touch [文件名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后写入命令。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="下载theos" style="display: inline;"><a href="#下载theos" class="headerlink" title="下载theos"></a>下载theos</h3><p>在安装之前需要安装</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">brew install ldid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装，在咱们完成了 环境变量的配置之后。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">$ git clone --recursive https://github.com/theos/theos.git $THEOS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记得使用 <code>--recursive</code> 命令，这个命令，会在clone的时候，clone这个仓库徐耀的子模块。如果你忘记了这一点的话，进入theos命令运行。<code>make update-theos</code></p><p>其他常见的地方是<code>/opt/theos</code>和<code>/var/theos</code>。 如果要使用/ var，/ opt或其他类似的目录，请记住，除root用户之外，它们将不可写入。 您必须在上面的命令中使用sudo，然后将所有者更改为自己</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">$ sudo chown -R $(id -u):$(id -g) theos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽管你可以直接食用 download zip ，下载theos，但是不推荐这么做，因为这样做不利于后的版本更新。</p><p>In order to use make troubleshoot, you need to install Ghostbin’s ghost.sh script.</p><p>为了使用<code>make troubleshoot</code>，你需要安装<a href="https://ghostbin.com/ghost.sh" target="_blank" rel="noopener">Ghostbin的ghost.sh</a>脚本。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">$ curl https://ghostbin.com/ghost.sh -o $THEOS/bin/ghost$ chmod +x $THEOS/bin/ghost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="升级" style="display: inline;"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>Theos采用的是<a href="https://en.wikipedia.org/wiki/Rolling_release" target="_blank" rel="noopener">滚动发布模式</a>，这意味着最新的提交到Git仓库是可用的最新版本的Theos。 偶尔，你应该更新Theos。 这可以通过切换到包含Theos makefile的目录然后运行：</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">$ make update-theos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果遇到问题，更新Theos是你应该做的第一件事。 如果你要求别人帮忙，这样可以更容易地找到问题。</p><p>如果在运行该命令时看到以下内容：</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">make: *** No rule to make target 'update-theos'.  Stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么你现在不在Theos项目目录中，或者正在使用比此功能更早的Theos版本。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="配置-IOS-设备-ssh-免密码登录" style="display: inline;"><a href="#配置-IOS-设备-ssh-免密码登录" class="headerlink" title="配置 IOS 设备 ssh 免密码登录"></a>配置 IOS 设备 ssh 免密码登录</h2><p>首先需要在本地创建 rsh 文件</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">ssh-keygen -t rsa -C "xxxxx@xxxxx.com"# Generating public/private rsa key pair...# 三次回车即可生成 ssh keycd ~/.ssh ## 进入 sshls ## 查看 有id_ras 和 id_ras.pub 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就说明创建完成了，将.pub文件拷贝至收集目录下的 <code>/var/root/.ssh</code> 名称为 <code>authorized_keys</code>.</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">scp ~/.ssh/id_rsa.pub root@172.16.41.66:/var/root/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候，就完成了，直接使用试试吧。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">ssh root@DeviceIP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="获取头文件" style="display: inline;"><a href="#获取头文件" class="headerlink" title="获取头文件"></a>获取头文件</h2><p>接下来我们将开始演示如何敲壳，之后获取应用的头文件，接下来我们以微信为例。        </p><p>这里所有的先决条件是这样子的</p><ol><li>你有一个 越狱的 手机 并且装了微信的手机</li><li>装有 openshh 连接上 (OpenSSH的root密码默认为alpine)</li></ol><p>连接上之后，我们需要找到我们的WeChat.app，首先保证你的微信处于运行状态，之后运行</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">ps -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令之后你会看到列出的所有进程，找到其中有WeChat结尾的，记录该地址。</p><p>之后，我们来进行敲壳获取 decrypted 文件。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="敲壳-dumpdecrypted" style="display: inline;"><a href="#敲壳-dumpdecrypted" class="headerlink" title="敲壳  dumpdecrypted"></a>敲壳  dumpdecrypted</h3><p><a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="noopener">dumpdecrypted</a> clone到本地，之后进入文件之后运行 <code>make</code> 命令，结束之后，会出现一个 <code>dumpdecrypted.dylib</code> 。</p><p>将这个文件传输到手机上，为了方便，我们吧文件放置在 微信的 Document。使用如下方法获取到该文件夹的位置。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">Misterde-iPod:/System root# cycript -p WeChatcy# NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true)[0];@"/var/mobile/Containers/Data/Application/487D41FD-2118-4015-BE79-FF61A9029B1E/Documents"cy#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来让我们把 <code>dumpdecrypted.dylib</code> 复制到Documents文件夹中。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">scp ~/Desktop/dumpdecrypted/dumpdecrypted.dylib root@172.16.41.66:/var/mobile/Containers/Data/Application/487D41FD-2118-4015-BE79-FF61A9029B1E/Documents/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们就可以进行敲壳了，敲壳之前，我们要确定当前的目录，因为完成后的文件会被放置在当前的目录，推荐是Docustoms 文件夹。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh"># DYLD_INSERT_LIBRARIES = 咱们的dylib文件     目标文件也就是咱们的WeChatDYLD_INSERT_LIBRARIES=/var/mobile/Containers/Data/Application/487D41FD-2118-4015-BE79-FF61A9029B1E/Documents/dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/BD2D25AB-8B36-4614-84BE-79806AB53FB8/WeChat.app/WeChatmach-o decryption dumperDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.[+] detected 32bit ARM binary in memory.[+] offset to cryptid found: @0x75a4c(from 0x75000) = a4c[+] Found encrypted data at address 00004000 of length 49430528 bytes - type 1.[+] Opening /private/var/mobile/Containers/Bundle/Application/BD2D25AB-8B36-4614-84BE-79806AB53FB8/WeChat.app/WeChat for reading.[+] Reading header[+] Detecting header type[+] Executable is a FAT image - searching for right architecture[+] Correct arch is at offset 16384 in the file[+] Opening WeChat.decrypted for writing.[+] Copying the not encrypted start of the file[+] Dumping the decrypted data into the file[+] Copying the not encrypted remainder of the file[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset 4a4c[+] Closing original file[+] Closing dump file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候，我们发现文件夹下已经有了一个<code>WeChat.decrypted</code>.我们使用 scp 命令把这个文件传输到我们的电脑。</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">scp root@172.16.41.66:/var/mobile/Containers/Data/Application/487D41FD-2118-4015-BE79-FF61A9029B1E/Documents/WeChat.decrypted ~/Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="获取-头文件" style="display: inline;"><a href="#获取-头文件" class="headerlink" title="获取 头文件"></a>获取 头文件</h3><p>我们接下来使用 class-dump 来获取文件的头文件。下载到本地 (class-dump)[<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">http://stevenygard.com/projects/class-dump/</a>]</p><p>你可以任意选择类型，压缩包还是执行文件，里面都是有一个已经编译好的执行文件以及一个源代码文件夹。直接使用执行文件即可。</p><p>这里我们需要了解下 class-dump的用法</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">class-dump 3.5 (64 bit)Usage: class-dump [options] <mach-o-file>  where options are:        -a             show instance variable offsets        -A             show implementation addresses        --arch <arch>  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64, armv6, armv7, armv7s, arm64)        -C <regex>     only display classes matching regular expression        -f <str>       find string in method name        -H             generate header files in current directory, or directory specified with -o        -I             sort classes, categories, and protocols by inheritance (overrides -s)        -o <dir>       output directory used for -H        -r             recursively expand frameworks and fixed VM shared libraries        -s             sort classes and categories by name        -S             sort methods by name        -t             suppress header in output, for testing        --list-arches  list the arches in the file, then exit        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS<version>.sdk        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX<version>.sdk        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></version></version></dir></str></regex></arch></mach-o-file></code></pre><p>关于平台以下</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">arm64：iPhone6s | iphone6s plus｜iPhone6｜ iPhone6 plus｜iPhone5S | iPad Air｜ iPad mini2(iPad mini with Retina Display)armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4i386是针对intel通用微处理器32位处理器x86_64是针对x86架构的64位处理器模拟器32位处理器测试需要i386架构，模拟器64位处理器测试需要x86_64架构，真机32位处理器需要armv7,或者armv7s架构，真机64位处理器需要arm64架构。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">./class-dump-3.5/class-dump -s -S -H ./WeChat.decrypted -o ./header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们在 header 就已经获得所有的头文件了，接下来就是慢慢的看…..</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H2   </span><h2 id="MonkeyDev" style="display: inline;"><a href="#MonkeyDev" class="headerlink" title="MonkeyDev"></a>MonkeyDev</h2>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>原有iOSOpenDev的升级，非越狱插件开发集成神器！</p><ul class="g-list-style-circle"><li>可以使用Xcode开发CaptainHook Tweak、Logos Tweak 和 Command-line Tool，在越狱机器开发插件，这是原来iOSOpenDev功能的迁移和改进。</li><li>只需拖入一个砸壳应用，自动集成class-dump、restore-symbol、Reveal、Cycript和注入的动态库并重签名安装到非越狱机器。</li><li>支持调试自己编写的动态库和第三方App</li><li>支持通过CocoaPods第三方应用集成SDK以及非越狱插件，简单来说就是通过CocoaPods搭建了一个非越狱插件商店。</li></ul></em>                                </div>        <p>给跪……</p><p>安装移步<a href="https://github.com/AloneMonkey/MonkeyDev/wiki" target="_blank" rel="noopener">官方Wiki</a></p><p>遇到的一个坑</p><p>因为安装的theos没有在 <code>/opt/theos</code> 目录，导致失败解决办法,建立一个软连接</p><pre class="line-numbers language-sh g-mb-30"><code class="language-sh">  ln -s 你的目录 /opt/theos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者你可以每次都设置项目的BuildString 中的 theos 位置</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="拥有taget-action的方法和类名" style="display: inline;"><a href="#拥有taget-action的方法和类名" class="headerlink" title="拥有taget-action的方法和类名"></a>拥有taget-action的方法和类名</h3><p>在这个时候你已经可以运行在设备上了，并且就像平时咱们调试应用一样了。这个时候咱们想找到比如微信的登陆按钮点击了之后触发了什么时间呢？这个很简单 使用我们Xcode自带的试图查看器，点击到按钮的时候就可以查看 target-action了就和咱们平时一样。</p><p>比如咱们获取到 点击方法为 <code>onFirstViewLogin</code> Target 为 <code>WCAccountLoginControlLogic</code></p><p>则有以下代码</p><pre class="line-numbers language-oc g-mb-30"><code class="language-oc">CHDeclareClass(WCAccountLoginControlLogic)CHOptimizedMethod(0, self, void,WCAccountLoginControlLogic ,onFirstViewLogin){    //get origin value    CHSuper(0, WCAccountLoginControlLogic, onFirstViewLogin);    NSLog(@"点击了 登陆按钮");}CHConstructor{    CHLoadLateClass(WCAccountLoginControlLogic);    CHClassHook(0, WCAccountLoginControlLogic, onFirstViewLogin);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后，咱们点击登陆按钮之后就会打印</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="打印那些没有target-action的方法" style="display: inline;"><a href="#打印那些没有target-action的方法" class="headerlink" title="打印那些没有target-action的方法"></a>打印那些没有target-action的方法</h3><p>当然这个时候，我们很兴奋，但是忽然沉寂了，如何获取更多的方法呢？应用不是蠢到每一个操作都需要这样触发的。那怎么办这个时候就需要一个可以实时打印方法的日志机制。好在这个还是不需要我们努力….真的成搬砖了，，，到头了 还是搬砖….难过</p><p>使用 <a href="https://github.com/qhd/ANYMethodLog.git" target="_blank" rel="noopener">ANYMethodLog</a> 具体移步前往查看详细。</p><pre class="line-numbers language-oc g-mb-30"><code class="language-oc">__attribute__((constructor)) // 在main函数被调用之前调用__attribute__((destructor)) // 在main函数被调用之后调<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用这两个方法可以完成咱们想要的监听操作</p><pre class="line-numbers language-oc g-mb-30"><code class="language-oc">__attribute__((constructor)) void entry() {    [ANYMethodLog logMethodWithClass:NSClassFromString(@"WCAccountLoginControlLogic") condition:^BOOL(SEL sel) {        NSLog(@"method:%@", NSStringFromSelector(sel));        return NO;    } before:nil after:nil];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这里就有一个问题，，， WCAccountLoginControlLogic 哪里来的？我们监听哪个类的方法？  好吧接下来看下一张让我们找到我们想要看到的视图名称</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="使用-lldb来进行更多的操作" style="display: inline;"><a href="#使用-lldb来进行更多的操作" class="headerlink" title="使用 lldb来进行更多的操作"></a>使用 lldb来进行更多的操作</h3><p>lldb是一个很好用的工具，这块是一个非常大的一块内容需要单独学习，当然其实掌握其中一点就已经受用了。</p><p>我使用的是非常简单的一块，首先了解 lldb ，之后在看下面</p><p>目前我知道的，有两种情况可以进入到 lldb，让咱们来进行一些操作。</p><ol><li>使用 Xcode 自带的视图层次查看器</li><li>断点</li></ol><p>使用Xcode 自带的层次查看器 就不多说了。我们来说说断点。</p><p>当然，我们都进入了 层次查看器了，其实也是可以看到的。。主要是还是为了方便吧。。。</p><p>我们创建一个 Sysmbolic BreakPoint ，创建的一个断点。方法设置为 viewDidLoad 这样在 任意的对象调用到了这个方法就会进入调试。</p><p>这个时候我们就可以操作了，但是在此之前！！！！！！我们需要安装一个辅助工具 <a href="https://github.com/facebook/chisel" target="_blank" rel="noopener">chisel</a>.<br>具体移步</p><p>在此之后我们运行  <code>pvc</code>可以看到vc 结构。</p><pre class="line-numbers language-txt g-mb-30"><code class="language-txt">&lt;MMUINavigationController 0x185a9b30&gt;, state: disappeared, view: &lt;UILayoutContainerView 0x186d2390&gt; not in the window   | &lt;WCAccountLoginFirstViewController 0x1728cc00&gt;, state: disappeared, view: &lt;UIView 0x185c7600&gt; not in the window   + &lt;MMUINavigationController 0x185653b0&gt;, state: appeared, view: &lt;UILayoutContainerView 0x183f7290&gt;, presented with: &lt;_UIFullscreenPresentationController 0x186f8a80&gt;   |    | &lt;WCAccountMainLoginViewController 0x17b1c800&gt;, state: appeared, view: &lt;UIView 0x18459cc0&gt;</code></pre><p>这个时候我们就可以使用我们刚才说到的监测方法调用的方法，来查看都有哪些方法被调用了。</p>    <p hidden id="CurrentFileName">IOS逆向学习.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年之前学习过一次，但是当初很快就被忙碌的工作占据，并且当时学习的晕晕乎乎的。现在我打算重新学习一下。别的就不开始多说了，开始搭建theos环境吧。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://blog.msiter.com/categories/IOS/"/>
    
    
      <category term="ios" scheme="http://blog.msiter.com/tags/ios/"/>
    
      <category term="逆向" scheme="http://blog.msiter.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="theos" scheme="http://blog.msiter.com/tags/theos/"/>
    
      <category term="tweak" scheme="http://blog.msiter.com/tags/tweak/"/>
    
  </entry>
  
  <entry>
    <title>extern与static用法</title>
    <link href="http://blog.msiter.com/externystaticyf-20180122.html"/>
    <id>http://blog.msiter.com/externystaticyf-20180122.html</id>
    <published>2018-01-22T19:32:00.000Z</published>
    <updated>2018-08-29T10:33:16.498Z</updated>
    
    <content type="html"><![CDATA[<br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="c-c-中的-Static" style="display: inline;"><a href="#c-c-中的-Static" class="headerlink" title="c/c++ 中的 Static"></a>c/c++ 中的 Static</h3><p>在C语言中，static可以用来修饰局部变量，全局变量以及函数。在不同的情况下static的作用不尽相同。</p><p>在C++中static还具有其它功能，如果在C++中对类中的某个函数用static进行修饰，则表示该函数属于一个类而不是属于此类的任何特定对象；如果对类中的某个变量进行static修饰，表示该变量为类以及其所有的对象所有。它们在存储空间中都只存在一个副本。可以通过类和对象去调用。对于静态成员函数，只能访问静态成员函数和静态成员变量，不能访问非静态成员函数或者变量。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="c-c-中的-extern" style="display: inline;"><a href="#c-c-中的-extern" class="headerlink" title="c/c++ 中的 extern"></a>c/c++ 中的 extern</h3><p>在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。</p><p>在上面的例子中可以看出，在file2中如果想调用file1中的变量a，只须用extern进行声明即可调用a，这就是extern的作用。在这里要注意extern声明的位置对其作用域也有关系，如果是在main函数中进行声明的，则只能在main函数中调用，在其它函数中不能调用。其实要调用其它文件中的函数和变量，只需把该文件用#include包含进来即可，为啥要用extern？因为用extern会加速程序的编译过程，这样能节省时间。</p><p>在C++中extern还有另外一种作用，用于指示C或者C＋＋函数的调用规范。比如在C＋＋中调用C库函数，就需要在C＋＋程序中用extern “C”声明要引用的函数。这是给链接器用的，告诉链接器在链接的时候用C函数规范来链接。主要原因是C＋＋和C程序编译完成后在目标代码中命名规则不同，用此来解决名字匹配的问题。</p><a id="more"></a><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="展开说明" style="display: inline;"><a href="#展开说明" class="headerlink" title="展开说明"></a>展开说明</h3><p>在讨论全局变量之前我们先要明白几个基本的概念：</p><ol><li>编译单元(模块)：<br> 在IDE开发工具大行其道的今天，对于编译的一些概念很多人已经不再清楚了，很多程序员最怕的就是处理连接错误(LINK ERROR), 因为它不像编译错误那样可以给出你程序错误的具体位置，你常常对这种错误感到懊恼，但是如果你经常使用gcc，makefile等工具在linux或者嵌 入式下做开发工作的话，那么你可能非常的理解编译与连接的区别！当在VC这样的开发工具上编写完代码，点击编译按钮准备生成exe文件时，VC其实做了两 步工作，第一步，将每个.cpp(.c)和相应.h文件编译成obj文件；第二步，将工程中所有的obj文件进行LINK生成最终的.exe文件，那么错 误就有可能在两个地方产生，一个是编译时的错误，这个主要是语法错误，另一个是连接错误，主要是重复定义变量等。我们所说的编译单元就是指在编译阶段生成 的每个obj文件，一个obj文件就是一个编译单元，也就是说 <strong>一个cpp(.c)和它相应的.h文件共同组成了一个编译单元，一个工程由很多个编译单元组 成，每个obj文件里包含了变量存储的相对地址等</strong> 。</li><li>声明与定义的区别<br> <strong>函数或变量在声明时，并没有给它实际的物理内存空间</strong>，它有时候可以保证你的程序编译通过， <strong>但是当函数或变量定义的时候，它就在内存中有了实际的物理空间</strong>，如果你在编译模块中引用的外部变量没有在整个工程中任何一个地方定义的话， 那么即使它在编译时可以通过，在连接时也会报错，因为程序在内存中找不到这个变量！你也可以这样理解， 对同一个变量或函数的声明可以有多次，而定义只能有一次!</li><li>extern的作用<br> extern有两个作用，第一个,当它与”C”一起连用时，如: extern “C” void fun(int a, int b); 则告诉编译器在编译fun这个函数名时 <strong>按着C的规则去翻译相应的函数名而不是C++的</strong>， C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是fun@aBc_int_int#%$也可能是别的，这要看编译器的”脾气”了 (不同的编译器采用的方法不一样)，为什么这么做呢，因为C++支持函数的重载啊，在这里不去过多的论述这个问题，如果你有兴趣可以去网上搜索，相信你可 以得到满意的解释!<br> <strong>当extern不与”C”在一起修饰变量或函数时，如在头文件中: extern int g_Int; 它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块或者其他模块中使用，记住它是一个声明不是定义!</strong> 也就是说B模块(编译 单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可, 在编译阶段，模块B虽然找不到该函数或变量，但它不会报错，它会在连接时从模块A生成的目标代码中找到此函数。</li></ol><p>如果你对以上几个概念已经非常明白的话，那么让我们一起来看以下几种全局变量/常量的使用区别:</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="用extern修饰的全局变量" style="display: inline;"><a href="#用extern修饰的全局变量" class="headerlink" title="用extern修饰的全局变量"></a>用extern修饰的全局变量</h3><p>以上已经说了extern的作用，下面我们来举个例子,如:<br>在test1.h中有下列声明:</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> TEST1H</span><span class="token macro property">#<span class="token directive keyword">define</span> TEST1H</span><span class="token keyword">extern</span> <span class="token keyword">char</span> g_str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明全局变量g_str</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在test1.cpp中</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">char</span> g_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义全局变量g_str</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是test1模块， 它的编译和连接都可以通过,如果我们还有test2模块也想使用g_str,只需要在原文件中引用就可以了</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上test1和test2可以同时编译连接通过，如果你感兴趣的话可以用ultraEdit打开test1.obj,你可以在里面着”123456”这 个字符串,但是你却不能在test2.obj里面找到，这是因为g_str是整个工程的全局变量，在内存中只存在一份, test2.obj这个编译单元不需要再有一份了，不然会在连接时报告重复定义这个错误!<br>有些人喜欢把全局变量的声明和定义放在一起，这样可以防止忘记了定义，如把上面test1.h改为</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">char</span> g_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个时候相当于没有extern</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把test1.cpp中的g_str的定义去掉,这个时候再编译连接test1和test2两个模块时，<strong>会报连接错误</strong>，这是因为你把全局变量 g_str的定义放在了头文件之后，test1.cpp这个模块包含了test1.h所以定义了一次g_str,而 test2.cpp也包含了test1.h所以再一次定义了g_str, <strong>这个时候连接器在连接test1和test2时发现两个g_str</strong>。如果你非要把g_str的定义放在test1.h中的话，那么就把test2的代码 中#include “test1.h”去掉 换成:</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">char</span> g_str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候编译器就知道g_str是引自于外部的一个编译模块了，不会在本模块中再重复定义一个出来，但是我想说这样做非常糟糕，因为你由于无法在 test2.cpp中使用#include “test1.h”, 那么test1.h中声明的其他函数你也无法使用了，除非也用都用extern修饰，这样的话你光声明的函数就要一大串，而且头文件的作用就是要给外部提 供接口使用的，所以 请记住， <strong>只在头文件中做声明，真理总是这么简单</strong>。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="用static修饰的全局变量" style="display: inline;"><a href="#用static修饰的全局变量" class="headerlink" title="用static修饰的全局变量"></a>用static修饰的全局变量</h3><p>首先，<strong>我要告诉你static与extern是一对“水火不容”的家伙</strong>，也就是说extern和static不能同时修饰一个变量；其次，<strong>static修 饰的全局变量声明与定义同时进行</strong>，也就是说当你在头文件中使用static声明了全局变量后，它也同时被定义了；最后，<strong>static修饰全局变量的作用域 只能是本身的编译单元</strong>，也就是说它的“全局”只对本编译单元有效，其他编译单元则看不到它,如:</p><p>test1.h:</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> TEST1H</span><span class="token macro property">#<span class="token directive keyword">define</span> TEST1H</span><span class="token keyword">static</span> <span class="token keyword">char</span> g_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test1.cpp:</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test2.cpp</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两个编译单元可以连接成功, 当你打开test1.obj时，你可以在它里面找到字符串”123456”, 同时你也可以在test2.obj中找到它们，它们之所以可以连接成功而没有报重复定义的错误是因为虽然它们有相同的内容，但是存储的物理地址并不一样， 就像是两个不同变量赋了相同的值一样，<strong>而这两个变量分别作用于它们各自的编译单元</strong>。<br>也许你比较较真，自己偷偷的跟踪调试上面的代码,结果你发现两个编译单元（test1, test2）的g_str的内存地址相同，于是你下结论static修饰的变量也可以作用于其他模块，但是我要告诉你，那是你的编译器在欺骗你，大多数编 译器都对代码都有优化功能，以达到生成的目标程序更节省内存，执行效率更高，当编译器在连接各个编译单元的时候，它会把相同内容的内存只拷贝一份，比如上 面的”123456”, 位于两个编译单元中的变量都是同样的内容，那么在连接的时候它在内存中就只会存在一份了， 如果你把上面的代码改成下面的样子，你马上就可以 <strong>拆穿编译器的谎言</strong>:</p><p>test1.cpp:</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    g_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test2.cpp</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test1.h"</span></span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> g_str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a23456</span>    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123456</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候你在跟踪代码时，就会发现两个编译单元中的g_str地址并不相同，因为你在一处修改了它，所以 <strong>编译器被强行的恢复内存的原貌</strong>，在内存中存在了两份拷贝给两个模块中的变量使用。</p><p><strong>正是因为static有以上的特性，所以一般定义static全局变量时，都把它放在原文件中而不是头文件，这样就不会给其他模块造成不必要的信息污染，同样记住这个原则吧！</strong></p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="转载" style="display: inline;"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><ul class="g-list-style-circle"><li><a href="https://www.cnblogs.com/dolphin0520/archive/2011/04/20/2022701.html" target="_blank" rel="noopener">浅谈C/C++中的static和extern关键字</a></li><li><a href="https://www.cnblogs.com/M-book/archive/2011/10/12/2208734.html" target="_blank" rel="noopener">【转】extern与static用法</a></li></ul>    <p hidden id="CurrentFileName">extern与static用法.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-c-中的-Static&quot;&gt;&lt;a href=&quot;#c-c-中的-Static&quot; class=&quot;headerlink&quot; title=&quot;c/c++ 中的 Static&quot;&gt;&lt;/a&gt;c/c++ 中的 Static&lt;/h3&gt;&lt;p&gt;在C语言中，static可以用来修饰局部变量，全局变量以及函数。在不同的情况下static的作用不尽相同。&lt;/p&gt;
&lt;p&gt;在C++中static还具有其它功能，如果在C++中对类中的某个函数用static进行修饰，则表示该函数属于一个类而不是属于此类的任何特定对象；如果对类中的某个变量进行static修饰，表示该变量为类以及其所有的对象所有。它们在存储空间中都只存在一个副本。可以通过类和对象去调用。对于静态成员函数，只能访问静态成员函数和静态成员变量，不能访问非静态成员函数或者变量。&lt;/p&gt;
&lt;h3 id=&quot;c-c-中的-extern&quot;&gt;&lt;a href=&quot;#c-c-中的-extern&quot; class=&quot;headerlink&quot; title=&quot;c/c++ 中的 extern&quot;&gt;&lt;/a&gt;c/c++ 中的 extern&lt;/h3&gt;&lt;p&gt;在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。&lt;/p&gt;
&lt;p&gt;在上面的例子中可以看出，在file2中如果想调用file1中的变量a，只须用extern进行声明即可调用a，这就是extern的作用。在这里要注意extern声明的位置对其作用域也有关系，如果是在main函数中进行声明的，则只能在main函数中调用，在其它函数中不能调用。其实要调用其它文件中的函数和变量，只需把该文件用#include包含进来即可，为啥要用extern？因为用extern会加速程序的编译过程，这样能节省时间。&lt;/p&gt;
&lt;p&gt;在C++中extern还有另外一种作用，用于指示C或者C＋＋函数的调用规范。比如在C＋＋中调用C库函数，就需要在C＋＋程序中用extern “C”声明要引用的函数。这是给链接器用的，告诉链接器在链接的时候用C函数规范来链接。主要原因是C＋＋和C程序编译完成后在目标代码中命名规则不同，用此来解决名字匹配的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资料" scheme="http://blog.msiter.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="c" scheme="http://blog.msiter.com/tags/c/"/>
    
      <category term="c++" scheme="http://blog.msiter.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>objc学习之路-inline</title>
    <link href="http://blog.msiter.com/objcxxzl-inline-20180122.html"/>
    <id>http://blog.msiter.com/objcxxzl-inline-20180122.html</id>
    <published>2018-01-22T10:31:00.000Z</published>
    <updated>2018-08-29T10:33:16.502Z</updated>
    
    <content type="html"><![CDATA[<p>在学习oc 之前，c的基础非常的不好所以今天我学习以下 inline的意思，要不然每次看到的时候心里都觉的有东西没理解。以下的文章转载自<a href="https://www.cnblogs.com/fnlingnzb-learner/p/6423917.html" target="_blank" rel="noopener">C++中的inline用法</a></p>                                <div class="g-brd-around g-brd-gray-light-v4 g-brd-2 g-brd-red-left g-line-height-1_8 g-pa-30 g-mb-30">                                  <em style="padding:0px;margin:0px;"><p>从今天开始修改以前的学习模式，以前的模式是说，没有学习完成之前不会写博客，从现在开始每次学习到了一些新的小知识也会记录下来</p></em>                                </div>        <br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="inline的作用" style="display: inline;"><a href="#inline的作用" class="headerlink" title="inline的作用"></a>inline的作用</h3><p>之前在学习递归函数的时候，就知道了，在大量的递归的时候，会创建很多个函数的对象，导致函数对象所占用的空间增大，让我们在使用的时候，看情况的使用，循环和递归两种方法来做事情。<br>而inline就是为了解决一些频繁使用的小函数大量消耗空间(斩内存)的问题，特别引入的修饰符，表示该函数为 内联函数。<br>占空间就是指放置程式的局部数据也就是函数内数据的内存空间，在系统下，栈内存是有限的，假如频繁大量的使用就会造成因栈空间不足所引起的程式错误，函数的死循环循环递归的最终结果就是导致栈内存空间枯竭。<br>下面我们来使用一段代码来解释什么事 内联函数。</p><a id="more"></a><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token comment" spellcheck="true">//函数定义为inline即:内联函数  </span><span class="token keyword">inline</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">dbtest</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"奇"</span> <span class="token operator">:</span> <span class="token string">"偶"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i:%d    奇偶性:%s /n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">dbtest</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子就是标准的内联函数的用法，使用inline修饰符带来的好处我们表面看不出来，其实在内部的工作就是在每个for循环的内部任何调用dbtest(i)的地方都换成了(i%2&gt;0)?”奇”:”偶”这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="inline使用限制" style="display: inline;"><a href="#inline使用限制" class="headerlink" title="inline使用限制"></a>inline使用限制</h3><p>当然inline的使用是有所限制的，inline只适合涵数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如while、switch，并且不能内联函数本身不能是直接递归函数(自己内部还调用自己的函数)。     </p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="inline仅是一个对编译器的建议" style="display: inline;"><a href="#inline仅是一个对编译器的建议" class="headerlink" title="inline仅是一个对编译器的建议"></a>inline仅是一个对编译器的建议</h3><p>inline函数仅仅是一个建议,对编译器的建议,所以最后能否真正内联,看编译器的意思,它如果认为函数不复杂,能在调用点展开,就会真正内联,并不是说声明了内联就会内联,声明内联只是一个建议而已.</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="建议：inline函数的定义放在头文件中" style="display: inline;"><a href="#建议：inline函数的定义放在头文件中" class="headerlink" title="建议：inline函数的定义放在头文件中"></a>建议：inline函数的定义放在头文件中</h3><p>其次，因为内联函数要在调用点展开，所以编译器必须随处可见内联函数的定义，要不然就成了非内联函数的调用了。所以，这要求每个调用了内联函数的文件都出现了该内联函数的定义。</p><p>因此，将内联函数的定义放在头文件里实现是合适的，省却你为每个文件实现一次的麻烦。</p><p>声明跟定义要一致：如果在每个文件里都实现一次该内联函数的话，那么，最好保证每个定义都是一样的，否则，将会引起未定义的行为。如果不是每个文件里的定义都一样，那么，编译器展开的是哪一个，那要看具体的编译器而定。所以，最好将内联函数定义放在头文件中。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="类中的成员函数与inline" style="display: inline;"><a href="#类中的成员函数与inline" class="headerlink" title="类中的成员函数与inline"></a>类中的成员函数与inline</h3><p>二类中的成员函数缺省都是内联的，如果在类定义时就在类中给出函数，那当然最好。如果在类中未出函数定义，而又想内联该函数的话，就需要在类外增加 inline，否则就认为不是内联的.</p><p>例如：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 自动地成为内联函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将成员函数的定义体放在类声明之中虽然能带来书写上的方便，但不是一种良好的编程风格，上例应该改成：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token comment" spellcheck="true">// 头文件</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义文件</span><span class="token keyword">inline</span> <span class="token keyword">void</span> A<span class="token operator">::</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="inline-是一种“用于实现的关键字”" style="display: inline;"><a href="#inline-是一种“用于实现的关键字”" class="headerlink" title="inline 是一种“用于实现的关键字”"></a>inline 是一种“用于实现的关键字”</h3><p>关键字inline 必须与 <strong>函数定义体</strong> 放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。</p><p>如下风格的函数Foo 不能成为内联函数：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inline 仅与函数声明放在一起</span><span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而如下风格的函数Foo 则成为内联函数：</p><pre class="line-numbers language-cpp g-mb-30"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// inline 与函数定义体放在一起</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以说，inline 是一种“用于实现的关键字”，而不是一种“用于声明的关键字”。一般地，用户可以阅读函数的声明，但是看不到函数的定义。尽管在大多数教科书中内联函数的声明、定义体前面都加了inline 关键字，但我认为inline不应该出现在函数的声明中。这个细节虽然不会影响函数的功能，但是体现了高质量C++/C 程序设计风格的一个基本原则：声明与定义不可混为一谈，用户没有必要、也不应该知道函数是否需要内联。</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="慎用inline" style="display: inline;"><a href="#慎用inline" class="headerlink" title="慎用inline"></a>慎用inline</h3><p>内联能提高函数的执行效率，为什么不把所有的函数都定义成内联函数？如果所有的函数都是内联函数，还用得着“内联”这个关键字吗？<br>内联是以代码膨胀（复制）为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。<br>如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。<br>以下情况不宜使用内联：</p><ol><li>如果函数体内的代码比较长，使用内联将导致内存消耗代价较高。</li><li>如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。类的构造函数和析构函数容易让人误解成使用内联更有效。要当心构造函数和析构函数可能会隐藏一些行为，如“偷偷地”执行了基类或成员对象的构造函数和析构函数。所以不要随便地将构造函数和析构函数的定义体放在类声明中。一个好的编译器将会根据函数的定义体，自动地取消不值得的内联（这进一步说明了 inline 不应该出现在函数的声明中）。</li></ol><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="总结" style="display: inline;"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>内联函数并不是一个增强性能的灵丹妙药。只有当函数非常短小的时候它才能得到我们想要的效果；但是，如果函数并不是很短而且在很多地方都被调用的话，那么将会使得可执行体的体积增大。<br>最令人烦恼的还是当编译器拒绝内联的时候。在老的实现中，结果很不尽人意，虽然在新的实现中有很大的改善，但是仍然还是不那么完善的。一些编译器能够足够的聪明来指出哪些函数可以内联哪些不能，但是大多数编译器就不那么聪明了，因此这就需要我们的经验来判断。如果内联函数不能增强性能，就避免使用它！</p><br><span class="g-font-size-14 g-color-gray-dark-v4">H3   </span><h3 id="参考资料" style="display: inline;"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul class="g-list-style-circle"><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6423917.html" target="_blank" rel="noopener">C++中的inline用法</a></li><li><a href="http://blog.csdn.net/lufeiop02/article/details/6526499" target="_blank" rel="noopener">关于c中的inline</a></li></ul>    <p hidden id="CurrentFileName">objc学习之路-inline.md</p>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习oc 之前，c的基础非常的不好所以今天我学习以下 inline的意思，要不然每次看到的时候心里都觉的有东西没理解。以下的文章转载自&lt;a href=&quot;https://www.cnblogs.com/fnlingnzb-learner/p/6423917.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C++中的inline用法&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从今天开始修改以前的学习模式，以前的模式是说，没有学习完成之前不会写博客，从现在开始每次学习到了一些新的小知识也会记录下来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;inline的作用&quot;&gt;&lt;a href=&quot;#inline的作用&quot; class=&quot;headerlink&quot; title=&quot;inline的作用&quot;&gt;&lt;/a&gt;inline的作用&lt;/h3&gt;&lt;p&gt;之前在学习递归函数的时候，就知道了，在大量的递归的时候，会创建很多个函数的对象，导致函数对象所占用的空间增大，让我们在使用的时候，看情况的使用，循环和递归两种方法来做事情。&lt;br&gt;而inline就是为了解决一些频繁使用的小函数大量消耗空间(斩内存)的问题，特别引入的修饰符，表示该函数为 内联函数。&lt;br&gt;占空间就是指放置程式的局部数据也就是函数内数据的内存空间，在系统下，栈内存是有限的，假如频繁大量的使用就会造成因栈空间不足所引起的程式错误，函数的死循环循环递归的最终结果就是导致栈内存空间枯竭。&lt;br&gt;下面我们来使用一段代码来解释什么事 内联函数。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资料" scheme="http://blog.msiter.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="ios" scheme="http://blog.msiter.com/tags/ios/"/>
    
      <category term="objc" scheme="http://blog.msiter.com/tags/objc/"/>
    
  </entry>
  
</feed>
